{"version":3,"file":"static/js/502.17e06701.chunk.js","mappings":"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","sources":["../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-33PXT2ZZ.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-42PAAV6C.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-4L2KHIRB.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-AAVMX6VD.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-JAXCH6PI.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-MU4RMLXT.mjs","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-O6L2WK4J.mjs","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/langium/src/dependency-injection.ts","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/langium/src/parser/token-builder.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/last.js","../node_modules/lodash-es/map.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/toInteger.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts"],"sourcesContent":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-O6L2WK4J.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-O6L2WK4J.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-O6L2WK4J.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-O6L2WK4J.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-O6L2WK4J.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-O6L2WK4J.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\r\nimport type { Module } from '../dependency-injection.js';\r\nimport { inject } from '../dependency-injection.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\r\nimport type { Mutable } from '../syntax-tree.js';\r\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\r\nimport { URI } from './uri-utils.js';\r\n\r\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\r\n    Grammar: () => undefined as unknown as ast.Grammar,\r\n    LanguageMetaData: () => ({\r\n        caseInsensitive: false,\r\n        fileExtensions: ['.langium'],\r\n        languageId: 'langium'\r\n    })\r\n};\r\n\r\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\r\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\r\n};\r\n\r\nfunction createMinimalGrammarServices(): LangiumCoreServices {\r\n    const shared = inject(\r\n        createDefaultSharedCoreModule(EmptyFileSystem),\r\n        minimalSharedGrammarModule\r\n    );\r\n    const grammar = inject(\r\n        createDefaultCoreModule({ shared }),\r\n        minimalGrammarModule\r\n    );\r\n    shared.ServiceRegistry.register(grammar);\r\n    return grammar;\r\n}\r\n\r\n/**\r\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\r\n * most notably the parser builder which interprets the grammar to create a parser.\r\n */\r\nexport function loadGrammarFromJson(json: string): ast.Grammar {\r\n    const services = createMinimalGrammarServices();\r\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\r\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\r\n    return astNode;\r\n}\r\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar Direction = \"Direction\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, Commit, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Junction, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Service, Statement];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"bits\" },\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"bits\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]}]},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"REFERENCE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@2\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@2\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-AAVMX6VD.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-MU4RMLXT.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-4L2KHIRB.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-33PXT2ZZ.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-JAXCH6PI.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-42PAAV6C.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-O6L2WK4J.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-HZACV5O2.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-U6EVFAJE.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-6QXAW7JJ.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-DI4KNLHI.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-CPDBPTLG.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-VG2SY3DT.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken, TokenType } from 'chevrotain';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AbstractElement } from '../languages/generated/ast.js';\r\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\r\nimport { Position } from 'vscode-languageserver-types';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\n\r\nexport class CstNodeBuilder {\r\n\r\n    private rootNode!: RootCstNodeImpl;\r\n    private nodeStack: CompositeCstNodeImpl[] = [];\r\n\r\n    get current(): CompositeCstNodeImpl {\r\n        return this.nodeStack[this.nodeStack.length - 1] ?? this.rootNode;\r\n    }\r\n\r\n    buildRootNode(input: string): RootCstNode {\r\n        this.rootNode = new RootCstNodeImpl(input);\r\n        this.rootNode.root = this.rootNode;\r\n        this.nodeStack = [this.rootNode];\r\n        return this.rootNode;\r\n    }\r\n\r\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\r\n        const compositeNode = new CompositeCstNodeImpl();\r\n        compositeNode.grammarSource = feature;\r\n        compositeNode.root = this.rootNode;\r\n        this.current.content.push(compositeNode);\r\n        this.nodeStack.push(compositeNode);\r\n        return compositeNode;\r\n    }\r\n\r\n    buildLeafNode(token: IToken, feature?: AbstractElement): LeafCstNode {\r\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\r\n        leafNode.grammarSource = feature;\r\n        leafNode.root = this.rootNode;\r\n        this.current.content.push(leafNode);\r\n        return leafNode;\r\n    }\r\n\r\n    removeNode(node: CstNode): void {\r\n        const parent = node.container;\r\n        if (parent) {\r\n            const index = parent.content.indexOf(node);\r\n            if (index >= 0) {\r\n                parent.content.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    addHiddenNodes(tokens: IToken[]): void {\r\n        const nodes: LeafCstNode[] = [];\r\n        for (const token of tokens) {\r\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\r\n            leafNode.root = this.rootNode;\r\n            nodes.push(leafNode);\r\n        }\r\n        let current: CompositeCstNode = this.current;\r\n        let added = false;\r\n        // If we are within a composite node, we add the hidden nodes to the content\r\n        if (current.content.length > 0) {\r\n            current.content.push(...nodes);\r\n            return;\r\n        }\r\n        // Otherwise we are at a newly created node\r\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\r\n        while (current.container) {\r\n            const index = current.container.content.indexOf(current);\r\n            if (index > 0) {\r\n                // Add the hidden nodes before the current node\r\n                current.container.content.splice(index, 0, ...nodes);\r\n                added = true;\r\n                break;\r\n            }\r\n            current = current.container;\r\n        }\r\n        // If we arrive at the root node, we add the hidden nodes at the beginning\r\n        // This is the case if the hidden nodes are the first nodes in the tree\r\n        if (!added) {\r\n            this.rootNode.content.unshift(...nodes);\r\n        }\r\n    }\r\n\r\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\r\n        const current: CstNode = this.current;\r\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\r\n        // Only if the $type is a string, we actually assign the element\r\n        if (typeof item.$type === 'string') {\r\n            this.current.astNode = <AstNode>item;\r\n        }\r\n        item.$cstNode = current;\r\n        const node = this.nodeStack.pop();\r\n        // Empty composite nodes are not valid\r\n        // Simply remove the node from the tree\r\n        if (node?.content.length === 0) {\r\n            this.removeNode(node);\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class AbstractCstNode implements CstNode {\r\n    abstract get offset(): number;\r\n    abstract get length(): number;\r\n    abstract get end(): number;\r\n    abstract get range(): Range;\r\n\r\n    container?: CompositeCstNode;\r\n    grammarSource?: AbstractElement;\r\n    root: RootCstNode;\r\n    private _astNode?: AstNode;\r\n\r\n    /** @deprecated use `container` instead. */\r\n    get parent(): CompositeCstNode | undefined {\r\n        return this.container;\r\n    }\r\n\r\n    /** @deprecated use `grammarSource` instead. */\r\n    get feature(): AbstractElement | undefined {\r\n        return this.grammarSource;\r\n    }\r\n\r\n    get hidden(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get astNode(): AstNode {\r\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\r\n        if (!node) {\r\n            throw new Error('This node has no associated AST element');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    set astNode(value: AstNode | undefined) {\r\n        this._astNode = value;\r\n    }\r\n\r\n    /** @deprecated use `astNode` instead. */\r\n    get element(): AstNode {\r\n        return this.astNode;\r\n    }\r\n\r\n    get text(): string {\r\n        return this.root.fullText.substring(this.offset, this.end);\r\n    }\r\n}\r\n\r\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\r\n    get offset(): number {\r\n        return this._offset;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._offset + this._length;\r\n    }\r\n\r\n    override get hidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    get tokenType(): TokenType {\r\n        return this._tokenType;\r\n    }\r\n\r\n    get range(): Range {\r\n        return this._range;\r\n    }\r\n\r\n    private _hidden: boolean;\r\n    private _offset: number;\r\n    private _length: number;\r\n    private _range: Range;\r\n    private _tokenType: TokenType;\r\n\r\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\r\n        super();\r\n        this._hidden = hidden;\r\n        this._offset = offset;\r\n        this._tokenType = tokenType;\r\n        this._length = length;\r\n        this._range = range;\r\n    }\r\n}\r\n\r\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\r\n    readonly content: CstNode[] = new CstNodeContainer(this);\r\n    private _rangeCache?: Range;\r\n\r\n    /** @deprecated use `content` instead. */\r\n    get children(): CstNode[] {\r\n        return this.content;\r\n    }\r\n\r\n    get offset(): number {\r\n        return this.firstNonHiddenNode?.offset ?? 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.end - this.offset;\r\n    }\r\n\r\n    get end(): number {\r\n        return this.lastNonHiddenNode?.end ?? 0;\r\n    }\r\n\r\n    get range(): Range {\r\n        const firstNode = this.firstNonHiddenNode;\r\n        const lastNode = this.lastNonHiddenNode;\r\n        if (firstNode && lastNode) {\r\n            if (this._rangeCache === undefined) {\r\n                const { range: firstRange } = firstNode;\r\n                const { range: lastRange } = lastNode;\r\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\r\n            }\r\n            return this._rangeCache;\r\n        } else {\r\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\r\n        }\r\n    }\r\n\r\n    private get firstNonHiddenNode(): CstNode | undefined {\r\n        for (const child of this.content) {\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[0];\r\n    }\r\n\r\n    private get lastNonHiddenNode(): CstNode | undefined {\r\n        for (let i = this.content.length - 1; i >= 0; i--) {\r\n            const child = this.content[i];\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[this.content.length - 1];\r\n    }\r\n}\r\n\r\nclass CstNodeContainer extends Array<CstNode> {\r\n    readonly parent: CompositeCstNode;\r\n\r\n    constructor(parent: CompositeCstNode) {\r\n        super();\r\n        this.parent = parent;\r\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\r\n    }\r\n\r\n    override push(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.push(...items);\r\n    }\r\n\r\n    override unshift(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.unshift(...items);\r\n    }\r\n\r\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\r\n        this.addParents(items);\r\n        return super.splice(start, count, ...items);\r\n    }\r\n\r\n    private addParents(items: CstNode[]): void {\r\n        for (const item of items) {\r\n            (<AbstractCstNode>item).container = this.parent;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\r\n    private _text = '';\r\n\r\n    override get text(): string {\r\n        return this._text.substring(this.offset, this.end);\r\n    }\r\n\r\n    get fullText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    constructor(input?: string) {\r\n        super();\r\n        this._text = input ?? '';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\r\nimport type { Lexer, LexerResult } from './lexer.js';\r\nimport type { IParserConfig } from './parser-config.js';\r\nimport type { ValueConverter } from './value-converter.js';\r\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\r\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\r\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\r\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\r\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\r\nimport { CstNodeBuilder } from './cst-node-builder.js';\r\nimport type { LexingReport } from './token-builder.js';\r\n\r\nexport type ParseResult<T = AstNode> = {\r\n    value: T,\r\n    parserErrors: IRecognitionException[],\r\n    lexerErrors: ILexingError[],\r\n    lexerReport?: LexingReport\r\n}\r\n\r\nexport const DatatypeSymbol = Symbol('Datatype');\r\n\r\ninterface DataTypeNode {\r\n    $cstNode: CompositeCstNode\r\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\r\n    $type: symbol\r\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\r\n    value: string\r\n}\r\n\r\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\r\n    return node.$type === DatatypeSymbol;\r\n}\r\n\r\ntype RuleResult = (args: Args) => any;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype RuleImpl = (args: Args) => any;\r\n\r\ninterface AssignmentElement {\r\n    assignment?: Assignment\r\n    isCrossRef: boolean\r\n}\r\n\r\n/**\r\n * Base interface for all parsers. Mainly used by the `parser-builder-base.ts` to perform work on different kinds of parsers.\r\n * The main use cases are:\r\n * * AST parser: Based on a string, create an AST for the current grammar\r\n * * Completion parser: Based on a partial string, identify the current position of the input within the grammar\r\n */\r\nexport interface BaseParser {\r\n    /**\r\n     * Adds a new parser rule to the parser\r\n     */\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    /**\r\n     * Returns the executable rule function for the specified rule name\r\n     */\r\n    getRule(name: string): RuleResult | undefined;\r\n    /**\r\n     * Performs alternatives parsing (the `|` operation in EBNF/Langium)\r\n     */\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\r\n    /**\r\n     * Parses the callback as optional (the `?` operation in EBNF/Langium)\r\n     */\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 0 or more times (the `*` operation in EBNF/Langium)\r\n     */\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 1 or more times (the `+` operation in EBNF/Langium)\r\n     */\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Consumes a specific token type from the token input stream.\r\n     * Requires a unique index within the rule for a specific token type.\r\n     */\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    /**\r\n     * Invokes the executable function for a given parser rule.\r\n     * Requires a unique index within the rule for a specific sub rule.\r\n     * Arguments can be supplied to the rule invocation for semantic predicates\r\n     */\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    /**\r\n     * Executes a grammar action that modifies the currently active AST node\r\n     */\r\n    action($type: string, action: Action): void;\r\n    /**\r\n     * Finishes construction of the current AST node. Only used by the AST parser.\r\n     */\r\n    construct(): unknown;\r\n    /**\r\n     * Whether the parser is currently actually in use or in \"recording mode\".\r\n     * Recording mode is activated once when the parser is analyzing itself.\r\n     * During this phase, no input exists and therefore no AST should be constructed\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Current state of the unordered groups\r\n     */\r\n    get unorderedGroups(): Map<string, boolean[]>;\r\n    /**\r\n     * The rule stack indicates the indices of rules that are currently invoked,\r\n     * in order of their invocation.\r\n     */\r\n    getRuleStack(): number[];\r\n}\r\n\r\nconst ruleSuffix = '\\u200B';\r\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\r\n\r\nexport abstract class AbstractLangiumParser implements BaseParser {\r\n\r\n    protected readonly lexer: Lexer;\r\n    protected readonly wrapper: ChevrotainWrapper;\r\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\r\n\r\n    protected allRules = new Map<string, RuleResult>();\r\n    protected mainRule!: RuleResult;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.lexer = services.parser.Lexer;\r\n        const tokens = this.lexer.definition;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.wrapper = new ChevrotainWrapper(tokens, {\r\n            ...services.parser.ParserConfig,\r\n            skipValidations: production,\r\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\r\n        });\r\n    }\r\n\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.wrapper.wrapOr(idx, choices);\r\n    }\r\n\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapOption(idx, callback);\r\n    }\r\n\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapMany(idx, callback);\r\n    }\r\n\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapAtLeastOne(idx, callback);\r\n    }\r\n\r\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    abstract subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    abstract action($type: string, action: Action): void;\r\n    abstract construct(): unknown;\r\n\r\n    getRule(name: string): RuleResult | undefined {\r\n        return this.allRules.get(name);\r\n    }\r\n\r\n    isRecording(): boolean {\r\n        return this.wrapper.IS_RECORDING;\r\n    }\r\n\r\n    get unorderedGroups(): Map<string, boolean[]> {\r\n        return this._unorderedGroups;\r\n    }\r\n\r\n    getRuleStack(): number[] {\r\n        return (this.wrapper as any).RULE_STACK;\r\n    }\r\n\r\n    finalize(): void {\r\n        this.wrapper.wrapSelfAnalysis();\r\n    }\r\n}\r\n\r\nexport interface ParserOptions {\r\n    rule?: string\r\n}\r\n\r\nexport class LangiumParser extends AbstractLangiumParser {\r\n    private readonly linker: Linker;\r\n    private readonly converter: ValueConverter;\r\n    private readonly astReflection: AstReflection;\r\n    private readonly nodeBuilder = new CstNodeBuilder();\r\n    private lexerResult?: LexerResult;\r\n    private stack: any[] = [];\r\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\r\n\r\n    private get current(): any {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        super(services);\r\n        this.linker = services.references.Linker;\r\n        this.converter = services.parser.ValueConverter;\r\n        this.astReflection = services.shared.AstReflection;\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const type = this.computeRuleType(rule);\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private computeRuleType(rule: ParserRule): string | symbol | undefined {\r\n        if (rule.fragment) {\r\n            return undefined;\r\n        } else if (isDataTypeRule(rule)) {\r\n            return DatatypeSymbol;\r\n        } else {\r\n            const explicit = getExplicitRuleType(rule);\r\n            return explicit ?? rule.name;\r\n        }\r\n    }\r\n\r\n    parse<T extends AstNode = AstNode>(input: string, options: ParserOptions = {}): ParseResult<T> {\r\n        this.nodeBuilder.buildRootNode(input);\r\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\r\n        this.wrapper.input = lexerResult.tokens;\r\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\r\n        if (!ruleMethod) {\r\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\r\n        }\r\n        const result = ruleMethod.call(this.wrapper, {});\r\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\r\n        this.unorderedGroups.clear();\r\n        this.lexerResult = undefined;\r\n        return {\r\n            value: result,\r\n            lexerErrors: lexerResult.errors,\r\n            lexerReport: lexerResult.report,\r\n            parserErrors: this.wrapper.errors\r\n        };\r\n    }\r\n\r\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            // Only create a new AST node in case the calling rule is not a fragment rule\r\n            const createNode = !this.isRecording() && $type !== undefined;\r\n            if (createNode) {\r\n                const node: any = { $type };\r\n                this.stack.push(node);\r\n                if ($type === DatatypeSymbol) {\r\n                    node.value = '';\r\n                }\r\n            }\r\n            let result: unknown;\r\n            try {\r\n                result = implementation(args);\r\n            } catch (err) {\r\n                result = undefined;\r\n            }\r\n            if (result === undefined && createNode) {\r\n                result = this.construct();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    private extractHiddenTokens(token: IToken): IToken[] {\r\n        const hiddenTokens = this.lexerResult!.hidden;\r\n        if (!hiddenTokens.length) {\r\n            return [];\r\n        }\r\n        const offset = token.startOffset;\r\n        for (let i = 0; i < hiddenTokens.length; i++) {\r\n            const token = hiddenTokens[i];\r\n            if (token.startOffset > offset) {\r\n                return hiddenTokens.splice(0, i);\r\n            }\r\n        }\r\n        return hiddenTokens.splice(0, hiddenTokens.length);\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        const token = this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording() && this.isValidToken(token)) {\r\n            const hiddenTokens = this.extractHiddenTokens(token);\r\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\r\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\r\n            const { assignment, isCrossRef } = this.getAssignment(feature);\r\n            const current = this.current;\r\n            if (assignment) {\r\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\r\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\r\n            } else if (isDataTypeNode(current)) {\r\n                let text = token.image;\r\n                if (!isKeyword(feature)) {\r\n                    text = this.converter.convert(text, leafNode).toString();\r\n                }\r\n                current.value += text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\r\n     *\r\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\r\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\r\n     */\r\n    private isValidToken(token: IToken): boolean {\r\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        let cstNode: CompositeCstNode | undefined;\r\n        if (!this.isRecording() && !fragment) {\r\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\r\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\r\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\r\n            // This is intended, as fragment rules only enrich the current AST node\r\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\r\n        }\r\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\r\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\r\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\r\n        }\r\n    }\r\n\r\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\r\n        const { assignment, isCrossRef } = this.getAssignment(feature);\r\n        if (assignment) {\r\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\r\n        } else if (!assignment) {\r\n            // If we call a subrule without an assignment we either:\r\n            // 1. append the result of the subrule (data type rule)\r\n            // 2. override the current object with the newly parsed object\r\n            // If the current element is an AST node and the result of the subrule\r\n            // is a data type rule, we can safely discard the results.\r\n            const current = this.current;\r\n            if (isDataTypeNode(current)) {\r\n                current.value += result.toString();\r\n            } else if (typeof result === 'object' && result) {\r\n                const object = this.assignWithoutOverride(result, current);\r\n                const newItem = object;\r\n                this.stack.pop();\r\n                this.stack.push(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    action($type: string, action: Action): void {\r\n        if (!this.isRecording()) {\r\n            let last = this.current;\r\n            if (action.feature && action.operator) {\r\n                last = this.construct();\r\n                this.nodeBuilder.removeNode(last.$cstNode);\r\n                const node = this.nodeBuilder.buildCompositeNode(action);\r\n                node.content.push(last.$cstNode);\r\n                const newItem = { $type };\r\n                this.stack.push(newItem);\r\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\r\n            } else {\r\n                last.$type = $type;\r\n            }\r\n        }\r\n    }\r\n\r\n    construct(): unknown {\r\n        if (this.isRecording()) {\r\n            return undefined;\r\n        }\r\n        const obj = this.current;\r\n        linkContentToContainer(obj);\r\n        this.nodeBuilder.construct(obj);\r\n        this.stack.pop();\r\n        if (isDataTypeNode(obj)) {\r\n            return this.converter.convert(obj.value, obj.$cstNode);\r\n        } else {\r\n            assignMandatoryProperties(this.astReflection, obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private getAssignment(feature: AbstractElement): AssignmentElement {\r\n        if (!this.assignmentMap.has(feature)) {\r\n            const assignment = getContainerOfType(feature, isAssignment);\r\n            this.assignmentMap.set(feature, {\r\n                assignment: assignment,\r\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\r\n            });\r\n        }\r\n        return this.assignmentMap.get(feature)!;\r\n    }\r\n\r\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\r\n        const obj = this.current;\r\n        let item: unknown;\r\n        if (isCrossRef && typeof value === 'string') {\r\n            item = this.linker.buildReference(obj, feature, cstNode, value);\r\n        } else {\r\n            item = value;\r\n        }\r\n        switch (operator) {\r\n            case '=': {\r\n                obj[feature] = item;\r\n                break;\r\n            }\r\n            case '?=': {\r\n                obj[feature] = true;\r\n                break;\r\n            }\r\n            case '+=': {\r\n                if (!Array.isArray(obj[feature])) {\r\n                    obj[feature] = [];\r\n                }\r\n                obj[feature].push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignWithoutOverride(target: any, source: any): any {\r\n        for (const [name, existingValue] of Object.entries(source)) {\r\n            const newValue = target[name];\r\n            if (newValue === undefined) {\r\n                target[name] = existingValue;\r\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\r\n                existingValue.push(...newValue);\r\n                target[name] = existingValue;\r\n            }\r\n        }\r\n        // The target was parsed from a unassigned subrule\r\n        // After the subrule construction, it received a cst node\r\n        // This CST node will later be overriden by the cst node builder\r\n        // To prevent references to stale AST nodes in the CST,\r\n        // we need to remove the reference here\r\n        const targetCstNode = target.$cstNode;\r\n        if (targetCstNode) {\r\n            targetCstNode.astNode = undefined;\r\n            target.$cstNode = undefined;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    get definitionErrors(): IParserDefinitionError[] {\r\n        return this.wrapper.definitionErrors;\r\n    }\r\n}\r\n\r\nexport interface IParserDefinitionError {\r\n    message: string\r\n    type: number\r\n    ruleName?: string\r\n}\r\n\r\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\r\n\r\n    buildMismatchTokenMessage(options: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\r\n    }\r\n\r\n    buildNotAllInputParsedMessage(options: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\r\n    }\r\n\r\n    buildNoViableAltMessage(options: {\r\n        expectedPathsPerAlt: TokenType[][][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\r\n    }\r\n\r\n    buildEarlyExitMessage(options: {\r\n        expectedIterationPaths: TokenType[][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\r\n    }\r\n\r\n}\r\n\r\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\r\n\r\n    override buildMismatchTokenMessage({ expected, actual }: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        const expectedMsg = expected.LABEL\r\n            ? '`' + expected.LABEL + '`'\r\n            : expected.name.endsWith(':KW')\r\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\r\n                : `token of type '${expected.name}'`;\r\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\r\n    }\r\n\r\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\r\n    }\r\n}\r\n\r\nexport interface CompletionParserResult {\r\n    tokens: IToken[]\r\n    elementStack: AbstractElement[]\r\n    tokenIndex: number\r\n}\r\n\r\nexport class LangiumCompletionParser extends AbstractLangiumParser {\r\n    private tokens: IToken[] = [];\r\n\r\n    private elementStack: AbstractElement[] = [];\r\n    private lastElementStack: AbstractElement[] = [];\r\n    private nextTokenIndex = 0;\r\n    private stackSize = 0;\r\n\r\n    action(): void {\r\n        // NOOP\r\n    }\r\n\r\n    construct(): unknown {\r\n        // NOOP\r\n        return undefined;\r\n    }\r\n\r\n    parse(input: string): CompletionParserResult {\r\n        this.resetState();\r\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\r\n        this.tokens = tokens.tokens;\r\n        this.wrapper.input = [...this.tokens];\r\n        this.mainRule.call(this.wrapper, {});\r\n        this.unorderedGroups.clear();\r\n        return {\r\n            tokens: this.tokens,\r\n            elementStack: [...this.lastElementStack],\r\n            tokenIndex: this.nextTokenIndex\r\n        };\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private resetState(): void {\r\n        this.elementStack = [];\r\n        this.lastElementStack = [];\r\n        this.nextTokenIndex = 0;\r\n        this.stackSize = 0;\r\n    }\r\n\r\n    private startImplementation(implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            const size = this.keepStackSize();\r\n            try {\r\n                implementation(args);\r\n            } finally {\r\n                this.resetStackSize(size);\r\n            }\r\n        };\r\n    }\r\n\r\n    private removeUnexpectedElements(): void {\r\n        this.elementStack.splice(this.stackSize);\r\n    }\r\n\r\n    keepStackSize(): number {\r\n        const size = this.elementStack.length;\r\n        this.stackSize = size;\r\n        return size;\r\n    }\r\n\r\n    resetStackSize(size: number): void {\r\n        this.removeUnexpectedElements();\r\n        this.stackSize = size;\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording()) {\r\n            this.lastElementStack = [...this.elementStack, feature];\r\n            this.nextTokenIndex = this.currIdx + 1;\r\n        }\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        this.before(feature);\r\n        this.wrapper.wrapSubrule(idx, rule, args);\r\n        this.after(feature);\r\n    }\r\n\r\n    before(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            this.elementStack.push(element);\r\n        }\r\n    }\r\n\r\n    after(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            const index = this.elementStack.lastIndexOf(element);\r\n            if (index >= 0) {\r\n                this.elementStack.splice(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    get currIdx(): number {\r\n        return (this.wrapper as any).currIdx;\r\n    }\r\n}\r\n\r\nconst defaultConfig: IParserConfig = {\r\n    recoveryEnabled: true,\r\n    nodeLocationTracking: 'full',\r\n    skipValidations: true,\r\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\r\n};\r\n\r\n/**\r\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\r\n * This way, we can build the `LangiumParser` as a composition.\r\n */\r\nclass ChevrotainWrapper extends EmbeddedActionsParser {\r\n\r\n    // This array is set in the base implementation of Chevrotain.\r\n    definitionErrors: IParserDefinitionError[];\r\n\r\n    constructor(tokens: TokenVocabulary, config: IParserConfig) {\r\n        const useDefaultLookahead = config && 'maxLookahead' in config;\r\n        super(tokens, {\r\n            ...defaultConfig,\r\n            lookaheadStrategy: useDefaultLookahead\r\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\r\n                : new LLStarLookaheadStrategy({\r\n                    // If validations are skipped, don't log the lookahead warnings\r\n                    logging: config.skipValidations ? () => { } : undefined\r\n                }),\r\n            ...config,\r\n        });\r\n    }\r\n\r\n    get IS_RECORDING(): boolean {\r\n        return this.RECORDING_PHASE;\r\n    }\r\n\r\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\r\n        return this.RULE(name, impl);\r\n    }\r\n\r\n    wrapSelfAnalysis(): void {\r\n        this.performSelfAnalysis();\r\n    }\r\n\r\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\r\n        return this.consume(idx, tokenType);\r\n    }\r\n\r\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\r\n        return this.subrule(idx, rule, {\r\n            ARGS: [args]\r\n        });\r\n    }\r\n\r\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.or(idx, choices);\r\n    }\r\n\r\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.option(idx, callback);\r\n    }\r\n\r\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.many(idx, callback);\r\n    }\r\n\r\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.atLeastOne(idx, callback);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\r\nimport type { BaseParser } from './langium-parser.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { Cardinality } from '../utils/grammar-utils.js';\r\nimport { EMPTY_ALT, EOF } from 'chevrotain';\r\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\r\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\r\n\r\ntype RuleContext = {\r\n    optional: number,\r\n    consume: number,\r\n    subrule: number,\r\n    many: number,\r\n    or: number\r\n} & ParserContext;\r\n\r\ntype ParserContext = {\r\n    parser: BaseParser\r\n    tokens: TokenTypeDictionary\r\n    ruleNames: Map<AstNode, string>\r\n}\r\n\r\ntype Rule = (args: Args) => unknown;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype Predicate = (args: Args) => boolean;\r\n\r\ntype Method = (args: Args) => void;\r\n\r\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\r\n    const parserContext: ParserContext = {\r\n        parser,\r\n        tokens,\r\n        ruleNames: new Map()\r\n    };\r\n    buildRules(parserContext, grammar);\r\n    return parser;\r\n}\r\n\r\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\r\n    const reachable = getAllReachableRules(grammar, false);\r\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\r\n    for (const rule of parserRules) {\r\n        const ctx: RuleContext = {\r\n            ...parserContext,\r\n            consume: 1,\r\n            optional: 1,\r\n            subrule: 1,\r\n            many: 1,\r\n            or: 1\r\n        };\r\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\r\n    }\r\n}\r\n\r\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\r\n    let method: Method;\r\n    if (isKeyword(element)) {\r\n        method = buildKeyword(ctx, element);\r\n    } else if (isAction(element)) {\r\n        method = buildAction(ctx, element);\r\n    } else if (isAssignment(element)) {\r\n        method = buildElement(ctx, element.terminal);\r\n    } else if (isCrossReference(element)) {\r\n        method = buildCrossReference(ctx, element);\r\n    } else if (isRuleCall(element)) {\r\n        method = buildRuleCall(ctx, element);\r\n    } else if (isAlternatives(element)) {\r\n        method = buildAlternatives(ctx, element);\r\n    } else if (isUnorderedGroup(element)) {\r\n        method = buildUnorderedGroup(ctx, element);\r\n    } else if (isGroup(element)) {\r\n        method = buildGroup(ctx, element);\r\n    } else if(isEndOfFile(element)) {\r\n        const idx = ctx.consume++;\r\n        method = () => ctx.parser.consume(idx, EOF, element);\r\n    } else {\r\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\r\n    }\r\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\r\n}\r\n\r\nfunction buildAction(ctx: RuleContext, action: Action): Method {\r\n    const actionType = getTypeName(action);\r\n    return () => ctx.parser.action(actionType, action);\r\n}\r\n\r\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\r\n    const rule = ruleCall.rule.ref;\r\n    if (isParserRule(rule)) {\r\n        const idx = ctx.subrule++;\r\n        const fragment = rule.fragment;\r\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\r\n    } else if (isTerminalRule(rule)) {\r\n        const idx = ctx.consume++;\r\n        const method = getToken(ctx, rule.name);\r\n        return () => ctx.parser.consume(idx, method, ruleCall);\r\n    } else if (!rule) {\r\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\r\n    } else {\r\n        assertUnreachable(rule);\r\n    }\r\n}\r\n\r\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\r\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\r\n    return (args) => {\r\n        const ruleArgs: Args = {};\r\n        for (let i = 0; i < predicates.length; i++) {\r\n            const ruleTarget = rule.parameters[i];\r\n            const predicate = predicates[i];\r\n            ruleArgs[ruleTarget.name] = predicate(args);\r\n        }\r\n        return ruleArgs;\r\n    };\r\n}\r\n\r\ninterface PredicatedMethod {\r\n    ALT: Method,\r\n    GATE?: Predicate\r\n}\r\n\r\nfunction buildPredicate(condition: Condition): Predicate {\r\n    if (isDisjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) || right(args));\r\n    } else if (isConjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) && right(args));\r\n    } else if (isNegation(condition)) {\r\n        const value = buildPredicate(condition.value);\r\n        return (args) => !value(args);\r\n    } else if (isParameterReference(condition)) {\r\n        const name = condition.parameter.ref!.name;\r\n        return (args) => args !== undefined && args[name] === true;\r\n    } else if (isBooleanLiteral(condition)) {\r\n        const value = Boolean(condition.true);\r\n        return () => value;\r\n    }\r\n    assertUnreachable(condition);\r\n}\r\n\r\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\r\n    if (alternatives.elements.length === 1) {\r\n        return buildElement(ctx, alternatives.elements[0]);\r\n    } else {\r\n        const methods: PredicatedMethod[] = [];\r\n\r\n        for (const element of alternatives.elements) {\r\n            const predicatedMethod: PredicatedMethod = {\r\n                // Since we handle the guard condition in the alternative already\r\n                // We can ignore the group guard condition inside\r\n                ALT: buildElement(ctx, element, true)\r\n            };\r\n            const guard = getGuardCondition(element);\r\n            if (guard) {\r\n                predicatedMethod.GATE = buildPredicate(guard);\r\n            }\r\n            methods.push(predicatedMethod);\r\n        }\r\n\r\n        const idx = ctx.or++;\r\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\r\n            const alt: IOrAlt<unknown> = {\r\n                ALT: () => method.ALT(args)\r\n            };\r\n            const gate = method.GATE;\r\n            if (gate) {\r\n                alt.GATE = () => gate(args);\r\n            }\r\n            return alt;\r\n        }));\r\n    }\r\n}\r\n\r\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\r\n    if (group.elements.length === 1) {\r\n        return buildElement(ctx, group.elements[0]);\r\n    }\r\n    const methods: PredicatedMethod[] = [];\r\n\r\n    for (const element of group.elements) {\r\n        const predicatedMethod: PredicatedMethod = {\r\n            // Since we handle the guard condition in the alternative already\r\n            // We can ignore the group guard condition inside\r\n            ALT: buildElement(ctx, element, true)\r\n        };\r\n        const guard = getGuardCondition(element);\r\n        if (guard) {\r\n            predicatedMethod.GATE = buildPredicate(guard);\r\n        }\r\n        methods.push(predicatedMethod);\r\n    }\r\n\r\n    const orIdx = ctx.or++;\r\n\r\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\r\n        const stackId = lParser.getRuleStack().join('-');\r\n        return `uGroup_${groupIdx}_${stackId}`;\r\n    };\r\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\r\n        const alt: IOrAlt<unknown> = { ALT: () => true };\r\n        const parser = ctx.parser;\r\n        alt.ALT = () => {\r\n            method.ALT(args);\r\n            if (!parser.isRecording()) {\r\n                const key = idFunc(orIdx, parser);\r\n                if (!parser.unorderedGroups.get(key)) {\r\n                    // init after clear state\r\n                    parser.unorderedGroups.set(key, []);\r\n                }\r\n                const groupState = parser.unorderedGroups.get(key)!;\r\n                if (typeof groupState?.[idx] === 'undefined') {\r\n                    // Not accessed yet\r\n                    groupState[idx] = true;\r\n                }\r\n            }\r\n        };\r\n        const gate = method.GATE;\r\n        if (gate) {\r\n            alt.GATE = () => gate(args);\r\n        } else {\r\n            alt.GATE = () => {\r\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\r\n                const allow = !trackedAlternatives?.[idx];\r\n                return allow;\r\n            };\r\n        }\r\n        return alt;\r\n    }));\r\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\r\n    return (args) => {\r\n        wrapped(args);\r\n        if (!ctx.parser.isRecording()) {\r\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\r\n        }\r\n    };\r\n}\r\n\r\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\r\n    const methods = group.elements.map(e => buildElement(ctx, e));\r\n    return (args) => methods.forEach(method => method(args));\r\n}\r\n\r\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\r\n    if (isGroup(element)) {\r\n        return element.guardCondition;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\r\n    if (!terminal) {\r\n        if (!crossRef.type.ref) {\r\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\r\n        }\r\n        const assignment = findNameAssignment(crossRef.type.ref);\r\n        const assignTerminal = assignment?.terminal;\r\n        if (!assignTerminal) {\r\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\r\n        }\r\n        return buildCrossReference(ctx, crossRef, assignTerminal);\r\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\r\n        // The terminal is a data type rule here. Everything else will result in a validation error.\r\n        const rule = terminal.rule.ref;\r\n        const idx = ctx.subrule++;\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\r\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\r\n        const idx = ctx.consume++;\r\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\r\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\r\n    } else if (isKeyword(terminal)) {\r\n        const idx = ctx.consume++;\r\n        const keyword = getToken(ctx, terminal.value);\r\n        return () => ctx.parser.consume(idx, keyword, crossRef);\r\n    }\r\n    else {\r\n        throw new Error('Could not build cross reference parser');\r\n    }\r\n}\r\n\r\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\r\n    const idx = ctx.consume++;\r\n    const token = ctx.tokens[keyword.value];\r\n    if (!token) {\r\n        throw new Error('Could not find token for keyword: ' + keyword.value);\r\n    }\r\n    return () => ctx.parser.consume(idx, token, keyword);\r\n}\r\n\r\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\r\n    const gate = guard && buildPredicate(guard);\r\n\r\n    if (!cardinality) {\r\n        if (gate) {\r\n            const idx = ctx.or++;\r\n            return (args) => ctx.parser.alternatives(idx, [\r\n                {\r\n                    ALT: () => method(args),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return method;\r\n        }\r\n    }\r\n\r\n    if (cardinality === '*') {\r\n        const idx = ctx.many++;\r\n        return (args) => ctx.parser.many(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else if (cardinality === '+') {\r\n        const idx = ctx.many++;\r\n        if (gate) {\r\n            const orIdx = ctx.or++;\r\n            // In the case of a guard condition for the `+` group\r\n            // We combine it with an empty alternative\r\n            // If the condition returns true, it needs to parse at least a single iteration\r\n            // If its false, it is not allowed to parse anything\r\n            return (args) => ctx.parser.alternatives(orIdx, [\r\n                {\r\n                    ALT: () => ctx.parser.atLeastOne(idx, {\r\n                        DEF: () => method(args)\r\n                    }),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return (args) => ctx.parser.atLeastOne(idx, {\r\n                DEF: () => method(args),\r\n            });\r\n        }\r\n    } else if (cardinality === '?') {\r\n        const idx = ctx.optional++;\r\n        return (args) => ctx.parser.optional(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else {\r\n        assertUnreachable(cardinality);\r\n    }\r\n}\r\n\r\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\r\n    const name = getRuleName(ctx, element);\r\n    const rule = ctx.parser.getRule(name);\r\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\r\n    return rule;\r\n}\r\n\r\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\r\n    if (isParserRule(element)) {\r\n        return element.name;\r\n    } else if (ctx.ruleNames.has(element)) {\r\n        return ctx.ruleNames.get(element)!;\r\n    } else {\r\n        let item: AstNode = element;\r\n        let parent: AstNode = item.$container!;\r\n        let ruleName: string = element.$type;\r\n        while (!isParserRule(parent)) {\r\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\r\n                const index = parent.elements.indexOf(item as AbstractElement);\r\n                ruleName = index.toString() + ':' + ruleName;\r\n            }\r\n            item = parent;\r\n            parent = parent.$container!;\r\n        }\r\n        const rule = parent as ParserRule;\r\n        ruleName = rule.name + ':' + ruleName;\r\n        ctx.ruleNames.set(element, ruleName);\r\n        return ruleName;\r\n    }\r\n}\r\n\r\nfunction getToken(ctx: ParserContext, name: string): TokenType {\r\n    const token = ctx.tokens[name];\r\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\r\n    return token;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\n/**\r\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\r\n * available at `services.Grammar`.\r\n */\r\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const parser = prepareLangiumParser(services);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n\r\n/**\r\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\r\n * information when the parser is initially validated.\r\n */\r\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumParser(services);\r\n    return createParser(grammar, parser, lexer.definition);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\r\n\r\nexport type MaybePromise<T> = T | Promise<T>\r\n\r\n/**\r\n * Delays the execution of the current code to the next tick of the event loop.\r\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\r\n */\r\nexport function delayNextTick(): Promise<void> {\r\n    return new Promise(resolve => {\r\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\r\n        // Using `setTimeout` of the browser API accomplishes the same result.\r\n        if (typeof setImmediate === 'undefined') {\r\n            setTimeout(resolve, 0);\r\n        } else {\r\n            setImmediate(resolve);\r\n        }\r\n    });\r\n}\r\n\r\nlet lastTick = 0;\r\nlet globalInterruptionPeriod = 10;\r\n\r\n/**\r\n * Reset the global interruption period and create a cancellation token source.\r\n */\r\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\r\n    lastTick = performance.now();\r\n    return new CancellationTokenSource();\r\n}\r\n\r\n/**\r\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\r\n * The default value is 10ms.\r\n */\r\nexport function setInterruptionPeriod(period: number): void {\r\n    globalInterruptionPeriod = period;\r\n}\r\n\r\n/**\r\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\r\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\r\n * this symbol as rejection reason.\r\n */\r\nexport const OperationCancelled = Symbol('OperationCancelled');\r\n\r\n/**\r\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\r\n * has been cancelled.\r\n */\r\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\r\n    return err === OperationCancelled;\r\n}\r\n\r\n/**\r\n * This function does two things:\r\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\r\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\r\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\r\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\r\n *\r\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\r\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\r\n * the promise) to avoid that event being exposed as an error.\r\n */\r\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\r\n    if (token === CancellationToken.None) {\r\n        // Early exit in case cancellation was disabled by the caller\r\n        return;\r\n    }\r\n    const current = performance.now();\r\n    if (current - lastTick >= globalInterruptionPeriod) {\r\n        lastTick = current;\r\n        await delayNextTick();\r\n        // prevent calling delayNextTick every iteration of loop\r\n        // where delayNextTick takes up the majority or all of the\r\n        // globalInterruptionPeriod itself\r\n        lastTick = performance.now();\r\n    }\r\n    if (token.isCancellationRequested) {\r\n        throw OperationCancelled;\r\n    }\r\n}\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T = void> {\r\n    resolve: (value: T) => this;\r\n    reject: (err?: unknown) => this;\r\n\r\n    promise = new Promise<T>((resolve, reject) => {\r\n        this.resolve = (arg) => {\r\n            resolve(arg);\r\n            return this;\r\n        };\r\n        this.reject = (err) => {\r\n            reject(err);\r\n            return this;\r\n        };\r\n    });\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\r\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\r\n *  the overhead is very small, just a few kilobytes.\r\n * Everything else of that package (at the time contributing) is also defined\r\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\r\n */\r\nexport { TextDocument } from 'vscode-languageserver-textdocument';\r\n\r\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\r\nimport type { FileSystemProvider } from './file-system-provider.js';\r\nimport type { ParseResult, ParserOptions } from '../parser/langium-parser.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\r\nimport type { MultiMap } from '../utils/collections.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { TextDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\r\n * from the AST, e.g. the result of scope precomputation.\r\n */\r\nexport interface LangiumDocument<T extends AstNode = AstNode> {\r\n    /** The Uniform Resource Identifier (URI) of the document */\r\n    readonly uri: URI;\r\n    /** The text document used to convert between offsets and positions */\r\n    readonly textDocument: TextDocument;\r\n    /** The current state of the document */\r\n    state: DocumentState;\r\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\r\n    parseResult: ParseResult<T>;\r\n    /** Result of the scope precomputation phase */\r\n    precomputedScopes?: PrecomputedScopes;\r\n    /** An array of all cross-references found in the AST while linking */\r\n    references: Reference[];\r\n    /** Result of the validation phase */\r\n    diagnostics?: Diagnostic[]\r\n}\r\n\r\n/**\r\n * A document is subject to several phases that are run in predefined order. Any state value implies that\r\n * smaller state values are finished as well.\r\n */\r\nexport enum DocumentState {\r\n    /**\r\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\r\n     * document instance is no longer valid.\r\n     */\r\n    Changed = 0,\r\n    /**\r\n     * An AST has been created from the text content. The document structure can be traversed,\r\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\r\n     * at this stage as a preprocessing step.\r\n     */\r\n    Parsed = 1,\r\n    /**\r\n     * The `IndexManager` service has processed AST nodes of this document. This means the\r\n     * exported symbols are available in the global scope and can be resolved from other documents.\r\n     */\r\n    IndexedContent = 2,\r\n    /**\r\n     * The `ScopeComputation` service has processed this document. This means the local symbols\r\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\r\n     * Once a document has reached this state, you may follow every reference - it will lazily\r\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\r\n     * the target is not in scope.\r\n     */\r\n    ComputedScopes = 3,\r\n    /**\r\n     * The `Linker` service has processed this document. All outgoing references have been\r\n     * resolved or marked as erroneous.\r\n     */\r\n    Linked = 4,\r\n    /**\r\n     * The `IndexManager` service has processed AST node references of this document. This is\r\n     * necessary to determine which documents are affected by a change in one of the workspace\r\n     * documents.\r\n     */\r\n    IndexedReferences = 5,\r\n    /**\r\n     * The `DocumentValidator` service has processed this document. The language server listens\r\n     * to the results of this phase and sends diagnostics to the client.\r\n     */\r\n    Validated = 6\r\n}\r\n\r\n/**\r\n * Result of the scope precomputation phase (`ScopeComputation` service).\r\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\r\n */\r\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\r\n\r\nexport interface DocumentSegment {\r\n    readonly range: Range\r\n    readonly offset: number\r\n    readonly length: number\r\n    readonly end: number\r\n}\r\n\r\n/**\r\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\r\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\r\n */\r\nexport type TextDocumentProvider = {\r\n    get(uri: string | URI): TextDocument | undefined\r\n}\r\n\r\n/**\r\n * Shared service for creating `LangiumDocument` instances.\r\n *\r\n * Register a custom implementation if special (additional) behavior is required for your language(s).\r\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\r\n * specialize {@link update}, too!\r\n */\r\nexport interface LangiumDocumentFactory {\r\n    /**\r\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from an in-memory string.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from a model that has been constructed in memory.\r\n     */\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\r\n\r\n    /**\r\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\r\n     */\r\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Update the given document after changes in the corresponding textual representation.\r\n     * Method is called by the document builder after it has been requested to build an existing\r\n     * document and the document's state is {@link DocumentState.Changed}.\r\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\r\n     * and {@link fromString}.\r\n     */\r\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\r\n}\r\n\r\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n    }\r\n\r\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\r\n        const content = await this.fileSystemProvider.readFile(uri);\r\n        return this.createAsync<T>(uri, content, cancellationToken);\r\n    }\r\n\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        uri = uri ?? URI.parse(textDocument.uri);\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, textDocument, token);\r\n        } else {\r\n            return this.create<T>(uri, textDocument, token);\r\n        }\r\n    }\r\n\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, text, token);\r\n        } else {\r\n            return this.create<T>(uri, text, token);\r\n        }\r\n    }\r\n\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\r\n        return this.create<T>(uri, { $model: model });\r\n    }\r\n\r\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }, options?: ParserOptions): LangiumDocument<T> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = this.parse<T>(uri, content, options);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n\r\n        } else if ('$model' in content) {\r\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\r\n            return this.createLangiumDocument<T>(parseResult, uri);\r\n\r\n        } else {\r\n            const parseResult = this.parse<T>(uri, content.getText(), options);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n        } else {\r\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a LangiumDocument from a given parse result.\r\n     *\r\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\r\n     * should not be necessary because the main purpose of the TextDocument is to convert between\r\n     * text ranges and offsets, which is done solely in LSP request handling.\r\n     *\r\n     * With the introduction of {@link update} below this method is supposed to be mainly called\r\n     * during workspace initialization and on addition/recognition of new files, while changes in\r\n     * existing documents are processed via {@link update}.\r\n     */\r\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\r\n        let document: LangiumDocument<T>;\r\n        if (textDocument) {\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                textDocument\r\n            };\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                get textDocument() {\r\n                    return textDocumentGetter();\r\n                }\r\n            };\r\n        }\r\n        (parseResult.value as Mutable<AstNode>).$document = document;\r\n        return document;\r\n    }\r\n\r\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        // The CST full text property contains the original text that was used to create the AST.\r\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\r\n        const textDocument = this.textDocuments?.get(document.uri.toString());\r\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\r\n\r\n        if (textDocument) {\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    value: textDocument\r\n                }\r\n            );\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    get: textDocumentGetter\r\n                }\r\n            );\r\n        }\r\n\r\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\r\n        // Therefore, we only parse if the text has actually changed.\r\n        if (oldText !== text) {\r\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\r\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\r\n        }\r\n        document.state = DocumentState.Parsed;\r\n        return document;\r\n    }\r\n\r\n    protected parse<T extends AstNode>(uri: URI, text: string, options?: ParserOptions): ParseResult<T> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.LangiumParser.parse<T>(text, options);\r\n    }\r\n\r\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\r\n    }\r\n\r\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\r\n        const serviceRegistry = this.serviceRegistry;\r\n        let textDoc: TextDocument | undefined = undefined;\r\n        return () => {\r\n            return textDoc ??= TextDocument.create(\r\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Shared service for managing Langium documents.\r\n */\r\nexport interface LangiumDocuments {\r\n\r\n    /**\r\n     * A stream of all documents managed under this service.\r\n     */\r\n    readonly all: Stream<LangiumDocument>\r\n\r\n    /**\r\n     * Manage a new document under this service.\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    addDocument(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\r\n     */\r\n    getDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\r\n     * The new document will be added to the list of documents managed under this service.\r\n     */\r\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content asynchronously.\r\n     * The process can be interrupted with a cancellation token.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Returns `true` if a document with the given URI is managed under this service.\r\n     */\r\n    hasDocument(uri: URI): boolean;\r\n\r\n    /**\r\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\r\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\r\n     * be dropped to reduce memory footprint.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\r\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\r\n     * URI will create a new document instance.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    deleteDocument(uri: URI): LangiumDocument | undefined;\r\n}\r\n\r\nexport class DefaultLangiumDocuments implements LangiumDocuments {\r\n\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n\r\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get all(): Stream<LangiumDocument> {\r\n        return stream(this.documentMap.values());\r\n    }\r\n\r\n    addDocument(document: LangiumDocument): void {\r\n        const uriString = document.uri.toString();\r\n        if (this.documentMap.has(uriString)) {\r\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\r\n        }\r\n        this.documentMap.set(uriString, document);\r\n    }\r\n\r\n    getDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        return this.documentMap.get(uriString);\r\n    }\r\n\r\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\r\n        let document = this.getDocument(uri);\r\n        if (document) {\r\n            return document;\r\n        }\r\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\r\n        this.addDocument(document);\r\n        return document;\r\n    }\r\n\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\r\n        if (cancellationToken) {\r\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\r\n                this.addDocument(document);\r\n                return document;\r\n            });\r\n        } else {\r\n            const document = this.langiumDocumentFactory.fromString(text, uri);\r\n            this.addDocument(document);\r\n            return document;\r\n        }\r\n    }\r\n\r\n    hasDocument(uri: URI): boolean {\r\n        return this.documentMap.has(uri.toString());\r\n    }\r\n\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\r\n            linker.unlink(langiumDoc);\r\n            langiumDoc.state = DocumentState.Changed;\r\n            langiumDoc.precomputedScopes = undefined;\r\n            langiumDoc.diagnostics = undefined;\r\n        }\r\n        return langiumDoc;\r\n    }\r\n\r\n    deleteDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            langiumDoc.state = DocumentState.Changed;\r\n            this.documentMap.delete(uriString);\r\n        }\r\n        return langiumDoc;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\nimport type { ScopeProvider } from './scope-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\r\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { DocumentState } from '../workspace/documents.js';\r\n\r\n/**\r\n * Language-specific service for resolving cross-references in the AST.\r\n */\r\nexport interface Linker {\r\n\r\n    /**\r\n     * Links all cross-references within the specified document. The default implementation loads only target\r\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\r\n     * stored in the document's `references` property.\r\n     *\r\n     * @param document A LangiumDocument that shall be linked.\r\n     * @param cancelToken A token for cancelling the operation.\r\n     *\r\n     * @throws `OperationCancelled` if a cancellation event is detected\r\n     */\r\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Unlinks all references within the specified document and removes them from the list of `references`.\r\n     *\r\n     * @param document A LangiumDocument that shall be unlinked.\r\n     */\r\n    unlink(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Determines a candidate AST node description for linking the given reference.\r\n     *\r\n     * @param refInfo Information about the reference.\r\n     */\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\r\n\r\n    /**\r\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\r\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\r\n     * as well as the unique cross reference identifier.\r\n     *\r\n     * Default behavior:\r\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\r\n     *    first visit.\r\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\r\n     *    and further resolution attempts will *not* be performed.\r\n     *\r\n     * @param node The containing AST node\r\n     * @param property The AST node property being referenced\r\n     * @param refNode The corresponding CST node\r\n     * @param refText The cross reference text denoting the target AstNode\r\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\r\n     */\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\r\n\r\n}\r\n\r\nconst ref_resolving = Symbol('ref_resolving');\r\n\r\ninterface DefaultReference extends Reference {\r\n    _ref?: AstNode | LinkingError | typeof ref_resolving;\r\n    _nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport class DefaultLinker implements Linker {\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly scopeProvider: ScopeProvider;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly langiumDocuments: () => LangiumDocuments;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\r\n        this.scopeProvider = services.references.ScopeProvider;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const node of streamAst(document.parseResult.value)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\r\n        }\r\n    }\r\n\r\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\r\n        const ref = refInfo.reference as DefaultReference;\r\n        // The reference may already have been resolved lazily by accessing its `ref` property.\r\n        if (ref._ref === undefined) {\r\n            ref._ref = ref_resolving;\r\n            try {\r\n                const description = this.getCandidate(refInfo);\r\n                if (isLinkingError(description)) {\r\n                    ref._ref = description;\r\n                } else {\r\n                    ref._nodeDescription = description;\r\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\r\n                        // The target document is already loaded\r\n                        const linkedNode = this.loadAstNode(description);\r\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\r\n                    } else {\r\n                        // Try to load the target AST node later using the already provided description\r\n                        ref._ref = undefined;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\r\n                const errorMessage = (err as Error).message ?? String(err);\r\n                ref._ref = {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\r\n                };\r\n            }\r\n            // Add the reference to the document's array of references\r\n            // Only add if the reference has been not been resolved earlier\r\n            // Otherwise we end up with duplicates\r\n            // See also implementation of `buildReference`\r\n            document.references.push(ref);\r\n        }\r\n    }\r\n\r\n    unlink(document: LangiumDocument): void {\r\n        for (const ref of document.references) {\r\n            delete (ref as DefaultReference)._ref;\r\n            delete (ref as DefaultReference)._nodeDescription;\r\n        }\r\n        document.references = [];\r\n    }\r\n\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\r\n        const scope = this.scopeProvider.getScope(refInfo);\r\n        const description = scope.getElement(refInfo.reference.$refText);\r\n        return description ?? this.createLinkingError(refInfo);\r\n    }\r\n\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\r\n        // See behavior description in doc of Linker, update that on changes in here.\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const linker = this;\r\n        const reference: DefaultReference = {\r\n            $refNode: refNode,\r\n            $refText: refText,\r\n\r\n            get ref() {\r\n                if (isAstNode(this._ref)) {\r\n                    // Most frequent case: the target is already resolved.\r\n                    return this._ref;\r\n                } else if (isAstNodeDescription(this._nodeDescription)) {\r\n                    // A candidate has been found before, but it is not loaded yet.\r\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\r\n                    this._ref = linkedNode ??\r\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\r\n                } else if (this._ref === undefined) {\r\n                    // The reference has not been linked yet, so do that now.\r\n                    this._ref = ref_resolving;\r\n                    const document = findRootNode(node).$document;\r\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\r\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\r\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\r\n                        return this._ref = undefined;\r\n                    }\r\n                    this._ref = refData.node ?? refData.error;\r\n                    this._nodeDescription = refData.descr;\r\n                    document?.references.push(this);\r\n                } else if (this._ref === ref_resolving) {\r\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\r\n                }\r\n                return isAstNode(this._ref) ? this._ref : undefined;\r\n            },\r\n            get $nodeDescription() {\r\n                return this._nodeDescription;\r\n            },\r\n            get error() {\r\n                return isLinkingError(this._ref) ? this._ref : undefined;\r\n            }\r\n        };\r\n        return reference;\r\n    }\r\n\r\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\r\n        try {\r\n            const description = this.getCandidate(refInfo);\r\n            if (isLinkingError(description)) {\r\n                return { error: description };\r\n            }\r\n            const linkedNode = this.loadAstNode(description);\r\n            if (linkedNode) {\r\n                return { node: linkedNode, descr: description };\r\n            }\r\n            else {\r\n                return {\r\n                    descr: description,\r\n                    error:\r\n                        this.createLinkingError(refInfo, description)\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\r\n            const errorMessage = (err as Error).message ?? String(err);\r\n            return {\r\n                error: {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\r\n        if (nodeDescription.node) {\r\n            return nodeDescription.node;\r\n        }\r\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\r\n        if (!doc) {\r\n            return undefined;\r\n        }\r\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\r\n    }\r\n\r\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\r\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\r\n        // in the language implementation.\r\n        const document = findRootNode(refInfo.container).$document;\r\n        if (document && document.state < DocumentState.ComputedScopes) {\r\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\r\n        }\r\n        const referenceType = this.reflection.getReferenceType(refInfo);\r\n        return {\r\n            ...refInfo,\r\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\r\n            targetDescription\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI, Utils } from 'vscode-uri';\r\n\r\nexport { URI };\r\n\r\nexport namespace UriUtils {\r\n\r\n    export const basename = Utils.basename;\r\n    export const dirname = Utils.dirname;\r\n    export const extname = Utils.extname;\r\n    export const joinPath = Utils.joinPath;\r\n    export const resolvePath = Utils.resolvePath;\r\n\r\n    export function equals(a?: URI | string, b?: URI | string): boolean {\r\n        return a?.toString() === b?.toString();\r\n    }\r\n\r\n    export function relative(from: URI | string, to: URI | string): string {\r\n        const fromPath = typeof from === 'string' ? from : from.path;\r\n        const toPath = typeof to === 'string' ? to : to.path;\r\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\r\n        const toParts = toPath.split('/').filter(e => e.length > 0);\r\n        let i = 0;\r\n        for (; i < fromParts.length; i++) {\r\n            if (fromParts[i] !== toParts[i]) {\r\n                break;\r\n            }\r\n        }\r\n        const backPart = '../'.repeat(fromParts.length - i);\r\n        const toPart = toParts.slice(i).join('/');\r\n        return backPart + toPart;\r\n    }\r\n\r\n    export function normalize(uri: URI | string): string {\r\n        return URI.parse(uri.toString()).toString();\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { findAssignment } from '../utils/grammar-utils.js';\r\nimport { isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for finding references and declaration of a given `CstNode`.\r\n */\r\nexport interface References {\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\r\n\r\n    /**\r\n     * Finds all references to the target node as references (local references) or reference descriptions.\r\n     *\r\n     * @param targetNode Specified target node whose references should be returned\r\n     */\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\r\n}\r\n\r\nexport interface FindReferencesOptions {\r\n    /**\r\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\r\n     */\r\n    onlyLocal?: boolean;\r\n    /**\r\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\r\n     */\r\n    documentUri?: URI;\r\n    /**\r\n     * Whether the returned list of references should include the declaration.\r\n     */\r\n    includeDeclaration?: boolean;\r\n}\r\n\r\nexport class DefaultReferences implements References {\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly index: IndexManager;\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.index = services.shared.workspace.IndexManager;\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\r\n        if (sourceCstNode) {\r\n            const assignment = findAssignment(sourceCstNode);\r\n            const nodeElem = sourceCstNode.astNode;\r\n            if (assignment && nodeElem) {\r\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\r\n\r\n                if (isReference(reference)) {\r\n                    return reference.ref;\r\n                } else if (Array.isArray(reference)) {\r\n                    for (const ref of reference) {\r\n                        if (isReference(ref) && ref.$refNode\r\n                            && ref.$refNode.offset <= sourceCstNode.offset\r\n                            && ref.$refNode.end >= sourceCstNode.end) {\r\n                            return ref.ref;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nodeElem) {\r\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\r\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\r\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\r\n                    return nodeElem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\r\n        const astNode = this.findDeclaration(sourceCstNode);\r\n        if (astNode?.$cstNode) {\r\n            const targetNode = this.nameProvider.getNameNode(astNode);\r\n            return targetNode ?? astNode.$cstNode;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\r\n        const refs: ReferenceDescription[] = [];\r\n        if (options.includeDeclaration) {\r\n            const ref = this.getReferenceToSelf(targetNode);\r\n            if (ref) {\r\n                refs.push(ref);\r\n            }\r\n        }\r\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\r\n        if (options.documentUri) {\r\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\r\n        }\r\n        refs.push(...indexReferences);\r\n        return stream(refs);\r\n    }\r\n\r\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\r\n        const nameNode = this.nameProvider.getNameNode(targetNode);\r\n        if (nameNode) {\r\n            const doc = getDocument(targetNode);\r\n            const path = this.nodeLocator.getAstNodePath(targetNode);\r\n            return {\r\n                sourceUri: doc.uri,\r\n                sourcePath: path,\r\n                targetUri: doc.uri,\r\n                targetPath: path,\r\n                segment: toDocumentSegment(nameNode),\r\n                local: true\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Stream } from './stream.js';\r\nimport { Reduction, stream } from './stream.js';\r\n\r\n/**\r\n * A multimap is a variation of a Map that has potentially multiple values for every key.\r\n */\r\nexport class MultiMap<K, V> {\r\n\r\n    private map = new Map<K, V[]>();\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The total number of values in the multimap.\r\n     */\r\n    get size(): number {\r\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\r\n    }\r\n\r\n    /**\r\n     * Clear all entries in the multimap.\r\n     */\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\r\n     *  * Without a value, all values associated with the given key are deleted.\r\n     *\r\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\r\n     *     key / value does not exist.\r\n     */\r\n    delete(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.delete(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                const index = values.indexOf(value);\r\n                if (index >= 0) {\r\n                    if (values.length === 1) {\r\n                        this.map.delete(key);\r\n                    } else {\r\n                        values.splice(index, 1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all values associated with the given key. If no value exists,\r\n     * an empty array is returned.\r\n     *\r\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\r\n     * value and `delete` to remove a value from the multimap.\r\n     */\r\n    get(key: K): readonly V[] {\r\n        return this.map.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\r\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\r\n     */\r\n    has(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.has(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                return values.indexOf(value) >= 0;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given key / value pair to the multimap.\r\n     */\r\n    add(key: K, value: V): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(value);\r\n        } else {\r\n            this.map.set(key, [value]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the given set of key / value pairs to the multimap.\r\n     */\r\n    addAll(key: K, values: Iterable<V>): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(...values);\r\n        } else {\r\n            this.map.set(key, Array.from(values));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invokes the given callback function for every key / value pair in the multimap.\r\n     */\r\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\r\n        this.map.forEach((array, key) =>\r\n            array.forEach(value => callbackfn(value, key, this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator of key, value pairs for every entry in the map.\r\n     */\r\n    [Symbol.iterator](): Iterator<[K, V]> {\r\n        return this.entries().iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): Stream<[K, V]> {\r\n        return stream(this.map.entries())\r\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of keys in the map.\r\n     */\r\n    keys(): Stream<K> {\r\n        return stream(this.map.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of values in the map.\r\n     */\r\n    values(): Stream<V> {\r\n        return stream(this.map.values()).flat();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value set pairs for every key in the map.\r\n     */\r\n    entriesGroupedByKey(): Stream<[K, V[]]> {\r\n        return stream(this.map.entries());\r\n    }\r\n\r\n}\r\n\r\nexport class BiMap<K, V> {\r\n\r\n    private map = new Map<K, V>();\r\n    private inverse = new Map<V, K>();\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n        this.inverse.clear();\r\n    }\r\n\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        this.inverse.set(value, key);\r\n        return this;\r\n    }\r\n\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n\r\n    getKey(value: V): K | undefined {\r\n        return this.inverse.get(value);\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        const value = this.map.get(key);\r\n        if (value !== undefined) {\r\n            this.map.delete(key);\r\n            this.inverse.delete(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Language-specific service for precomputing global and local scopes. The service methods are executed\r\n * as the first and second phase in the `DocumentBuilder`.\r\n */\r\nexport interface ScopeComputation {\r\n\r\n    /**\r\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\r\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\r\n     * they can be referenced from other documents.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\r\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\r\n     * initial indexing where this method is used.\r\n     *\r\n     * @param document The document from which to gather exported AST nodes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\r\n\r\n    /**\r\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\r\n     * resolving references to symbols in the same document. The result is a multimap assigning a\r\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\r\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\r\n     * resolution depends on the scope computation phase to be completed.\r\n     *\r\n     * @param document The document in which to compute scopes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\r\n\r\n}\r\n\r\n/**\r\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\r\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\r\n * contained child nodes.\r\n *\r\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\r\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\r\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\r\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\r\n * are _invisible_ by default, but that can be changed by customizing this service.\r\n */\r\nexport class DefaultScopeComputation implements ScopeComputation {\r\n\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n    }\r\n\r\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\r\n     * The list of children to be considered is determined by the function parameter {@link children}.\r\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\r\n     *\r\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\r\n     * @param document The document containing the AST node to be exported.\r\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCancelled` if a user action occurs during execution.\r\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\r\n     */\r\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        const exports: AstNodeDescription[] = [];\r\n\r\n        this.exportNode(parentNode, exports, document);\r\n        for (const node of children(parentNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.exportNode(node, exports, document);\r\n        }\r\n        return exports;\r\n    }\r\n\r\n    /**\r\n     * Add a single node to the list of exports if it has a name. Override this method to change how\r\n     * symbols are exported, e.g. by modifying their exported name.\r\n     */\r\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\r\n        const name = this.nameProvider.getName(node);\r\n        if (name) {\r\n            exports.push(this.descriptions.createDescription(node, name, document));\r\n        }\r\n    }\r\n\r\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\r\n        const rootNode = document.parseResult.value;\r\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\r\n        // Here we navigate the full AST - local scopes shall be available in the whole document\r\n        for (const node of streamAllContents(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.processNode(node, document, scopes);\r\n        }\r\n        return scopes;\r\n    }\r\n\r\n    /**\r\n     * Process a single node during scopes computation. The default implementation makes the node visible\r\n     * in the subtree of its container (if the node has a name). Override this method to change this,\r\n     * e.g. by increasing the visibility to a higher level in the AST.\r\n     */\r\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\r\n        const container = node.$container;\r\n        if (container) {\r\n            const name = this.nameProvider.getName(node);\r\n            if (name) {\r\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNodeDescription } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\r\n\r\n/**\r\n * A scope describes what target elements are visible from a specific cross-reference context.\r\n */\r\nexport interface Scope {\r\n\r\n    /**\r\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\r\n     * If multiple matching elements are present, the selection of the returned element should be done\r\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\r\n     *\r\n     * @param name Name of the cross-reference target as it appears in the source text.\r\n     */\r\n    getElement(name: string): AstNodeDescription | undefined;\r\n\r\n    /**\r\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\r\n     * shown in the editor.\r\n     */\r\n    getAllElements(): Stream<AstNodeDescription>;\r\n\r\n}\r\n\r\nexport interface ScopeOptions {\r\n    caseInsensitive?: boolean;\r\n}\r\n\r\n/**\r\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\r\n * the next level of elements, which are queried when a target element is not found in the stream provided\r\n * to this scope.\r\n */\r\nexport class StreamScope implements Scope {\r\n    readonly elements: Stream<AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = elements;\r\n        this.outerScope = outerScope;\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        if (this.outerScope) {\r\n            return this.elements.concat(this.outerScope.getAllElements());\r\n        } else {\r\n            return this.elements;\r\n        }\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const local = this.caseInsensitive\r\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\r\n            : this.elements.find(e => e.name === name);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class MapScope implements Scope {\r\n    readonly elements: Map<string, AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = new Map();\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n        for (const element of elements) {\r\n            const name = this.caseInsensitive\r\n                ? element.name.toLowerCase()\r\n                : element.name;\r\n            this.elements.set(name, element);\r\n        }\r\n        this.outerScope = outerScope;\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\r\n        const local = this.elements.get(localName);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        let elementStream = stream(this.elements.values());\r\n        if (this.outerScope) {\r\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\r\n        }\r\n        return elementStream;\r\n    }\r\n\r\n}\r\n\r\nexport const EMPTY_SCOPE: Scope = {\r\n    getElement(): undefined {\r\n        return undefined;\r\n    },\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        return EMPTY_STREAM;\r\n    }\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Disposable } from './disposable.js';\r\nimport type { URI } from './uri-utils.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { DocumentState } from '../workspace/documents.js';\r\n\r\nexport abstract class DisposableCache implements Disposable {\r\n\r\n    protected toDispose: Disposable[] = [];\r\n    protected isDisposed = false;\r\n\r\n    onDispose(disposable: Disposable): void {\r\n        this.toDispose.push(disposable);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.throwIfDisposed();\r\n        this.clear();\r\n        this.isDisposed = true;\r\n        this.toDispose.forEach(disposable => disposable.dispose());\r\n    }\r\n\r\n    protected throwIfDisposed(): void {\r\n        if (this.isDisposed) {\r\n            throw new Error('This cache has already been disposed');\r\n        }\r\n    }\r\n\r\n    abstract clear(): void;\r\n}\r\n\r\nexport class SimpleCache<K, V> extends DisposableCache {\r\n    protected readonly cache = new Map<K, V>();\r\n\r\n    has(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    set(key: K, value: V): void {\r\n        this.throwIfDisposed();\r\n        this.cache.set(key, value);\r\n    }\r\n\r\n    get(key: K): V | undefined;\r\n    get(key: K, provider: () => V): V;\r\n    get(key: K, provider?: () => V): V | undefined {\r\n        this.throwIfDisposed();\r\n        if (this.cache.has(key)) {\r\n            return this.cache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            this.cache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.throwIfDisposed();\r\n        this.cache.clear();\r\n    }\r\n}\r\n\r\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\r\n\r\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\r\n    private readonly converter: (input: Context) => ContextKey | Context;\r\n\r\n    constructor(converter?: (input: Context) => ContextKey) {\r\n        super();\r\n        this.converter = converter ?? (value => value);\r\n    }\r\n\r\n    has(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).has(key);\r\n    }\r\n\r\n    set(contextKey: Context, key: Key, value: Value): void {\r\n        this.throwIfDisposed();\r\n        this.cacheForContext(contextKey).set(key, value);\r\n    }\r\n\r\n    get(contextKey: Context, key: Key): Value | undefined;\r\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\r\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\r\n        this.throwIfDisposed();\r\n        const contextCache = this.cacheForContext(contextKey);\r\n        if (contextCache.has(key)) {\r\n            return contextCache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            contextCache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).delete(key);\r\n    }\r\n\r\n    clear(): void;\r\n    clear(contextKey: Context): void;\r\n    clear(contextKey?: Context): void {\r\n        this.throwIfDisposed();\r\n        if (contextKey) {\r\n            const mapKey = this.converter(contextKey);\r\n            this.cache.delete(mapKey);\r\n        } else {\r\n            this.cache.clear();\r\n        }\r\n    }\r\n\r\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\r\n        const mapKey = this.converter(contextKey);\r\n        let documentCache = this.cache.get(mapKey);\r\n        if (!documentCache) {\r\n            documentCache = new Map();\r\n            this.cache.set(mapKey, documentCache);\r\n        }\r\n        return documentCache;\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to a document.\r\n * If this document is changed or deleted, all associated key/value pairs are deleted.\r\n */\r\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\r\n\r\n    /**\r\n     * Creates a new document cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     *\r\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\r\n     * which triggers on all documents that have been affected by this change, assuming that the\r\n     * state is `DocumentState.Linked` or a later state.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super(uri => uri.toString());\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\r\n                this.clear(document.uri.toString());\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                for (const uri of deleted) { // react only on deleted documents\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\r\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\r\n                for (const uri of allUris) {\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to the whole workspace.\r\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\r\n */\r\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\r\n\r\n    /**\r\n     * Creates a new workspace cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super();\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\r\n                this.clear();\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                if (deleted.length > 0) { // react only on deleted documents\r\n                    this.clear();\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => { // react on both changed and deleted documents\r\n                this.clear();\r\n            }));\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { Scope, ScopeOptions} from './scope.js';\r\nimport { MapScope, StreamScope } from './scope.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { WorkspaceCache } from '../utils/caching.js';\r\n\r\n/**\r\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\r\n */\r\nexport interface ScopeProvider {\r\n\r\n    /**\r\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\r\n     * identifier.\r\n     *\r\n     * @param context Information about the reference for which a scope is requested.\r\n     */\r\n    getScope(context: ReferenceInfo): Scope;\r\n\r\n}\r\n\r\nexport class DefaultScopeProvider implements ScopeProvider {\r\n\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n    protected readonly indexManager: IndexManager;\r\n\r\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\r\n    }\r\n\r\n    getScope(context: ReferenceInfo): Scope {\r\n        const scopes: Array<Stream<AstNodeDescription>> = [];\r\n        const referenceType = this.reflection.getReferenceType(context);\r\n\r\n        const precomputed = getDocument(context.container).precomputedScopes;\r\n        if (precomputed) {\r\n            let currentNode: AstNode | undefined = context.container;\r\n            do {\r\n                const allDescriptions = precomputed.get(currentNode);\r\n                if (allDescriptions.length > 0) {\r\n                    scopes.push(stream(allDescriptions).filter(\r\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\r\n                }\r\n                currentNode = currentNode.$container;\r\n            } while (currentNode);\r\n        }\r\n\r\n        let result: Scope = this.getGlobalScope(referenceType, context);\r\n        for (let i = scopes.length - 1; i >= 0; i--) {\r\n            result = this.createScope(scopes[i], result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST node descriptions.\r\n     */\r\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        return new StreamScope(stream(elements), outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\r\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\r\n     */\r\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        const s = stream(elements).map(e => {\r\n            const name = this.nameProvider.getName(e);\r\n            if (name) {\r\n                return this.descriptions.createDescription(e, name);\r\n            }\r\n            return undefined;\r\n        }).nonNullable();\r\n        return new StreamScope(s, outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a global scope filtered for the given reference type.\r\n     */\r\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\r\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI } from 'vscode-uri';\r\nimport type { CommentProvider } from '../documentation/comment-provider.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\n\r\nexport interface JsonSerializeOptions {\r\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\r\n    space?: string | number;\r\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\r\n    refText?: boolean;\r\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\r\n    sourceText?: boolean;\r\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\r\n    textRegions?: boolean;\r\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\r\n    comments?: boolean;\r\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\r\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\r\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: URI, reference: Reference) => string\r\n}\r\n\r\nexport interface JsonDeserializeOptions {\r\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: string) => URI\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\r\n */\r\nexport interface AstNodeWithTextRegion extends AstNode {\r\n    $sourceText?: string;\r\n    $textRegion?: AstNodeRegionWithAssignments;\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry a semantically relevant comment.\r\n */\r\nexport interface AstNodeWithComment extends AstNode {\r\n    $comment?: string;\r\n}\r\n\r\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\r\n    return typeof (node as AstNodeWithComment).$comment === 'string';\r\n}\r\n\r\n/**\r\n * A {@link DocumentSegment} representing the definition area of an AstNode within the DSL text.\r\n * Usually contains text region information on all assigned property values of the AstNode,\r\n * and may contain the defining file's URI as string.\r\n */\r\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\r\n    /**\r\n     * A record containing an entry for each assigned property of the AstNode.\r\n     * The key is equal to the property name and the value is an array of the property values'\r\n     * text regions, regardless of whether the property is a single value or list property.\r\n     */\r\n    assignments?: Record<string, DocumentSegment[]>;\r\n    /**\r\n     * The AstNode defining file's URI as string\r\n     */\r\n    documentURI?: string;\r\n}\r\n\r\n/**\r\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\r\n */\r\nexport interface JsonSerializer {\r\n    /**\r\n     * Serialize an `AstNode` into a JSON `string`.\r\n     * @param node The `AstNode` to be serialized.\r\n     * @param options Serialization options\r\n     */\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\r\n    /**\r\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\r\n     */\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\r\n}\r\n\r\n/**\r\n * A cross-reference in the serialized JSON representation of an AstNode.\r\n */\r\ninterface IntermediateReference {\r\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\r\n    $ref?: string\r\n    /** The actual text used to look up the reference target in the surrounding scope. */\r\n    $refText?: string\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    $error?: string\r\n}\r\n\r\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\r\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\r\n}\r\n\r\nexport class DefaultJsonSerializer implements JsonSerializer {\r\n\r\n    /** The set of AstNode properties to be ignored by the serializer. */\r\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\r\n\r\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\r\n    protected currentDocument: LangiumDocument | undefined;\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string {\r\n        const serializeOptions = options ?? {};\r\n        const specificReplacer = options?.replacer;\r\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, serializeOptions);\r\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\r\n\r\n        try {\r\n            this.currentDocument = getDocument(node);\r\n            return JSON.stringify(node, replacer, options?.space);\r\n        } finally {\r\n            this.currentDocument = undefined;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T {\r\n        const deserializeOptions = options ?? {};\r\n        const root = JSON.parse(content);\r\n        this.linkNode(root, root, deserializeOptions);\r\n        return root;\r\n    }\r\n\r\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\r\n        if (this.ignoreProperties.has(key)) {\r\n            return undefined;\r\n        } else if (isReference(value)) {\r\n            const refValue = value.ref;\r\n            const $refText = refText ? value.$refText : undefined;\r\n            if (refValue) {\r\n                const targetDocument = getDocument(refValue);\r\n                let targetUri = '';\r\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\r\n                    if (uriConverter) {\r\n                        targetUri = uriConverter(targetDocument.uri, value);\r\n                    } else {\r\n                        targetUri = targetDocument.uri.toString();\r\n                    }\r\n                }\r\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\r\n                return {\r\n                    $ref: `${targetUri}#${targetPath}`,\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            } else {\r\n                return {\r\n                    $error: value.error?.message ?? 'Could not resolve reference',\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            }\r\n        } else if (isAstNode(value)) {\r\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\r\n            if (textRegions) {\r\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\r\n                if ((!key || value.$document) && astNode?.$textRegion) {\r\n                    // The document URI is added to the root node of the resulting JSON tree\r\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\r\n                }\r\n            }\r\n            if (sourceText && !key) {\r\n                astNode ??= { ...value };\r\n                astNode.$sourceText = value.$cstNode?.text;\r\n            }\r\n            if (comments) {\r\n                astNode ??= { ...value };\r\n                const comment = this.commentProvider.getComment(value);\r\n                if (comment) {\r\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\r\n                }\r\n            }\r\n            return astNode ?? value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\r\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\r\n            offset: cstNode.offset,\r\n            end: cstNode.end,\r\n            length: cstNode.length,\r\n            range: cstNode.range,\r\n        };\r\n\r\n        if (node.$cstNode) {\r\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\r\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\r\n\r\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\r\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\r\n                if (propertyAssignments.length !== 0) {\r\n                    assignments[key] = propertyAssignments;\r\n                }\r\n            });\r\n\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\r\n        for (const [propertyName, item] of Object.entries(node)) {\r\n            if (Array.isArray(item)) {\r\n                for (let index = 0; index < item.length; index++) {\r\n                    const element = item[index];\r\n                    if (isIntermediateReference(element)) {\r\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\r\n                    } else if (isAstNode(element)) {\r\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\r\n                    }\r\n                }\r\n            } else if (isIntermediateReference(item)) {\r\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\r\n            } else if (isAstNode(item)) {\r\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\r\n            }\r\n        }\r\n        const mutable = node as Mutable<AstNode>;\r\n        mutable.$container = container;\r\n        mutable.$containerProperty = containerProperty;\r\n        mutable.$containerIndex = containerIndex;\r\n    }\r\n\r\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\r\n        let refText = reference.$refText;\r\n        let error = reference.$error;\r\n        if (reference.$ref) {\r\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\r\n            if (isAstNode(ref)) {\r\n                if (!refText) {\r\n                    refText = this.nameProvider.getName(ref);\r\n                }\r\n                return {\r\n                    $refText: refText ?? '',\r\n                    ref\r\n                };\r\n            } else {\r\n                error = ref;\r\n            }\r\n        }\r\n        if (error) {\r\n            const ref: Mutable<Reference> = {\r\n                $refText: refText ?? ''\r\n            };\r\n            ref.error = {\r\n                container,\r\n                property,\r\n                message: error,\r\n                reference: ref\r\n            };\r\n            return ref;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\r\n        try {\r\n            const fragmentIndex = uri.indexOf('#');\r\n            if (fragmentIndex === 0) {\r\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\r\n                if (!node) {\r\n                    return 'Could not resolve path: ' + uri;\r\n                }\r\n                return node;\r\n            }\r\n            if (fragmentIndex < 0) {\r\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\r\n                const document = this.langiumDocuments.getDocument(documentUri);\r\n                if (!document) {\r\n                    return 'Could not find document for URI: ' + uri;\r\n                }\r\n                return document.parseResult.value;\r\n            }\r\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\r\n            const document = this.langiumDocuments.getDocument(documentUri);\r\n            if (!document) {\r\n                return 'Could not find document for URI: ' + uri;\r\n            }\r\n            if (fragmentIndex === uri.length - 1) {\r\n                return document.parseResult.value;\r\n            }\r\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\r\n            if (!node) {\r\n                return 'Could not resolve URI: ' + uri;\r\n            }\r\n            return node;\r\n        } catch (err) {\r\n            return String(err);\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { TextDocumentProvider } from './workspace/documents.js';\r\nimport { UriUtils, type URI } from './utils/uri-utils.js';\r\n\r\n/**\r\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\r\n * These are resolved via the URI of a text document.\r\n */\r\nexport interface ServiceRegistry {\r\n\r\n    /**\r\n     * Register a language via its injected services.\r\n     */\r\n    register(language: LangiumCoreServices): void;\r\n\r\n    /**\r\n     * Retrieve the language-specific services for the given URI. In case only one language is\r\n     * registered, it may be used regardless of the URI format.\r\n     */\r\n    getServices(uri: URI): LangiumCoreServices;\r\n\r\n    /**\r\n     * Check whether services are available for the given URI.\r\n     */\r\n    hasServices(uri: URI): boolean;\r\n\r\n    /**\r\n     * The full set of registered language services.\r\n     */\r\n    readonly all: readonly LangiumCoreServices[];\r\n}\r\n\r\n/**\r\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\r\n */\r\nexport class DefaultServiceRegistry implements ServiceRegistry {\r\n\r\n    protected singleton?: LangiumCoreServices;\r\n    protected readonly languageIdMap = new Map<string, LangiumCoreServices>();\r\n    protected readonly fileExtensionMap = new Map<string, LangiumCoreServices>();\r\n\r\n    /**\r\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\r\n     */\r\n    protected get map(): Map<string, LangiumCoreServices> | undefined {\r\n        return this.fileExtensionMap;\r\n    }\r\n\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n\r\n    constructor(services?: LangiumSharedCoreServices) {\r\n        this.textDocuments = services?.workspace.TextDocuments;\r\n    }\r\n\r\n    register(language: LangiumCoreServices): void {\r\n        const data = language.LanguageMetaData;\r\n        for (const ext of data.fileExtensions) {\r\n            if (this.fileExtensionMap.has(ext)) {\r\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\r\n            }\r\n            this.fileExtensionMap.set(ext, language);\r\n        }\r\n        this.languageIdMap.set(data.languageId, language);\r\n        if (this.languageIdMap.size === 1) {\r\n            this.singleton = language;\r\n        } else {\r\n            this.singleton = undefined;\r\n        }\r\n    }\r\n\r\n    getServices(uri: URI): LangiumCoreServices {\r\n        if (this.singleton !== undefined) {\r\n            return this.singleton;\r\n        }\r\n        if (this.languageIdMap.size === 0) {\r\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\r\n        }\r\n        const languageId = this.textDocuments?.get(uri)?.languageId;\r\n        if (languageId !== undefined) {\r\n            const services = this.languageIdMap.get(languageId);\r\n            if (services) {\r\n                return services;\r\n            }\r\n        }\r\n        const ext = UriUtils.extname(uri);\r\n        const services = this.fileExtensionMap.get(ext);\r\n        if (!services) {\r\n            if (languageId) {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\r\n            } else {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\r\n            }\r\n        }\r\n        return services;\r\n    }\r\n\r\n    hasServices(uri: URI): boolean {\r\n        try {\r\n            this.getServices(uri);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get all(): readonly LangiumCoreServices[] {\r\n        return Array.from(this.languageIdMap.values());\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\r\nimport { assertUnreachable } from '../index.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport { isOperationCancelled } from '../utils/promise-utils.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\n\r\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\r\n    /** The AST node to which the diagnostic is attached. */\r\n    node: N;\r\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\r\n    property?: P;\r\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\r\n    keyword?: string;\r\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\r\n    index?: number;\r\n    /** If you want to create a diagnostic independent to any property, use the range property. */\r\n    range?: Range;\r\n    /** The diagnostic's code, which usually appear in the user interface. */\r\n    code?: integer | string;\r\n    /** An optional property to describe the error code. */\r\n    codeDescription?: CodeDescription;\r\n    /** Additional metadata about the diagnostic. */\r\n    tags?: DiagnosticTag[];\r\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\r\n    relatedInformation?: DiagnosticRelatedInformation[];\r\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\r\n    data?: unknown;\r\n}\r\n\r\n/**\r\n * Shape of information commonly used in the `data` field of diagnostics.\r\n */\r\nexport interface DiagnosticData {\r\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\r\n    code: string\r\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\r\n    actionSegment?: DocumentSegment\r\n    /** Specifies where to apply the code action in the form of a `Range`. */\r\n    actionRange?: Range\r\n}\r\n\r\n/**\r\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\r\n */\r\nexport function diagnosticData(code: string): DiagnosticData {\r\n    return { code };\r\n}\r\n\r\nexport type ValidationSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport type ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => void\r\n\r\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for describing functions which will be called once before or after all the AstNodes of an AST/Langium document are validated.\r\n *\r\n * The AST is represented by its root AstNode.\r\n *\r\n * The given validation acceptor helps to report some early or lately detected issues.\r\n *\r\n * The 'categories' indicate, which validation categories are executed for all the AstNodes.\r\n * This helps to tailor the preparations/tear-down logic to the actually executed checks on the nodes.\r\n *\r\n * It is recommended to support interrupts during long-running logic with 'interruptAndCheck(cancelToken)'.\r\n */\r\nexport type ValidationPreparation = (rootNode: AstNode, accept: ValidationAcceptor, categories: ValidationCategory[], cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\r\n *\r\n * ```ts\r\n *   const checks: ValidationChecks<StatemachineAstType> = {\r\n *       State: validator.checkStateNameStartsWithCapital\r\n *    };\r\n * ```\r\n *\r\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\r\n *\r\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\r\n */\r\nexport type ValidationChecks<T> = {\r\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\r\n} & {\r\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\r\n}\r\n\r\n/**\r\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\r\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\r\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\r\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\r\n * or with an explicit command, etc.\r\n *\r\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\r\n * for custom validation checks.\r\n */\r\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\r\n\r\nexport namespace ValidationCategory {\r\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\r\n}\r\n\r\ntype ValidationCheckEntry = {\r\n    check: ValidationCheck\r\n    category: ValidationCategory\r\n}\r\n\r\n/**\r\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\r\n */\r\nexport class ValidationRegistry {\r\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\r\n    private readonly reflection: AstReflection;\r\n\r\n    private entriesBefore: ValidationPreparation[] = [];\r\n    private entriesAfter: ValidationPreparation[] = [];\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n    }\r\n\r\n    /**\r\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\r\n     * or an array of validation checks.\r\n     *\r\n     * @param checksRecord Set of validation checks to register.\r\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\r\n        if (category === 'built-in') {\r\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\r\n        }\r\n        for (const [type, ch] of Object.entries(checksRecord)) {\r\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\r\n            if (Array.isArray(callbacks)) {\r\n                for (const check of callbacks) {\r\n                    const entry: ValidationCheckEntry = {\r\n                        check: this.wrapValidationException(check, thisObj),\r\n                        category\r\n                    };\r\n                    this.addEntry(type, entry);\r\n                }\r\n            } else if (typeof callbacks === 'function') {\r\n                const entry: ValidationCheckEntry = {\r\n                    check: this.wrapValidationException(callbacks, thisObj),\r\n                    category\r\n                };\r\n                this.addEntry(type, entry);\r\n            } else {\r\n                assertUnreachable(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\r\n        return async (node, accept, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\r\n        };\r\n    }\r\n\r\n    protected async handleException(functionality: () => MaybePromise<void>, messageContext: string, accept: ValidationAcceptor, node: AstNode): Promise<void> {\r\n        try {\r\n            await functionality();\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error(`${messageContext}:`, err);\r\n            if (err instanceof Error && err.stack) {\r\n                console.error(err.stack);\r\n            }\r\n            const messageDetails = err instanceof Error ? err.message : String(err);\r\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\r\n        }\r\n    }\r\n\r\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\r\n        if (type === 'AstNode') {\r\n            this.entries.add('AstNode', entry);\r\n            return;\r\n        }\r\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\r\n            this.entries.add(subtype, entry);\r\n        }\r\n    }\r\n\r\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\r\n        let checks = stream(this.entries.get(type))\r\n            .concat(this.entries.get('AstNode'));\r\n        if (categories) {\r\n            checks = checks.filter(entry => categories.includes(entry.category));\r\n        }\r\n        return checks.map(entry => entry.check);\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\r\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map for mapping names to nodes could be established.\r\n     * During the usual checks on the nodes, they are put into this map with their name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerBeforeDocument(checkBefore: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\r\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map with all the collected nodes and their names is checked\r\n     * and validation hints are created for all nodes with the same name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerAfterDocument(checkAfter: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\r\n    }\r\n\r\n    protected wrapPreparationException(check: ValidationPreparation, messageContext: string, thisObj: unknown): ValidationPreparation {\r\n        return async (rootNode, accept, categories, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\r\n        };\r\n    }\r\n\r\n    get checksBefore(): ValidationPreparation[] {\r\n        return this.entriesBefore;\r\n    }\r\n\r\n    get checksAfter(): ValidationPreparation[] {\r\n        return this.entriesAfter;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { MismatchedTokenException } from 'chevrotain';\r\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\r\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry, ValidationSeverity } from './validation-registry.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { diagnosticData } from './validation-registry.js';\r\nimport type { LexingDiagnostic, LexingDiagnosticSeverity } from '../parser/token-builder.js';\r\n\r\nexport interface ValidationOptions {\r\n    /**\r\n     * If this is set, only the checks associated with these categories are executed; otherwise\r\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\r\n     */\r\n    categories?: ValidationCategory[];\r\n    /** If true, no further diagnostics are reported if there are lexing errors. */\r\n    stopAfterLexingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are parsing errors. */\r\n    stopAfterParsingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are linking errors. */\r\n    stopAfterLinkingErrors?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service for validating `LangiumDocument`s.\r\n */\r\nexport interface DocumentValidator {\r\n    /**\r\n     * Validates the whole specified document.\r\n     *\r\n     * @param document specified document to validate\r\n     * @param options options to control the validation process\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\r\n}\r\n\r\nexport class DefaultDocumentValidator implements DocumentValidator {\r\n\r\n    protected readonly validationRegistry: ValidationRegistry;\r\n    protected readonly metadata: LanguageMetaData;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.validationRegistry = services.validation.ValidationRegistry;\r\n        this.metadata = services.LanguageMetaData;\r\n    }\r\n\r\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const parseResult = document.parseResult;\r\n        const diagnostics: Diagnostic[] = [];\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        if (!options.categories || options.categories.includes('built-in')) {\r\n            this.processLexingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processParsingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processLinkingErrors(document, diagnostics, options);\r\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\r\n                return diagnostics;\r\n            }\r\n        }\r\n\r\n        // Process custom validations\r\n        try {\r\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error('An error occurred during validation:', err);\r\n        }\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        return diagnostics;\r\n    }\r\n\r\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...parseResult.lexerReport?.diagnostics ?? []] as LexingDiagnostic[];\r\n        for (const lexerDiagnostic of lexerDiagnostics) {\r\n            const severity = lexerDiagnostic.severity ?? 'error';\r\n            const diagnostic: Diagnostic = {\r\n                severity: toDiagnosticSeverity(severity),\r\n                range: {\r\n                    start: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! - 1\r\n                    },\r\n                    end: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! + lexerDiagnostic.length - 1\r\n                    }\r\n                },\r\n                message: lexerDiagnostic.message,\r\n                data: toDiagnosticData(severity),\r\n                source: this.getSource()\r\n            };\r\n            diagnostics.push(diagnostic);\r\n        }\r\n    }\r\n\r\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const parserError of parseResult.parserErrors) {\r\n            let range: Range | undefined = undefined;\r\n            // We can run into the chevrotain error recovery here\r\n            // The token contained in the parser error might be automatically inserted\r\n            // In this case every position value will be `NaN`\r\n            if (isNaN(parserError.token.startOffset)) {\r\n                // Some special parser error types contain a `previousToken`\r\n                // We can simply append our diagnostic to that token\r\n                if ('previousToken' in parserError) {\r\n                    const token = (parserError as MismatchedTokenException).previousToken;\r\n                    if (!isNaN(token.startOffset)) {\r\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\r\n                        range = { start: position, end: position};\r\n                    } else {\r\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\r\n                        // Point to document start\r\n                        const position: Position = { line: 0, character: 0 };\r\n                        range = { start: position, end: position};\r\n                    }\r\n                }\r\n            } else {\r\n                range = tokenToRange(parserError.token);\r\n            }\r\n            if (range) {\r\n                const diagnostic: Diagnostic = {\r\n                    severity: toDiagnosticSeverity('error'),\r\n                    range,\r\n                    message: parserError.message,\r\n                    data: diagnosticData(DocumentValidator.ParsingError),\r\n                    source: this.getSource()\r\n                };\r\n                diagnostics.push(diagnostic);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const reference of document.references) {\r\n            const linkingError = reference.error;\r\n            if (linkingError) {\r\n                const info: DiagnosticInfo<AstNode, string> = {\r\n                    node: linkingError.container,\r\n                    property: linkingError.property,\r\n                    index: linkingError.index,\r\n                    data: {\r\n                        code: DocumentValidator.LinkingError,\r\n                        containerType: linkingError.container.$type,\r\n                        property: linkingError.property,\r\n                        refText: linkingError.reference.$refText\r\n                    } satisfies LinkingErrorData\r\n                };\r\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const validationItems: Diagnostic[] = [];\r\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => {\r\n            validationItems.push(this.toDiagnostic(severity, message, info));\r\n        };\r\n\r\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\r\n\r\n        return validationItems;\r\n    }\r\n\r\n    protected async validateAstBefore(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksBefore = this.validationRegistry.checksBefore;\r\n        for (const checkBefore of checksBefore) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkBefore(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected async validateAstNodes(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        await Promise.all(streamAst(rootNode).map(async node => {\r\n            await interruptAndCheck(cancelToken);\r\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\r\n            for (const check of checks) {\r\n                await check(node, acceptor, cancelToken);\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected async validateAstAfter(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksAfter = this.validationRegistry.checksAfter;\r\n        for (const checkAfter of checksAfter) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkAfter(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected toDiagnostic<N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N, string>): Diagnostic {\r\n        return {\r\n            message,\r\n            range: getDiagnosticRange(info),\r\n            severity: toDiagnosticSeverity(severity),\r\n            code: info.code,\r\n            codeDescription: info.codeDescription,\r\n            tags: info.tags,\r\n            relatedInformation: info.relatedInformation,\r\n            data: info.data,\r\n            source: this.getSource()\r\n        };\r\n    }\r\n\r\n    protected getSource(): string | undefined {\r\n        return this.metadata.languageId;\r\n    }\r\n}\r\n\r\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\r\n    if (info.range) {\r\n        return info.range;\r\n    }\r\n    let cstNode: CstNode | undefined;\r\n    if (typeof info.property === 'string') {\r\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\r\n    } else if (typeof info.keyword === 'string') {\r\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\r\n    }\r\n    cstNode ??= info.node.$cstNode;\r\n    if (!cstNode) {\r\n        return {\r\n            start: { line: 0, character: 0 },\r\n            end: { line: 0, character: 0 }\r\n        };\r\n    }\r\n    return cstNode.range;\r\n}\r\n\r\n/**\r\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\r\n *\r\n * @param severity The lexing diagnostic severity\r\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\r\n */\r\nexport function toDiagnosticSeverity(severity: LexingDiagnosticSeverity): DiagnosticSeverity {\r\n    switch (severity) {\r\n        case 'error':\r\n            return 1 satisfies typeof DiagnosticSeverity.Error;\r\n        case 'warning':\r\n            return 2 satisfies typeof DiagnosticSeverity.Warning;\r\n        case 'info':\r\n            return 3 satisfies typeof DiagnosticSeverity.Information;\r\n        case 'hint':\r\n            return 4 satisfies typeof DiagnosticSeverity.Hint;\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport function toDiagnosticData(severity: LexingDiagnosticSeverity): DiagnosticData {\r\n    switch (severity) {\r\n        case 'error':\r\n            return diagnosticData(DocumentValidator.LexingError);\r\n        case 'warning':\r\n            return diagnosticData(DocumentValidator.LexingWarning);\r\n        case 'info':\r\n            return diagnosticData(DocumentValidator.LexingInfo);\r\n        case 'hint':\r\n            return diagnosticData(DocumentValidator.LexingHint);\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport namespace DocumentValidator {\r\n    export const LexingError = 'lexing-error';\r\n    export const LexingWarning = 'lexing-warning';\r\n    export const LexingInfo = 'lexing-info';\r\n    export const LexingHint = 'lexing-hint';\r\n    export const ParsingError = 'parsing-error';\r\n    export const LinkingError = 'linking-error';\r\n}\r\n\r\nexport interface LinkingErrorData extends DiagnosticData {\r\n    containerType: string\r\n    property: string\r\n    refText: string\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from './ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isLinkingError } from '../syntax-tree.js';\r\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\r\n */\r\nexport interface AstNodeDescriptionProvider {\r\n\r\n    /**\r\n     * Create a description for the given AST node. This service method is typically used while indexing\r\n     * the contents of a document and during scope computation.\r\n     *\r\n     * @param node An AST node.\r\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\r\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\r\n     *     of your language.\r\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\r\n     */\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\r\n\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n    }\r\n\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription {\r\n        const doc = document ?? getDocument(node);\r\n        name ??= this.nameProvider.getName(node);\r\n        const path = this.astNodeLocator.getAstNodePath(node);\r\n        if (!name) {\r\n            throw new Error(`Node at path ${path} has no name.`);\r\n        }\r\n        let nameNodeSegment: DocumentSegment | undefined;\r\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\r\n        return {\r\n            node,\r\n            name,\r\n            get nameSegment() {\r\n                return nameSegmentGetter();\r\n            },\r\n            selectionSegment: toDocumentSegment(node.$cstNode),\r\n            type: node.$type,\r\n            documentUri: doc.uri,\r\n            path\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a cross-reference within a document or between two documents.\r\n */\r\nexport interface ReferenceDescription {\r\n    /** URI of the document that holds a reference */\r\n    sourceUri: URI\r\n    /** Path to AstNode that holds a reference */\r\n    sourcePath: string\r\n    /** Target document uri */\r\n    targetUri: URI\r\n    /** Path to the target AstNode inside the document */\r\n    targetPath: string\r\n    /** Segment of the reference text. */\r\n    segment: DocumentSegment\r\n    /** Marks a local reference i.e. a cross reference inside a document.   */\r\n    local?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\r\n * to determine which documents are affected and should be rebuilt when a document is changed.\r\n */\r\nexport interface ReferenceDescriptionProvider {\r\n    /**\r\n     * Create descriptions of all cross-references found in the given document. These descriptions are\r\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\r\n     * a document change is reported by the client.\r\n     *\r\n     * @param document The document in which to gather cross-references.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\r\n}\r\n\r\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\r\n\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\r\n        const descr: ReferenceDescription[] = [];\r\n        const rootNode = document.parseResult.value;\r\n        for (const astNode of streamAst(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\r\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\r\n                const description = this.createDescription(refInfo);\r\n                if (description) {\r\n                    descr.push(description);\r\n                }\r\n            });\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\r\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\r\n        const refCstNode = refInfo.reference.$refNode;\r\n        if (!targetNodeDescr || !refCstNode) {\r\n            return undefined;\r\n        }\r\n        const docUri = getDocument(refInfo.container).uri;\r\n        return {\r\n            sourceUri: docUri,\r\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\r\n            targetUri: targetNodeDescr.documentUri,\r\n            targetPath: targetNodeDescr.path,\r\n            segment: toDocumentSegment(refCstNode),\r\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode } from '../syntax-tree.js';\r\n\r\n/**\r\n * Language-specific service for locating an `AstNode` in a document.\r\n */\r\nexport interface AstNodeLocator {\r\n\r\n    /**\r\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\r\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\r\n     *\r\n     * @param node The `AstNode` for which to create the path.\r\n     * @returns a path represented by a `string` that identifies `node` inside its document.\r\n     * @see AstNodeLocator.getAstNode\r\n     */\r\n    getAstNodePath(node: AstNode): string;\r\n\r\n    /**\r\n     * Locates an `AstNode` inside another node by following the given path.\r\n     *\r\n     * @param node Parent element.\r\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\r\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\r\n     * @see AstNodeLocator.getAstNodePath\r\n     */\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeLocator implements AstNodeLocator {\r\n    protected segmentSeparator = '/';\r\n    protected indexSeparator = '@';\r\n\r\n    getAstNodePath(node: AstNode): string {\r\n        if (node.$container) {\r\n            const containerPath = this.getAstNodePath(node.$container);\r\n            const newSegment = this.getPathSegment(node);\r\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\r\n            return nodePath;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\r\n        if (!$containerProperty) {\r\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\r\n        }\r\n        if ($containerIndex !== undefined) {\r\n            return $containerProperty + this.indexSeparator + $containerIndex;\r\n        }\r\n        return $containerProperty;\r\n    }\r\n\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\r\n        const segments = path.split(this.segmentSeparator);\r\n        return segments.reduce((previousValue, currentValue) => {\r\n            if (!previousValue || currentValue.length === 0) {\r\n                return previousValue;\r\n            }\r\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\r\n            if (propertyIndex > 0) {\r\n                const property = currentValue.substring(0, propertyIndex);\r\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\r\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\r\n                return array?.[arrayIndex];\r\n            }\r\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\r\n        }, node) as T;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\nexport interface AsyncDisposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport namespace Disposable {\r\n    export function create(callback: () => Promise<void>): AsyncDisposable;\r\n    export function create(callback: () => void): Disposable;\r\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\r\n        return {\r\n            dispose: async () => await callback()\r\n        };\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Emitter } from '../utils/event.js';\r\nimport type {\r\n    ConfigurationItem,\r\n    DidChangeConfigurationParams,\r\n    DidChangeConfigurationRegistrationOptions,\r\n    Disposable,\r\n    Event,\r\n    InitializeParams,\r\n    InitializedParams\r\n} from 'vscode-languageserver-protocol';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { Deferred } from '../utils/promise-utils.js';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nexport interface ConfigurationProvider {\r\n\r\n    /**\r\n     * A promise that resolves when the configuration provider is ready to be used.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Returns a configuration value stored for the given language.\r\n     *\r\n     * @param language The language id\r\n     * @param configuration Configuration name\r\n     */\r\n    getConfiguration(language: string, configuration: string): Promise<any>;\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void;\r\n\r\n    /**\r\n     * Get notified after a configuration section has been updated.\r\n     */\r\n    onConfigurationSectionUpdate(callback: ConfigurationSectionUpdateListener): Disposable\r\n}\r\n\r\nexport interface ConfigurationInitializedParams extends InitializedParams {\r\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\r\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\r\n}\r\n\r\nexport interface ConfigurationSectionUpdate {\r\n    /**\r\n     * The name of the configuration section that has been updated.\r\n     */\r\n    section: string;\r\n\r\n    /**\r\n     * The updated configuration section.\r\n     */\r\n    configuration: any;\r\n}\r\n\r\nexport type ConfigurationSectionUpdateListener = (update: ConfigurationSectionUpdate) => void;\r\n\r\n/**\r\n * Base configuration provider for building up other configuration providers\r\n */\r\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected settings: Record<string, Record<string, any>> = {};\r\n    protected workspaceConfig = false;\r\n    protected onConfigurationSectionUpdateEmitter = new Emitter<ConfigurationSectionUpdate>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\r\n    }\r\n\r\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\r\n        if (this.workspaceConfig) {\r\n            if (params.register) {\r\n                // params.register(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n\r\n                const languages = this.serviceRegistry.all;\r\n                params.register({\r\n                    // Listen to configuration changes for all languages\r\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\r\n                });\r\n            }\r\n\r\n            if (params.fetchConfiguration) {\r\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\r\n                    // Fetch the configuration changes for all languages\r\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\r\n                });\r\n\r\n                // get workspace configurations (default scope URI)\r\n                const configs = await params.fetchConfiguration(configToUpdate);\r\n                configToUpdate.forEach((conf, idx) => {\r\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\r\n                });\r\n            }\r\n        }\r\n        this._ready.resolve();\r\n    }\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void {\r\n        if (!change.settings) {\r\n            return;\r\n        }\r\n        Object.keys(change.settings).forEach(section => {\r\n            const configuration = change.settings[section];\r\n            this.updateSectionConfiguration(section, configuration);\r\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\r\n        });\r\n    }\r\n\r\n    protected updateSectionConfiguration(section: string, configuration: any): void {\r\n        this.settings[section] = configuration;\r\n    }\r\n\r\n    /**\r\n    * Returns a configuration value stored for the given language.\r\n    *\r\n    * @param language The language id\r\n    * @param configuration Configuration name\r\n    */\r\n    async getConfiguration(language: string, configuration: string): Promise<any> {\r\n        await this.ready;\r\n\r\n        const sectionName = this.toSectionName(language);\r\n        if (this.settings[sectionName]) {\r\n            return this.settings[sectionName][configuration];\r\n        }\r\n    }\r\n\r\n    protected toSectionName(languageId: string): string {\r\n        return `${languageId}`;\r\n    }\r\n\r\n    get onConfigurationSectionUpdate(): Event<ConfigurationSectionUpdate> {\r\n        return this.onConfigurationSectionUpdateEmitter.event;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Disposable } from '../utils/disposable.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport type { Deferred } from '../utils/promise-utils.js';\r\nimport type { ValidationOptions } from '../validation/document-validator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory, TextDocumentProvider } from './documents.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { ValidationCategory } from '../validation/validation-registry.js';\r\nimport { DocumentState } from './documents.js';\r\n\r\nexport interface BuildOptions {\r\n    /**\r\n     * Control the validation phase with this option:\r\n     *  - `true` enables all validation checks and forces revalidating the documents\r\n     *  - `false` or `undefined` disables all validation checks\r\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\r\n     */\r\n    validation?: boolean | ValidationOptions\r\n}\r\n\r\nexport interface DocumentBuildState {\r\n    /** Whether a document has completed its last build process. */\r\n    completed: boolean\r\n    /** The options used for the last build process. */\r\n    options: BuildOptions\r\n    /** Additional information about the last build result. */\r\n    result?: {\r\n        validationChecks?: ValidationCategory[]\r\n    }\r\n}\r\n\r\n/**\r\n * Shared-service for building and updating `LangiumDocument`s.\r\n */\r\nexport interface DocumentBuilder {\r\n\r\n    /** The options used for rebuilding documents after an update. */\r\n    updateBuildOptions: BuildOptions;\r\n\r\n    /**\r\n     * Execute all necessary build steps for the given documents.\r\n     *\r\n     * @param documents Set of documents to be built.\r\n     * @param options Options for the document builder.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * This method is called when a document change is detected. It updates the state of all\r\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\r\n     *\r\n     * @param changed URIs of changed or created documents\r\n     * @param deleted URIs of deleted documents\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCancelled` if cancellation is detected during execution\r\n     */\r\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Notify the given callback when a document update was triggered, but before any document\r\n     * is rebuilt. Listeners to this event should not perform any long-running task.\r\n     */\r\n    onUpdate(callback: DocumentUpdateListener): Disposable;\r\n\r\n    /**\r\n     * Notify the given callback when a set of documents has been built reaching the specified target state.\r\n     */\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\r\n\r\n    /**\r\n     * Notify the specified callback when a document has been built reaching the specified target state.\r\n     * Unlike {@link onBuildPhase} the listener is called for every single document.\r\n     *\r\n     * There are two main advantages compared to {@link onBuildPhase}:\r\n     * 1. If the build is cancelled, {@link onDocumentPhase} will still fire for documents that have reached a specific state.\r\n     *    Meanwhile, {@link onBuildPhase} won't fire for that state.\r\n     * 2. The {@link DocumentBuilder} ensures that all {@link DocumentPhaseListener} instances are called for a built document.\r\n     *    Even if the build is cancelled before those listeners were called.\r\n     */\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable;\r\n\r\n    /**\r\n     * Wait until the workspace has reached the specified state for all documents.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Wait until the document specified by the {@link uri} has reached the specified state.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\r\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\r\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n}\r\n\r\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\r\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\r\nexport type DocumentPhaseListener = (built: LangiumDocument, cancelToken: CancellationToken) => void | Promise<void>\r\nexport class DefaultDocumentBuilder implements DocumentBuilder {\r\n\r\n    updateBuildOptions: BuildOptions = {\r\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\r\n        validation: {\r\n            categories: ['built-in', 'fast']\r\n        }\r\n    };\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly textDocuments: TextDocumentProvider | undefined;\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\r\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\r\n    protected readonly documentPhaseListeners = new MultiMap<DocumentState, DocumentPhaseListener>();\r\n    protected readonly buildState = new Map<string, DocumentBuildState>();\r\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\r\n    protected currentState = DocumentState.Changed;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.indexManager = services.workspace.IndexManager;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const document of documents) {\r\n            const key = document.uri.toString();\r\n            if (document.state === DocumentState.Validated) {\r\n                if (typeof options.validation === 'boolean' && options.validation) {\r\n                    // Force re-running all validation checks\r\n                    document.state = DocumentState.IndexedReferences;\r\n                    document.diagnostics = undefined;\r\n                    this.buildState.delete(key);\r\n                } else if (typeof options.validation === 'object') {\r\n                    const buildState = this.buildState.get(key);\r\n                    const previousCategories = buildState?.result?.validationChecks;\r\n                    if (previousCategories) {\r\n                        // Validation with explicit options was requested for a document that has already been partly validated.\r\n                        // In this case, we need to merge the previous validation categories with the new ones.\r\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\r\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\r\n                        if (categories.length > 0) {\r\n                            this.buildState.set(key, {\r\n                                completed: false,\r\n                                options: {\r\n                                    validation: {\r\n                                        ...options.validation,\r\n                                        categories\r\n                                    }\r\n                                },\r\n                                result: buildState.result\r\n                            });\r\n                            document.state = DocumentState.IndexedReferences;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Default: forget any previous build options\r\n                this.buildState.delete(key);\r\n            }\r\n        }\r\n        this.currentState = DocumentState.Changed;\r\n        await this.emitUpdate(documents.map(e => e.uri), []);\r\n        await this.buildDocuments(documents, options, cancelToken);\r\n    }\r\n\r\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\r\n        this.currentState = DocumentState.Changed;\r\n        // Remove all metadata of documents that are reported as deleted\r\n        for (const deletedUri of deleted) {\r\n            this.langiumDocuments.deleteDocument(deletedUri);\r\n            this.buildState.delete(deletedUri.toString());\r\n            this.indexManager.remove(deletedUri);\r\n        }\r\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\r\n        for (const changedUri of changed) {\r\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\r\n            if (!invalidated) {\r\n                // We create an unparsed, invalid document.\r\n                // This will be parsed as soon as we reach the first document builder phase.\r\n                // This allows to cancel the parsing process later in case we need it.\r\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\r\n                newDocument.state = DocumentState.Changed;\r\n                this.langiumDocuments.addDocument(newDocument);\r\n            }\r\n            this.buildState.delete(changedUri.toString());\r\n        }\r\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\r\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\r\n        this.langiumDocuments.all\r\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\r\n            .forEach(doc => {\r\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n                linker.unlink(doc);\r\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\r\n                doc.diagnostics = undefined;\r\n            });\r\n        // Notify listeners of the update\r\n        await this.emitUpdate(changed, deleted);\r\n        // Only allow interrupting the execution after all state changes are done\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        // Collect and sort all documents that we should rebuild\r\n        const rebuildDocuments = this.sortDocuments(\r\n            this.langiumDocuments.all\r\n                .filter(doc =>\r\n                    // This includes those that were reported as changed and those that we selected for relinking\r\n                    doc.state < DocumentState.Linked\r\n                    // This includes those for which a previous build has been cancelled\r\n                    || !this.buildState.get(doc.uri.toString())?.completed\r\n                )\r\n                .toArray()\r\n        );\r\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\r\n    }\r\n\r\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\r\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\r\n    }\r\n\r\n    /**\r\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\r\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\r\n     *\r\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\r\n     * in files that are currently not opened in the editor.\r\n     */\r\n    protected sortDocuments(documents: LangiumDocument[]): LangiumDocument[] {\r\n        let left = 0;\r\n        let right = documents.length - 1;\r\n\r\n        while (left < right) {\r\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\r\n                left++;\r\n            }\r\n\r\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\r\n                right--;\r\n            }\r\n\r\n            if (left < right) {\r\n                [documents[left], documents[right]] = [documents[right], documents[left]];\r\n            }\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    private hasTextDocument(doc: LangiumDocument): boolean {\r\n        return Boolean(this.textDocuments?.get(doc.uri));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given document should be relinked after changes were found in the given URIs.\r\n     */\r\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        // Relink documents with linking errors -- maybe those references can be resolved now\r\n        if (document.references.some(ref => ref.error !== undefined)) {\r\n            return true;\r\n        }\r\n        // Check whether the document is affected by any of the changed URIs\r\n        return this.indexManager.isAffected(document, changedUris);\r\n    }\r\n\r\n    onUpdate(callback: DocumentUpdateListener): Disposable {\r\n        this.updateListeners.push(callback);\r\n        return Disposable.create(() => {\r\n            const index = this.updateListeners.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.updateListeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the given documents by stepping through all build phases. If a document's state indicates\r\n     * that a certain build phase is already done, the phase is skipped for that document.\r\n     *\r\n     * @param documents The documents to build.\r\n     * @param options the {@link BuildOptions} to use.\r\n     * @param cancelToken A cancellation token that can be used to cancel the build.\r\n     * @returns A promise that resolves when the build is done.\r\n     */\r\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\r\n        this.prepareBuild(documents, options);\r\n        // 0. Parse content\r\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\r\n            this.langiumDocumentFactory.update(doc, cancelToken)\r\n        );\r\n        // 1. Index content\r\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\r\n            this.indexManager.updateContent(doc, cancelToken)\r\n        );\r\n        // 2. Compute scopes\r\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\r\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\r\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\r\n        });\r\n        // 3. Linking\r\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\r\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n            return linker.link(doc, cancelToken);\r\n        });\r\n        // 4. Index references\r\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\r\n            this.indexManager.updateReferences(doc, cancelToken)\r\n        );\r\n        // 5. Validation\r\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\r\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\r\n            this.validate(doc, cancelToken)\r\n        );\r\n\r\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\r\n        for (const doc of documents) {\r\n            const state = this.buildState.get(doc.uri.toString());\r\n            if (state) {\r\n                state.completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\r\n     *\r\n     * @param documents collection of documents to be built\r\n     * @param options the {@link BuildOptions} to use\r\n     */\r\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\r\n        for (const doc of documents) {\r\n            const key = doc.uri.toString();\r\n            const state = this.buildState.get(key);\r\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\r\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\r\n            // and continue where it was cancelled.\r\n            if (!state || state.completed) {\r\n                this.buildState.set(key, {\r\n                    completed: false,\r\n                    options,\r\n                    result: state?.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\r\n     *\r\n     * @param documents The array of documents to process.\r\n     * @param targetState The target {@link DocumentState} to bring the documents to.\r\n     * @param cancelToken A token that can be used to cancel the operation.\r\n     * @param callback A function to be called for each document.\r\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\r\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\r\n     */\r\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\r\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\r\n        const filtered = documents.filter(doc => doc.state < targetState);\r\n        for (const document of filtered) {\r\n            await interruptAndCheck(cancelToken);\r\n            await callback(document);\r\n            document.state = targetState;\r\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\r\n        }\r\n\r\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\r\n        // For example, this happens in case the cancellation triggers between the processing of two documents\r\n        // Or files that were picked up during the workspace initialization\r\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\r\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\r\n        this.currentState = targetState;\r\n    }\r\n\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\r\n        this.buildPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.buildPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable {\r\n        this.documentPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.documentPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\r\n        let uri: URI | undefined = undefined;\r\n        if (uriOrToken && 'path' in uriOrToken) {\r\n            uri = uriOrToken;\r\n        } else {\r\n            cancelToken = uriOrToken;\r\n        }\r\n        cancelToken ??= CancellationToken.None;\r\n        if (uri) {\r\n            const document = this.langiumDocuments.getDocument(uri);\r\n            if (document && document.state > state) {\r\n                return Promise.resolve(uri);\r\n            }\r\n        }\r\n        if (this.currentState >= state) {\r\n            return Promise.resolve(undefined);\r\n        } else if (cancelToken.isCancellationRequested) {\r\n            return Promise.reject(OperationCancelled);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const buildDisposable = this.onBuildPhase(state, () => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                if (uri) {\r\n                    const document = this.langiumDocuments.getDocument(uri);\r\n                    resolve(document?.uri);\r\n                } else {\r\n                    resolve(undefined);\r\n                }\r\n            });\r\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                reject(OperationCancelled);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async notifyDocumentPhase(document: LangiumDocument, state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        const listeners = this.documentPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            try {\r\n                await listener(document, cancelToken);\r\n            } catch (err) {\r\n                // Ignore cancellation errors\r\n                // We want to finish the listeners before throwing\r\n                if (!isOperationCancelled(err)) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        if (documents.length === 0) {\r\n            // Don't notify when no document has been processed\r\n            return;\r\n        }\r\n        const listeners = this.buildPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            await interruptAndCheck(cancelToken);\r\n            await listener(documents, cancelToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given document should be validated during a build. The default\r\n     * implementation checks the `validation` property of the build options. If it's set to `true`\r\n     * or a `ValidationOptions` object, the document is included in the validation phase.\r\n     */\r\n    protected shouldValidate(document: LangiumDocument): boolean {\r\n        return Boolean(this.getBuildOptions(document).validation);\r\n    }\r\n\r\n    /**\r\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\r\n     * If the document already contains diagnostics, the new ones are added to the list.\r\n     */\r\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\r\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\r\n        const validationSetting = this.getBuildOptions(document).validation;\r\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\r\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\r\n        if (document.diagnostics) {\r\n            document.diagnostics.push(...diagnostics);\r\n        } else {\r\n            document.diagnostics = diagnostics;\r\n        }\r\n\r\n        // Store information about the executed validation in the build state\r\n        const state = this.buildState.get(document.uri.toString());\r\n        if (state) {\r\n            state.result ??= {};\r\n            const newCategories = options?.categories ?? ValidationCategory.all;\r\n            if (state.result.validationChecks) {\r\n                state.result.validationChecks.push(...newCategories);\r\n            } else {\r\n                state.result.validationChecks = [...newCategories];\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\r\n        return this.buildState.get(document.uri.toString())?.options ?? {};\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { ContextCache } from '../utils/caching.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\nimport type { ReferenceDescription } from './ast-descriptions.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\n\r\n/**\r\n * The index manager is responsible for keeping metadata about symbols and cross-references\r\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\r\n * and completion. This service is shared between all languages of a language server.\r\n */\r\nexport interface IndexManager {\r\n\r\n    /**\r\n     * Removes the specified document URI from the index.\r\n     * Necessary when documents are deleted and not referenceable anymore.\r\n     *\r\n     * @param uri The URI of the document for which index data shall be removed\r\n     */\r\n    remove(uri: URI): void;\r\n\r\n    /**\r\n     * Updates the information about the exportable content of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Updates the information about the cross-references of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Determine whether the given document could be affected by changes of the documents\r\n     * identified by the given URIs (second parameter). The document is typically regarded as\r\n     * affected if it contains a reference to any of the changed files.\r\n     *\r\n     * @param document Document to check whether it's affected\r\n     * @param changedUris URIs of the changed documents\r\n     */\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\r\n\r\n    /**\r\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\r\n     *\r\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\r\n     * @param uris If specified, only returns elements from the given URIs.\r\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\r\n     */\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\r\n\r\n    /**\r\n     * Returns all known references that are pointing to the given `targetNode`.\r\n     *\r\n     * @param targetNode the `AstNode` to look up references for\r\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\r\n     *\r\n     * @returns a `Stream` of references that are targeting the `targetNode`\r\n     */\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\r\n\r\n}\r\n\r\nexport class DefaultIndexManager implements IndexManager {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly documents: LangiumDocuments;\r\n    protected readonly astReflection: AstReflection;\r\n\r\n    /**\r\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\r\n     * The key used in this map is the string representation of the specific document URI.\r\n     */\r\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\r\n    /**\r\n     * This is a cache for the `allElements()` method.\r\n     * It caches the descriptions from `symbolIndex` grouped by types.\r\n     */\r\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\r\n    /**\r\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\r\n     * This is used to compute which elements are affected by a document change\r\n     * and for finding references to an AST node.\r\n     */\r\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.documents = services.workspace.LangiumDocuments;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.astReflection = services.AstReflection;\r\n    }\r\n\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\r\n        const targetDocUri = getDocument(targetNode).uri;\r\n        const result: ReferenceDescription[] = [];\r\n        this.referenceIndex.forEach(docRefs => {\r\n            docRefs.forEach(refDescr => {\r\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\r\n                    result.push(refDescr);\r\n                }\r\n            });\r\n        });\r\n        return stream(result);\r\n    }\r\n\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\r\n        let documentUris = stream(this.symbolIndex.keys());\r\n        if (uris) {\r\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\r\n        }\r\n        return documentUris\r\n            .map(uri => this.getFileDescriptions(uri, nodeType))\r\n            .flat();\r\n    }\r\n\r\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\r\n        if (!nodeType) {\r\n            return this.symbolIndex.get(uri) ?? [];\r\n        }\r\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\r\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\r\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\r\n        });\r\n        return descriptions;\r\n    }\r\n\r\n    remove(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        this.symbolIndex.delete(uriString);\r\n        this.symbolByTypeIndex.clear(uriString);\r\n        this.referenceIndex.delete(uriString);\r\n    }\r\n\r\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\r\n        const uri = document.uri.toString();\r\n        this.symbolIndex.set(uri, exports);\r\n        this.symbolByTypeIndex.clear(uri);\r\n    }\r\n\r\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\r\n        this.referenceIndex.set(document.uri.toString(), indexData);\r\n    }\r\n\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        const references = this.referenceIndex.get(document.uri.toString());\r\n        if (!references) {\r\n            return false;\r\n        }\r\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\r\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { URI, UriUtils } from '../utils/uri-utils.js';\r\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\r\nimport type { WorkspaceLock } from './workspace-lock.js';\r\n\r\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\r\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\r\nexport type { WorkspaceFolder };\r\n\r\n/**\r\n * The workspace manager is responsible for finding source files in the workspace.\r\n * This service is shared between all languages of a language server.\r\n */\r\nexport interface WorkspaceManager {\r\n\r\n    /** The options used for the initial workspace build. */\r\n    initialBuildOptions: BuildOptions | undefined;\r\n\r\n    /**\r\n     * A promise that resolves when the workspace manager is ready to be used.\r\n     * Use this to ensure that the workspace manager has finished its initialization.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * The workspace folders of the current workspace.\r\n     * Available only after the `ready` promise resolves.\r\n     */\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: InitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Does the initial indexing of workspace folders.\r\n     * Collects information about exported and referenced AstNodes in\r\n     * each language file and stores it locally.\r\n     *\r\n     * @param folders The set of workspace folders to be indexed.\r\n     * @param cancelToken A cancellation token that can be used to cancel the operation.\r\n     *\r\n     * @throws OperationCancelled if a cancellation event has been detected\r\n     */\r\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n}\r\n\r\nexport class DefaultWorkspaceManager implements WorkspaceManager {\r\n\r\n    initialBuildOptions: BuildOptions = {};\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly documentBuilder: DocumentBuilder;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n    protected readonly mutex: WorkspaceLock;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected folders?: WorkspaceFolder[];\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.documentBuilder = services.workspace.DocumentBuilder;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n        this.mutex = services.workspace.WorkspaceLock;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined {\r\n        return this.folders;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.folders = params.workspaceFolders ?? undefined;\r\n    }\r\n\r\n    initialized(_params: InitializedParams): Promise<void> {\r\n        // Initialize the workspace even if there are no workspace folders\r\n        // We still want to load additional documents (language library or similar) during initialization\r\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\r\n    }\r\n\r\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\r\n        const documents = await this.performStartup(folders);\r\n        // Only after creating all documents do we check whether we need to cancel the initialization\r\n        // The document builder will later pick up on all unprocessed documents\r\n        await interruptAndCheck(cancelToken);\r\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Performs the uninterruptable startup sequence of the workspace manager.\r\n     * This methods loads all documents in the workspace and other documents and returns them.\r\n     */\r\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\r\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\r\n        const documents: LangiumDocument[] = [];\r\n        const collector = (document: LangiumDocument) => {\r\n            documents.push(document);\r\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\r\n                this.langiumDocuments.addDocument(document);\r\n            }\r\n        };\r\n        // Even though we don't await the initialization of the workspace manager,\r\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\r\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\r\n        await this.loadAdditionalDocuments(folders, collector);\r\n        await Promise.all(\r\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\r\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\r\n        );\r\n        this._ready.resolve();\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Load all additional documents that shall be visible in the context of the given workspace\r\n     * folders and add them to the collector. This can be used to include built-in libraries of\r\n     * your language, which can be either loaded from provided files or constructed in memory.\r\n     */\r\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Determine the root folder of the source documents in the given workspace folder.\r\n     * The default implementation returns the URI of the workspace folder, but you can override\r\n     * this to return a subfolder like `src` instead.\r\n     */\r\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\r\n        return URI.parse(workspaceFolder.uri);\r\n    }\r\n\r\n    /**\r\n     * Traverse the file system folder identified by the given URI and its subfolders. All\r\n     * contained files that match the file extensions are added to the collector.\r\n     */\r\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\r\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\r\n        await Promise.all(content.map(async entry => {\r\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\r\n                if (entry.isDirectory) {\r\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\r\n                } else if (entry.isFile) {\r\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\r\n                    collector(document);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given folder entry shall be included while indexing the workspace.\r\n     */\r\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\r\n        const name = UriUtils.basename(entry.uri);\r\n        if (name.startsWith('.')) {\r\n            return false;\r\n        }\r\n        if (entry.isDirectory) {\r\n            return name !== 'node_modules' && name !== 'out';\r\n        } else if (entry.isFile) {\r\n            const extname = UriUtils.extname(entry.uri);\r\n            return fileExtensions.includes(extname);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ILexerErrorMessageProvider, ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\r\nimport type { LexingReport, TokenBuilder } from './token-builder.js';\r\n\r\nexport class DefaultLexerErrorMessageProvider implements ILexerErrorMessageProvider {\r\n\r\n    buildUnexpectedCharactersMessage(fullText: string, startOffset: number, length: number, line?: number, column?: number): string {\r\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\r\n    }\r\n\r\n    buildUnableToPopLexerModeMessage(token: IToken): string {\r\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\r\n    }\r\n}\r\n\r\nexport interface LexerResult {\r\n    /**\r\n     * A list of all tokens that were lexed from the input.\r\n     *\r\n     * Note that Langium requires the optional properties\r\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\r\n     */\r\n    tokens: IToken[];\r\n    /**\r\n     * Contains hidden tokens, usually comments.\r\n     */\r\n    hidden: IToken[];\r\n    errors: ILexingError[];\r\n    report?: LexingReport;\r\n}\r\n\r\nexport type TokenizeMode = 'full' | 'partial';\r\n\r\nexport interface TokenizeOptions {\r\n    mode?: TokenizeMode;\r\n}\r\n\r\nexport const DEFAULT_TOKENIZE_OPTIONS: TokenizeOptions = { mode: 'full' };\r\n\r\nexport interface Lexer {\r\n    readonly definition: TokenTypeDictionary;\r\n    tokenize(text: string, options?: TokenizeOptions): LexerResult;\r\n}\r\n\r\nexport class DefaultLexer implements Lexer {\r\n\r\n    protected readonly tokenBuilder: TokenBuilder;\r\n    protected readonly errorMessageProvider: ILexerErrorMessageProvider;\r\n    protected tokenTypes: TokenTypeDictionary;\r\n    protected chevrotainLexer: ChevrotainLexer;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\r\n        this.tokenBuilder = services.parser.TokenBuilder;\r\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\r\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\r\n        });\r\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\r\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\r\n            positionTracking: 'full',\r\n            skipValidations: production,\r\n            errorMessageProvider: this.errorMessageProvider\r\n        });\r\n    }\r\n\r\n    get definition(): TokenTypeDictionary {\r\n        return this.tokenTypes;\r\n    }\r\n\r\n    tokenize(text: string, _options: TokenizeOptions = DEFAULT_TOKENIZE_OPTIONS): LexerResult {\r\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\r\n        return {\r\n            tokens: chevrotainResult.tokens,\r\n            errors: chevrotainResult.errors,\r\n            hidden: chevrotainResult.groups.hidden ?? [],\r\n            report: this.tokenBuilder.flushLexingReport?.(text)\r\n        };\r\n    }\r\n\r\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\r\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\r\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\r\n        const res: TokenTypeDictionary = {};\r\n        tokens.forEach(token => res[token.name] = token);\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenType array\r\n */\r\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\r\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\r\n */\r\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\r\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\r\n */\r\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\r\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Position, Range } from 'vscode-languageserver-types';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface JSDocComment extends JSDocValue {\r\n    readonly elements: JSDocElement[]\r\n    getTag(name: string): JSDocTag | undefined\r\n    getTags(name: string): JSDocTag[]\r\n}\r\n\r\nexport type JSDocElement = JSDocParagraph | JSDocTag;\r\n\r\nexport type JSDocInline = JSDocTag | JSDocLine;\r\n\r\nexport interface JSDocValue {\r\n    /**\r\n     * Represents the range that this JSDoc element occupies.\r\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\r\n     */\r\n    readonly range: Range\r\n    /**\r\n     * Renders this JSDoc element to a plain text representation.\r\n     */\r\n    toString(): string\r\n    /**\r\n     * Renders this JSDoc element to a markdown representation.\r\n     *\r\n     * @param options Rendering options to customize the markdown result.\r\n     */\r\n    toMarkdown(options?: JSDocRenderOptions): string\r\n}\r\n\r\nexport interface JSDocParagraph extends JSDocValue {\r\n    readonly inlines: JSDocInline[]\r\n}\r\n\r\nexport interface JSDocLine extends JSDocValue {\r\n    readonly text: string\r\n}\r\n\r\nexport interface JSDocTag extends JSDocValue {\r\n    readonly name: string\r\n    readonly content: JSDocParagraph\r\n    readonly inline: boolean\r\n}\r\n\r\nexport interface JSDocParseOptions {\r\n    /**\r\n     * The start symbol of your comment format. Defaults to `/**`.\r\n     */\r\n    readonly start?: RegExp | string\r\n    /**\r\n     * The symbol that start a line of your comment format. Defaults to `*`.\r\n     */\r\n    readonly line?: RegExp | string\r\n    /**\r\n     * The end symbol of your comment format. Defaults to `*\\/`.\r\n     */\r\n    readonly end?: RegExp | string\r\n}\r\n\r\nexport interface JSDocRenderOptions {\r\n    /**\r\n     * Determines the style for rendering tags. Defaults to `italic`.\r\n     */\r\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\r\n    /**\r\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\r\n     */\r\n    link?: 'code' | 'plain'\r\n    /**\r\n     * Custom tag rendering function.\r\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\r\n     */\r\n    renderTag?(tag: JSDocTag): string | undefined\r\n    /**\r\n     * Custom link rendering function. Accepts a link target and a display value for the link.\r\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\r\n     */\r\n    renderLink?(link: string, display: string): string | undefined\r\n}\r\n\r\n/**\r\n * Parses a JSDoc from a `CstNode` containing a comment.\r\n *\r\n * @param node A `CstNode` from a parsed Langium document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\r\n/**\r\n * Parses a JSDoc from a string comment.\r\n *\r\n * @param content A string containing the source of the JSDoc comment.\r\n * @param start The start position the comment occupies in the source document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\r\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\r\n    let opts: JSDocParseOptions | undefined;\r\n    let position: Position | undefined;\r\n    if (typeof node === 'string') {\r\n        position = start as Position | undefined;\r\n        opts = options as JSDocParseOptions | undefined;\r\n    } else {\r\n        position = node.range.start;\r\n        opts = start as JSDocParseOptions | undefined;\r\n    }\r\n    if (!position) {\r\n        position = Position.create(0, 0);\r\n    }\r\n\r\n    const lines = getLines(node);\r\n    const normalizedOptions = normalizeOptions(opts);\r\n\r\n    const tokens = tokenize({\r\n        lines,\r\n        position,\r\n        options: normalizedOptions\r\n    });\r\n\r\n    return parseJSDocComment({\r\n        index: 0,\r\n        tokens,\r\n        position\r\n    });\r\n}\r\n\r\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\r\n    const normalizedOptions = normalizeOptions(options);\r\n    const lines = getLines(node);\r\n    if (lines.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const first = lines[0];\r\n    const last = lines[lines.length - 1];\r\n    const firstRegex = normalizedOptions.start;\r\n    const lastRegex = normalizedOptions.end;\r\n\r\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\r\n}\r\n\r\nfunction getLines(node: CstNode | string): string[] {\r\n    let content = '';\r\n    if (typeof node === 'string') {\r\n        content = node;\r\n    } else {\r\n        content = node.text;\r\n    }\r\n    const lines = content.split(NEWLINE_REGEXP);\r\n    return lines;\r\n}\r\n\r\n// Tokenization\r\n\r\ninterface JSDocToken {\r\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\r\n    content: string\r\n    range: Range\r\n}\r\n\r\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\r\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\r\n\r\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n    let currentLine = context.position.line;\r\n    let currentCharacter = context.position.character;\r\n    for (let i = 0; i < context.lines.length; i++) {\r\n        const first = i === 0;\r\n        const last = i === context.lines.length - 1;\r\n        let line = context.lines[i];\r\n        let index = 0;\r\n\r\n        if (first && context.options.start) {\r\n            const match = context.options.start?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        } else {\r\n            const match = context.options.line?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        }\r\n        if (last) {\r\n            const match = context.options.end?.exec(line);\r\n            if (match) {\r\n                line = line.substring(0, match.index);\r\n            }\r\n        }\r\n\r\n        line = line.substring(0, lastCharacter(line));\r\n        const whitespaceEnd = skipWhitespace(line, index);\r\n\r\n        if (whitespaceEnd >= line.length) {\r\n            // Only create a break token when we already have previous tokens\r\n            if (tokens.length > 0) {\r\n                const position = Position.create(currentLine, currentCharacter);\r\n                tokens.push({\r\n                    type: 'break',\r\n                    content: '',\r\n                    range: Range.create(position, position)\r\n                });\r\n            }\r\n        } else {\r\n            tagRegex.lastIndex = index;\r\n            const tagMatch = tagRegex.exec(line);\r\n            if (tagMatch) {\r\n                const fullMatch = tagMatch[0];\r\n                const value = tagMatch[1];\r\n                const start = Position.create(currentLine, currentCharacter + index);\r\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\r\n                tokens.push({\r\n                    type: 'tag',\r\n                    content: value,\r\n                    range: Range.create(start, end)\r\n                });\r\n                index += fullMatch.length;\r\n                index = skipWhitespace(line, index);\r\n            }\r\n\r\n            if (index < line.length) {\r\n                const rest = line.substring(index);\r\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\r\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\r\n            }\r\n        }\r\n\r\n        currentLine++;\r\n        currentCharacter = 0;\r\n    }\r\n\r\n    // Remove last break token if there is one\r\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\r\n        return tokens.slice(0, -1);\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n\r\n    if (tags.length === 0) {\r\n        const start = Position.create(lineIndex, characterIndex);\r\n        const end = Position.create(lineIndex, characterIndex + line.length);\r\n        tokens.push({\r\n            type: 'text',\r\n            content: line,\r\n            range: Range.create(start, end)\r\n        });\r\n    } else {\r\n        let lastIndex = 0;\r\n        for (const match of tags) {\r\n            const matchIndex = match.index!;\r\n            const startContent = line.substring(lastIndex, matchIndex);\r\n            if (startContent.length > 0) {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: line.substring(lastIndex, matchIndex),\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + characterIndex),\r\n                        Position.create(lineIndex, matchIndex + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            let offset = startContent.length + 1;\r\n            const tagName = match[1];\r\n            tokens.push({\r\n                type: 'inline-tag',\r\n                content: tagName,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\r\n                )\r\n            });\r\n            offset += tagName.length;\r\n            if (match.length === 4) {\r\n                offset += match[2].length;\r\n                const value = match[3];\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: value,\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\r\n                    )\r\n                });\r\n            } else {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: '',\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            lastIndex = matchIndex + match[0].length;\r\n        }\r\n        const endContent = line.substring(lastIndex);\r\n        if (endContent.length > 0) {\r\n            tokens.push({\r\n                type: 'text',\r\n                content: endContent,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nconst nonWhitespaceRegex = /\\S/;\r\nconst whitespaceEndRegex = /\\s*$/;\r\n\r\nfunction skipWhitespace(line: string, index: number): number {\r\n    const match = line.substring(index).match(nonWhitespaceRegex);\r\n    if (match) {\r\n        return index + match.index!;\r\n    } else {\r\n        return line.length;\r\n    }\r\n}\r\n\r\nfunction lastCharacter(line: string): number | undefined {\r\n    const match = line.match(whitespaceEndRegex);\r\n    if (match && typeof match.index === 'number') {\r\n        return match.index;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Parsing\r\n\r\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\r\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\r\n    if (context.tokens.length === 0) {\r\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\r\n    }\r\n    const elements: JSDocElement[] = [];\r\n    while (context.index < context.tokens.length) {\r\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\r\n        if (element) {\r\n            elements.push(element);\r\n        }\r\n    }\r\n    const start = elements[0]?.range.start ?? startPosition;\r\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\r\n    return new JSDocCommentImpl(elements, Range.create(start, end));\r\n}\r\n\r\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\r\n    const next = context.tokens[context.index];\r\n    if (next.type === 'tag') {\r\n        return parseJSDocTag(context, false);\r\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\r\n        return parseJSDocText(context);\r\n    } else {\r\n        appendEmptyLine(next, last);\r\n        context.index++;\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\r\n    if (element) {\r\n        const line = new JSDocLineImpl('', token.range);\r\n        if ('inlines' in element) {\r\n            element.inlines.push(line);\r\n        } else {\r\n            element.content.inlines.push(line);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\r\n    let token = context.tokens[context.index];\r\n    const firstToken = token;\r\n    let lastToken = token;\r\n    const lines: JSDocInline[] = [];\r\n    while (token && token.type !== 'break' && token.type !== 'tag') {\r\n        lines.push(parseJSDocInline(context));\r\n        lastToken = token;\r\n        token = context.tokens[context.index];\r\n    }\r\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\r\n}\r\n\r\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\r\n    const token = context.tokens[context.index];\r\n    if (token.type === 'inline-tag') {\r\n        return parseJSDocTag(context, true);\r\n    } else {\r\n        return parseJSDocLine(context);\r\n    }\r\n}\r\n\r\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\r\n    const tagToken = context.tokens[context.index++];\r\n    const name = tagToken.content.substring(1);\r\n    const nextToken = context.tokens[context.index];\r\n    if (nextToken?.type === 'text') {\r\n        if (inline) {\r\n            const docLine = parseJSDocLine(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                new JSDocTextImpl([docLine], docLine.range),\r\n                inline,\r\n                Range.create(tagToken.range.start, docLine.range.end)\r\n            );\r\n        } else {\r\n            const textDoc = parseJSDocText(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                textDoc,\r\n                inline,\r\n                Range.create(tagToken.range.start, textDoc.range.end)\r\n            );\r\n        }\r\n    } else {\r\n        const range = tagToken.range;\r\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\r\n    }\r\n}\r\n\r\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\r\n    const token = context.tokens[context.index++];\r\n    return new JSDocLineImpl(token.content, token.range);\r\n}\r\n\r\ninterface NormalizedOptions {\r\n    start?: RegExp\r\n    end?: RegExp\r\n    line?: RegExp\r\n}\r\n\r\ninterface TokenizationContext {\r\n    position: Position\r\n    lines: string[]\r\n    options: NormalizedOptions\r\n}\r\n\r\ninterface ParseContext {\r\n    position: Position\r\n    tokens: JSDocToken[]\r\n    index: number\r\n}\r\n\r\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\r\n    if (!options) {\r\n        return normalizeOptions({\r\n            start: '/**',\r\n            end: '*/',\r\n            line: '*'\r\n        });\r\n    }\r\n    const { start, end, line } = options;\r\n    return {\r\n        start: normalizeOption(start, true),\r\n        end: normalizeOption(end, false),\r\n        line: normalizeOption(line, true)\r\n    };\r\n}\r\n\r\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\r\n    if (typeof option === 'string' || typeof option === 'object') {\r\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\r\n        if (start) {\r\n            return new RegExp(`^\\\\s*${escaped}`);\r\n        } else {\r\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\r\n        }\r\n    } else {\r\n        return option;\r\n    }\r\n}\r\n\r\nclass JSDocCommentImpl implements JSDocComment {\r\n\r\n    readonly elements: JSDocElement[];\r\n    readonly range: Range;\r\n\r\n    constructor(elements: JSDocElement[], range: Range) {\r\n        this.elements = elements;\r\n        this.range = range;\r\n    }\r\n\r\n    getTag(name: string): JSDocTag | undefined {\r\n        return this.getAllTags().find(e => e.name === name);\r\n    }\r\n\r\n    getTags(name: string): JSDocTag[] {\r\n        return this.getAllTags().filter(e => e.name === name);\r\n    }\r\n\r\n    private getAllTags(): JSDocTag[] {\r\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\r\n    }\r\n\r\n    toString(): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toString();\r\n            } else {\r\n                const text = element.toString();\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toMarkdown(options);\r\n            } else {\r\n                const text = element.toMarkdown(options);\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n}\r\n\r\nclass JSDocTagImpl implements JSDocTag {\r\n    name: string;\r\n    content: JSDocParagraph;\r\n    range: Range;\r\n    inline: boolean;\r\n\r\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\r\n        this.name = name;\r\n        this.content = content;\r\n        this.inline = inline;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = `@${this.name}`;\r\n        const content = this.content.toString();\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\r\n    }\r\n\r\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\r\n        const content = this.content.toMarkdown(options);\r\n        if (this.inline) {\r\n            const rendered = renderInlineTag(this.name, content, options ?? {});\r\n            if (typeof rendered === 'string') {\r\n                return rendered;\r\n            }\r\n        }\r\n        let marker = '';\r\n        if (options?.tag === 'italic' || options?.tag === undefined) {\r\n            marker = '*';\r\n        } else if (options?.tag === 'bold') {\r\n            marker = '**';\r\n        } else if (options?.tag === 'bold-italic') {\r\n            marker = '***';\r\n        }\r\n        let text = `${marker}@${this.name}${marker}`;\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} — ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\r\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\r\n        const index = content.indexOf(' ');\r\n        let display = content;\r\n        if (index > 0) {\r\n            const displayStart = skipWhitespace(content, index);\r\n            display = content.substring(displayStart);\r\n            content = content.substring(0, index);\r\n        }\r\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\r\n            // Surround the display value in a markdown inline code block\r\n            display = `\\`${display}\\``;\r\n        }\r\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\r\n        return renderedLink;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction renderLinkDefault(content: string, display: string): string {\r\n    try {\r\n        URI.parse(content, true);\r\n        return `[${display}](${content})`;\r\n    } catch {\r\n        return content;\r\n    }\r\n}\r\n\r\nclass JSDocTextImpl implements JSDocParagraph {\r\n    inlines: JSDocInline[];\r\n    range: Range;\r\n\r\n    constructor(lines: JSDocInline[], range: Range) {\r\n        this.inlines = lines;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toString();\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toMarkdown(options);\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nclass JSDocLineImpl implements JSDocLine {\r\n    text: string;\r\n    range: Range;\r\n\r\n    constructor(text: string, range: Range) {\r\n        this.text = text;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n    toMarkdown(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\nfunction fillNewlines(text: string): string {\r\n    if (text.endsWith('\\n')) {\r\n        return '\\n';\r\n    } else {\r\n        return '\\n\\n';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { CommentProvider } from './comment-provider.js';\r\nimport type { JSDocTag } from './jsdoc.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\r\n\r\n/**\r\n * Provides documentation for AST nodes.\r\n */\r\nexport interface DocumentationProvider {\r\n    /**\r\n     * Returns a markdown documentation string for the specified AST node.\r\n     *\r\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\r\n     */\r\n    getDocumentation(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class JSDocDocumentationProvider implements DocumentationProvider {\r\n\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    getDocumentation(node: AstNode): string | undefined {\r\n        const comment = this.commentProvider.getComment(node);\r\n        if (comment && isJSDoc(comment)) {\r\n            const parsedJSDoc = parseJSDoc(comment);\r\n            return parsedJSDoc.toMarkdown({\r\n                renderLink: (link, display) => {\r\n                    return this.documentationLinkRenderer(node, link, display);\r\n                },\r\n                renderTag: (tag) => {\r\n                    return this.documentationTagRenderer(node, tag);\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\r\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\r\n        if (description && description.nameSegment) {\r\n            const line = description.nameSegment.range.start.line + 1;\r\n            const character = description.nameSegment.range.start.character + 1;\r\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\r\n            return `[${display}](${uri.toString()})`;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\r\n        // Fall back to the default tag rendering\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const document = getDocument(node);\r\n        const precomputed = document.precomputedScopes;\r\n        if (!precomputed) {\r\n            return undefined;\r\n        }\r\n        let currentNode: AstNode | undefined = node;\r\n        do {\r\n            const allDescriptions = precomputed.get(currentNode);\r\n            const description = allDescriptions.find(e => e.name === name);\r\n            if (description) {\r\n                return description;\r\n            }\r\n            currentNode = currentNode.$container;\r\n        } while (currentNode);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const description = this.indexManager.allElements().find(e => e.name === name);\r\n        return description;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\r\nimport type { Hydrator } from '../serializer/hydrator.js';\r\nimport type { Event } from '../utils/event.js';\r\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\r\nimport { Emitter } from '../utils/event.js';\r\n\r\n/**\r\n * Async parser that allows cancellation of the current parsing process.\r\n *\r\n * @remarks\r\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\r\n * The default implementation is not actually async. It just wraps the sync parser in a promise. A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport interface AsyncParser {\r\n    /**\r\n     * Parses the given text and returns the parse result.\r\n     *\r\n     * @param text The text to parse.\r\n     * @param cancelToken A cancellation token that can be used to cancel the parsing process.\r\n     * @returns A promise that resolves to the parse result.\r\n     *\r\n     * @throws `OperationCancelled` if the parsing process is cancelled.\r\n     */\r\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\r\n}\r\n\r\n/**\r\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\r\n *\r\n * @remarks\r\n * A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport class DefaultAsyncParser implements AsyncParser {\r\n\r\n    protected readonly syncParser: LangiumParser;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.syncParser = services.parser.LangiumParser;\r\n    }\r\n\r\n    parse<T extends AstNode>(text: string, _cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        return Promise.resolve(this.syncParser.parse<T>(text));\r\n    }\r\n}\r\n\r\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\r\n\r\n    /**\r\n     * The thread count determines how many threads are used to parse files in parallel.\r\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\r\n     */\r\n    protected threadCount = 8;\r\n    /**\r\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\r\n     * The default value is 200(ms).\r\n     */\r\n    protected terminationDelay = 200;\r\n    protected workerPool: ParserWorker[] = [];\r\n    protected queue: Array<Deferred<ParserWorker>> = [];\r\n\r\n    protected readonly hydrator: Hydrator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.hydrator = services.serializer.Hydrator;\r\n    }\r\n\r\n    protected initializeWorkers(): void {\r\n        while (this.workerPool.length < this.threadCount) {\r\n            const worker = this.createWorker();\r\n            worker.onReady(() => {\r\n                if (this.queue.length > 0) {\r\n                    const deferred = this.queue.shift();\r\n                    if (deferred) {\r\n                        worker.lock();\r\n                        deferred.resolve(worker);\r\n                    }\r\n                }\r\n            });\r\n            this.workerPool.push(worker);\r\n        }\r\n    }\r\n\r\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const worker = await this.acquireParserWorker(cancelToken);\r\n        const deferred = new Deferred<ParseResult<T>>();\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\r\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\r\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\r\n        const cancellation = cancelToken.onCancellationRequested(() => {\r\n            timeout = setTimeout(() => {\r\n                this.terminateWorker(worker);\r\n            }, this.terminationDelay);\r\n        });\r\n        worker.parse(text).then(result => {\r\n            const hydrated = this.hydrator.hydrate<T>(result);\r\n            deferred.resolve(hydrated);\r\n        }).catch(err => {\r\n            deferred.reject(err);\r\n        }).finally(() => {\r\n            cancellation.dispose();\r\n            clearTimeout(timeout);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected terminateWorker(worker: ParserWorker): void {\r\n        worker.terminate();\r\n        const index = this.workerPool.indexOf(worker);\r\n        if (index >= 0) {\r\n            this.workerPool.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\r\n        this.initializeWorkers();\r\n        for (const worker of this.workerPool) {\r\n            if (worker.ready) {\r\n                worker.lock();\r\n                return worker;\r\n            }\r\n        }\r\n        const deferred = new Deferred<ParserWorker>();\r\n        cancelToken.onCancellationRequested(() => {\r\n            const index = this.queue.indexOf(deferred);\r\n            if (index >= 0) {\r\n                this.queue.splice(index, 1);\r\n            }\r\n            deferred.reject(OperationCancelled);\r\n        });\r\n        this.queue.push(deferred);\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected abstract createWorker(): ParserWorker;\r\n}\r\n\r\nexport type WorkerMessagePost = (message: unknown) => void;\r\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\r\n\r\nexport class ParserWorker {\r\n\r\n    protected readonly sendMessage: WorkerMessagePost;\r\n    protected readonly _terminate: () => void;\r\n    protected readonly onReadyEmitter = new Emitter<void>();\r\n\r\n    protected deferred = new Deferred<ParseResult>();\r\n    protected _ready = true;\r\n    protected _parsing = false;\r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n\r\n    get onReady(): Event<void> {\r\n        return this.onReadyEmitter.event;\r\n    }\r\n\r\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\r\n        this.sendMessage = sendMessage;\r\n        this._terminate = terminate;\r\n        onMessage(result => {\r\n            const parseResult = result as ParseResult;\r\n            this.deferred.resolve(parseResult);\r\n            this.unlock();\r\n        });\r\n        onError(error => {\r\n            this.deferred.reject(error);\r\n            this.unlock();\r\n        });\r\n    }\r\n\r\n    terminate(): void {\r\n        this.deferred.reject(OperationCancelled);\r\n        this._terminate();\r\n    }\r\n\r\n    lock(): void {\r\n        this._ready = false;\r\n    }\r\n\r\n    unlock(): void {\r\n        this._parsing = false;\r\n        this._ready = true;\r\n        this.onReadyEmitter.fire();\r\n    }\r\n\r\n    parse(text: string): Promise<ParseResult> {\r\n        if (this._parsing) {\r\n            throw new Error('Parser worker is busy');\r\n        }\r\n        this._parsing = true;\r\n        this.deferred = new Deferred();\r\n        this.sendMessage(text);\r\n        return this.deferred.promise;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { type AbstractCancellationTokenSource, CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\r\nimport { Deferred, isOperationCancelled, startCancelableOperation, type MaybePromise } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Utility service to execute mutually exclusive actions.\r\n */\r\nexport interface WorkspaceLock {\r\n    /**\r\n     * Performs a single async action, like initializing the workspace or processing document changes.\r\n     * Only one action will be executed at a time.\r\n     *\r\n     * When another action is queued up, the token provided for the action will be cancelled.\r\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\r\n     */\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\r\n\r\n    /**\r\n     * Performs a single action, like computing completion results or providing workspace symbols.\r\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\r\n     *\r\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\r\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\r\n     *\r\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\r\n     */\r\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\r\n\r\n    /**\r\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\r\n     */\r\n    cancelWrite(): void;\r\n}\r\n\r\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\r\n\r\ninterface LockEntry {\r\n    action: LockAction<unknown>;\r\n    deferred: Deferred<unknown>;\r\n    cancellationToken: CancellationToken;\r\n}\r\n\r\nexport class DefaultWorkspaceLock implements WorkspaceLock {\r\n\r\n    private previousTokenSource: AbstractCancellationTokenSource = new CancellationTokenSource();\r\n    private writeQueue: LockEntry[] = [];\r\n    private readQueue: LockEntry[] = [];\r\n    private done = true;\r\n\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\r\n        this.cancelWrite();\r\n        const tokenSource = startCancelableOperation();\r\n        this.previousTokenSource = tokenSource;\r\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\r\n    }\r\n\r\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\r\n        return this.enqueue(this.readQueue, action);\r\n    }\r\n\r\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken = CancellationToken.None): Promise<T> {\r\n        const deferred = new Deferred<unknown>();\r\n        const entry: LockEntry = {\r\n            action,\r\n            deferred,\r\n            cancellationToken\r\n        };\r\n        queue.push(entry);\r\n        this.performNextOperation();\r\n        return deferred.promise as Promise<T>;\r\n    }\r\n\r\n    private async performNextOperation(): Promise<void> {\r\n        if (!this.done) {\r\n            return;\r\n        }\r\n        const entries: LockEntry[] = [];\r\n        if (this.writeQueue.length > 0) {\r\n            // Just perform the next write action\r\n            entries.push(this.writeQueue.shift()!);\r\n        } else if (this.readQueue.length > 0) {\r\n            // Empty the read queue and perform all actions in parallel\r\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\r\n        } else {\r\n            return;\r\n        }\r\n        this.done = false;\r\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\r\n            try {\r\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\r\n                const result = await Promise.resolve().then(() => action(cancellationToken));\r\n                deferred.resolve(result);\r\n            } catch (err) {\r\n                if (isOperationCancelled(err)) {\r\n                    // If the operation was cancelled, we don't want to reject the promise\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            }\r\n        }));\r\n        this.done = true;\r\n        this.performNextOperation();\r\n    }\r\n\r\n    cancelWrite(): void {\r\n        this.previousTokenSource.cancel();\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2024 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\r\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { Lexer } from '../parser/lexer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\r\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { BiMap } from '../utils/collections.js';\r\nimport { streamCst } from '../utils/cst-utils.js';\r\nimport type { LexingReport } from '../parser/token-builder.js';\r\n\r\n/**\r\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\r\n */\r\nexport interface Hydrator {\r\n    /**\r\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\r\n     */\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\r\n    /**\r\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\r\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\r\n     */\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\r\n}\r\n\r\nexport interface DehydrateContext {\r\n    astNodes: Map<AstNode, any>;\r\n    cstNodes: Map<CstNode, any>;\r\n}\r\n\r\nexport interface HydrateContext {\r\n    astNodes: Map<any, AstNode>;\r\n    cstNodes: Map<any, CstNode>;\r\n}\r\n\r\nexport class DefaultHydrator implements Hydrator {\r\n\r\n    protected readonly grammar: Grammar;\r\n    protected readonly lexer: Lexer;\r\n    protected readonly linker: Linker;\r\n\r\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\r\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammar = services.Grammar;\r\n        this.lexer = services.parser.Lexer;\r\n        this.linker = services.references.Linker;\r\n    }\r\n\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\r\n            // We need to create shallow copies of the errors\r\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\r\n            parserErrors: result.parserErrors.map(e => ({ ...e, message: e.message })),\r\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\r\n        };\r\n    }\r\n\r\n    protected dehydrateLexerReport(lexerReport: LexingReport): LexingReport {\r\n        // By default, lexer reports are serializable\r\n        return lexerReport;\r\n    }\r\n\r\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\r\n        const astNodes = new Map<AstNode, any>();\r\n        const cstNodes = new Map<CstNode, any>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {});\r\n        }\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                cstNodes.set(cstNode, {});\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\r\n        const obj = context.astNodes.get(node) as Record<string, any>;\r\n        obj.$type = node.$type;\r\n        obj.$containerIndex = node.$containerIndex;\r\n        obj.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode !== undefined) {\r\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: any[] = [];\r\n                obj[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.dehydrateAstNode(item, context));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.dehydrateReference(item, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                obj[name] = this.dehydrateAstNode(value, context);\r\n            } else if (isReference(value)) {\r\n                obj[name] = this.dehydrateReference(value, context);\r\n            } else if (value !== undefined) {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\r\n        const obj: Record<string, unknown> = {};\r\n        obj.$refText = reference.$refText;\r\n        if (reference.$refNode) {\r\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\r\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\r\n        if (isRootCstNode(node)) {\r\n            cstNode.fullText = node.fullText;\r\n        } else {\r\n            // Note: This returns undefined for hidden nodes (i.e. comments)\r\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\r\n        }\r\n        cstNode.hidden = node.hidden;\r\n        cstNode.astNode = context.astNodes.get(node.astNode);\r\n        if (isCompositeCstNode(node)) {\r\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\r\n        } else if (isLeafCstNode(node)) {\r\n            cstNode.tokenType = node.tokenType.name;\r\n            cstNode.offset = node.offset;\r\n            cstNode.length = node.length;\r\n            cstNode.startLine = node.range.start.line;\r\n            cstNode.startColumn = node.range.start.character;\r\n            cstNode.endLine = node.range.end.line;\r\n            cstNode.endColumn = node.range.end.character;\r\n        }\r\n        return cstNode;\r\n    }\r\n\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\r\n        const node = result.value;\r\n        const context = this.createHydrationContext(node);\r\n        if ('$cstNode' in node) {\r\n            this.hydrateCstNode(node.$cstNode, context);\r\n        }\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport,\r\n            parserErrors: result.parserErrors,\r\n            value: this.hydrateAstNode(node, context) as T\r\n        };\r\n    }\r\n\r\n    protected createHydrationContext(node: any): HydrateContext {\r\n        const astNodes = new Map<any, AstNode>();\r\n        const cstNodes = new Map<any, CstNode>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {} as AstNode);\r\n        }\r\n        let root: RootCstNode;\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                let cst: Mutable<CstNode> | undefined;\r\n                if ('fullText' in cstNode) {\r\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\r\n                    root = cst as RootCstNode;\r\n                } else if ('content' in cstNode) {\r\n                    cst = new CompositeCstNodeImpl();\r\n                } else if ('tokenType' in cstNode) {\r\n                    cst = this.hydrateCstLeafNode(cstNode);\r\n                }\r\n                if (cst) {\r\n                    cstNodes.set(cstNode, cst);\r\n                    cst.root = root!;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\r\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\r\n        astNode.$type = node.$type;\r\n        astNode.$containerIndex = node.$containerIndex;\r\n        astNode.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode) {\r\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: unknown[] = [];\r\n                astNode[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.hydrateReference(item, astNode, name, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\r\n            } else if (isReference(value)) {\r\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\r\n            } else if (value !== undefined) {\r\n                astNode[name] = value;\r\n            }\r\n        }\r\n        return astNode;\r\n    }\r\n\r\n    protected setParent(node: any, parent: any): any {\r\n        node.$container = parent as AstNode;\r\n        return node;\r\n    }\r\n\r\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\r\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\r\n    }\r\n\r\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\r\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\r\n        if (typeof cstNode.grammarSource === 'number') {\r\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\r\n        }\r\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\r\n        if (isCompositeCstNode(cstNodeObj)) {\r\n            for (const child of cstNode.content) {\r\n                const hydrated = this.hydrateCstNode(child, context, num++);\r\n                cstNodeObj.content.push(hydrated);\r\n            }\r\n        }\r\n        return cstNodeObj;\r\n    }\r\n\r\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\r\n        const tokenType = this.getTokenType(cstNode.tokenType);\r\n        const offset = cstNode.offset;\r\n        const length = cstNode.length;\r\n        const startLine = cstNode.startLine;\r\n        const startColumn = cstNode.startColumn;\r\n        const endLine = cstNode.endLine;\r\n        const endColumn = cstNode.endColumn;\r\n        const hidden = cstNode.hidden;\r\n        const node = new LeafCstNodeImpl(\r\n            offset,\r\n            length,\r\n            {\r\n                start: {\r\n                    line: startLine,\r\n                    character: startColumn\r\n                },\r\n                end: {\r\n                    line: endLine,\r\n                    character: endColumn\r\n                }\r\n            },\r\n            tokenType,\r\n            hidden\r\n        );\r\n        return node;\r\n    }\r\n\r\n    protected getTokenType(name: string): TokenType {\r\n        return this.lexer.definition[name];\r\n    }\r\n\r\n    protected getGrammarElementId(node: AbstractElement | undefined): number | undefined {\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        return this.grammarElementIdMap.get(node);\r\n    }\r\n\r\n    protected getGrammarElement(id: number): AbstractElement | undefined {\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        const element = this.grammarElementIdMap.getKey(id);\r\n        return element;\r\n    }\r\n\r\n    protected createGrammarElementIdMap(): void {\r\n        let id = 0;\r\n        for (const element of streamAst(this.grammar)) {\r\n            if (isAbstractElement(element)) {\r\n                this.grammarElementIdMap.set(element, id++);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\r\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { isMultilineComment } from '../utils/regexp-utils.js';\r\nimport { isTerminalRule } from './generated/ast.js';\r\n\r\nexport interface GrammarConfig {\r\n    /**\r\n     * Lists all rule names which are classified as multiline comment rules\r\n     */\r\n    multilineCommentRules: string[]\r\n    /**\r\n     * A regular expression which matches characters of names\r\n     */\r\n    nameRegexp: RegExp\r\n}\r\n\r\n/**\r\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\r\n * language-specific module.\r\n */\r\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\r\n    const rules: string[] = [];\r\n    const grammar = services.Grammar;\r\n    for (const rule of grammar.rules) {\r\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\r\n            rules.push(rule.name);\r\n        }\r\n    }\r\n    return {\r\n        multilineCommentRules: rules,\r\n        nameRegexp: DefaultNameRegexp\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumCompletionParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumCompletionParser(services);\r\n    createParser(grammar, parser, lexer.definition);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * A `Module<I>` is a description of possibly grouped service factories.\r\n *\r\n * Given a type I = { group: { service: A } },\r\n * Module<I> := { group: { service: (injector: I) => A } }\r\n *\r\n * Making `I` available during the creation of `I` allows us to create cyclic\r\n * dependencies.\r\n */\r\nexport type Module<I, T = I> = {\r\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\r\n}\r\n\r\nexport namespace Module {\r\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\r\n}\r\n\r\n/**\r\n * Given a set of modules, the inject function returns a lazily evaluated injector\r\n * that injects dependencies into the requested service when it is requested the\r\n * first time. Subsequent requests will return the same service.\r\n *\r\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\r\n * by injecting a provider `() => T` instead of a `T`.\r\n *\r\n * Please note that the arguments may be objects or arrays. However, the result will\r\n * be an object. Using it with for..of will have no effect.\r\n *\r\n * @param module1 first Module\r\n * @param module2 (optional) second Module\r\n * @param module3 (optional) third Module\r\n * @param module4 (optional) fourth Module\r\n * @param module5 (optional) fifth Module\r\n * @param module6 (optional) sixth Module\r\n * @param module7 (optional) seventh Module\r\n * @param module8 (optional) eighth Module\r\n * @param module9 (optional) ninth Module\r\n * @returns a new object of type I\r\n */\r\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\r\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\r\n): I {\r\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\r\n    return _inject(module);\r\n}\r\n\r\nconst isProxy = Symbol('isProxy');\r\n\r\n/**\r\n * Eagerly load all services in the given dependency injection container. This is sometimes\r\n * necessary because services can register event listeners in their constructors.\r\n */\r\nexport function eagerLoad<T>(item: T): T {\r\n    if (item && (item as any)[isProxy]) {\r\n        for (const value of Object.values(item)) {\r\n            eagerLoad(value);\r\n        }\r\n    }\r\n    return item;\r\n}\r\n\r\n/**\r\n * Helper function that returns an injector by creating a proxy.\r\n * Invariant: injector is of type I. If injector is undefined, then T = I.\r\n */\r\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\r\n    const proxy: any = new Proxy({} as any, {\r\n        deleteProperty: () => false,\r\n        set: () => {\r\n            throw new Error('Cannot set property on injected service container');\r\n        },\r\n        get: (obj, prop) => {\r\n            if (prop === isProxy) {\r\n                return true;\r\n            } else {\r\n                return _resolve(obj, prop, module, injector || proxy);\r\n            }\r\n        },\r\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\r\n        has: (_, prop) => prop in module, // used by ..in..\r\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\r\n    });\r\n    return proxy;\r\n}\r\n\r\n/**\r\n * Internally used to tag a requested dependency, directly before calling the factory.\r\n * This allows us to find cycles during instance creation.\r\n */\r\nconst __requested__ = Symbol();\r\n\r\n/**\r\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\r\n * the module description. The result of service factories is cached. Groups are\r\n * recursively proxied.\r\n *\r\n * @param obj an object holding all group proxies and services\r\n * @param prop the key of a value within obj\r\n * @param module an object containing groups and service factories\r\n * @param injector the first level proxy that provides access to all values\r\n * @returns the requested value `obj[prop]`\r\n * @throws Error if a dependency cycle is detected\r\n */\r\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\r\n    if (prop in obj) {\r\n        if (obj[prop] instanceof Error) {\r\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\r\n        }\r\n        if (obj[prop] === __requested__) {\r\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\r\n        }\r\n        return obj[prop];\r\n    } else if (prop in module) {\r\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\r\n        obj[prop] = __requested__;\r\n        try {\r\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\r\n        } catch (error) {\r\n            obj[prop] = error instanceof Error ? error : undefined;\r\n            throw error;\r\n        }\r\n        return obj[prop];\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a deep-merge of two modules by writing source entries into the target module.\r\n *\r\n * @param target the module which is written\r\n * @param source the module which is read\r\n * @returns the target module\r\n */\r\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\r\n    if (source) {\r\n        for (const [key, value2] of Object.entries(source)) {\r\n            if (value2 !== undefined) {\r\n                const value1 = target[key];\r\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\r\n                    target[key] = _merge(value1, value2);\r\n                } else {\r\n                    target[key] = value2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.3.0.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\r\nimport { AbstractAstReflection } from '../../syntax-tree.js';\r\n\r\nexport const LangiumGrammarTerminals = {\r\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\r\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\r\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\r\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\r\n    WS: /\\s+/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type LangiumGrammarTerminalNames = keyof typeof LangiumGrammarTerminals;\r\n\r\nexport type LangiumGrammarKeywordNames = \r\n    | \"!\"\r\n    | \"&\"\r\n    | \"(\"\r\n    | \")\"\r\n    | \"*\"\r\n    | \"+\"\r\n    | \"+=\"\r\n    | \",\"\r\n    | \"->\"\r\n    | \".\"\r\n    | \"..\"\r\n    | \":\"\r\n    | \";\"\r\n    | \"<\"\r\n    | \"=\"\r\n    | \"=>\"\r\n    | \">\"\r\n    | \"?\"\r\n    | \"?!\"\r\n    | \"?<!\"\r\n    | \"?<=\"\r\n    | \"?=\"\r\n    | \"@\"\r\n    | \"Date\"\r\n    | \"EOF\"\r\n    | \"[\"\r\n    | \"]\"\r\n    | \"bigint\"\r\n    | \"boolean\"\r\n    | \"current\"\r\n    | \"entry\"\r\n    | \"extends\"\r\n    | \"false\"\r\n    | \"fragment\"\r\n    | \"grammar\"\r\n    | \"hidden\"\r\n    | \"import\"\r\n    | \"infer\"\r\n    | \"infers\"\r\n    | \"interface\"\r\n    | \"number\"\r\n    | \"returns\"\r\n    | \"string\"\r\n    | \"terminal\"\r\n    | \"true\"\r\n    | \"type\"\r\n    | \"with\"\r\n    | \"{\"\r\n    | \"|\"\r\n    | \"}\";\r\n\r\nexport type LangiumGrammarTokenNames = LangiumGrammarTerminalNames | LangiumGrammarKeywordNames;\r\n\r\nexport type AbstractRule = ParserRule | TerminalRule;\r\n\r\nexport const AbstractRule = 'AbstractRule';\r\n\r\nexport function isAbstractRule(item: unknown): item is AbstractRule {\r\n    return reflection.isInstance(item, AbstractRule);\r\n}\r\n\r\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\r\n\r\nexport const AbstractType = 'AbstractType';\r\n\r\nexport function isAbstractType(item: unknown): item is AbstractType {\r\n    return reflection.isInstance(item, AbstractType);\r\n}\r\n\r\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\r\n\r\nexport const Condition = 'Condition';\r\n\r\nexport function isCondition(item: unknown): item is Condition {\r\n    return reflection.isInstance(item, Condition);\r\n}\r\n\r\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\r\n\r\nexport function isFeatureName(item: unknown): item is FeatureName {\r\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\r\n}\r\n\r\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\r\n\r\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\r\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\r\n}\r\n\r\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\r\n\r\nexport const TypeDefinition = 'TypeDefinition';\r\n\r\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\r\n    return reflection.isInstance(item, TypeDefinition);\r\n}\r\n\r\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\r\n\r\nexport const ValueLiteral = 'ValueLiteral';\r\n\r\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\r\n    return reflection.isInstance(item, ValueLiteral);\r\n}\r\n\r\nexport interface AbstractElement extends AstNode {\r\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\r\n    cardinality?: '*' | '+' | '?';\r\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\r\n}\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport interface ArrayLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'ArrayLiteral';\r\n    elements: Array<ValueLiteral>;\r\n}\r\n\r\nexport const ArrayLiteral = 'ArrayLiteral';\r\n\r\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\r\n    return reflection.isInstance(item, ArrayLiteral);\r\n}\r\n\r\nexport interface ArrayType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ArrayType';\r\n    elementType: TypeDefinition;\r\n}\r\n\r\nexport const ArrayType = 'ArrayType';\r\n\r\nexport function isArrayType(item: unknown): item is ArrayType {\r\n    return reflection.isInstance(item, ArrayType);\r\n}\r\n\r\nexport interface BooleanLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\r\n    readonly $type: 'BooleanLiteral';\r\n    true: boolean;\r\n}\r\n\r\nexport const BooleanLiteral = 'BooleanLiteral';\r\n\r\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\r\n    return reflection.isInstance(item, BooleanLiteral);\r\n}\r\n\r\nexport interface Conjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Conjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Conjunction = 'Conjunction';\r\n\r\nexport function isConjunction(item: unknown): item is Conjunction {\r\n    return reflection.isInstance(item, Conjunction);\r\n}\r\n\r\nexport interface Disjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Disjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Disjunction = 'Disjunction';\r\n\r\nexport function isDisjunction(item: unknown): item is Disjunction {\r\n    return reflection.isInstance(item, Disjunction);\r\n}\r\n\r\nexport interface Grammar extends AstNode {\r\n    readonly $type: 'Grammar';\r\n    definesHiddenTokens: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    imports: Array<GrammarImport>;\r\n    interfaces: Array<Interface>;\r\n    isDeclared: boolean;\r\n    name?: string;\r\n    rules: Array<AbstractRule>;\r\n    types: Array<Type>;\r\n    usedGrammars: Array<Reference<Grammar>>;\r\n}\r\n\r\nexport const Grammar = 'Grammar';\r\n\r\nexport function isGrammar(item: unknown): item is Grammar {\r\n    return reflection.isInstance(item, Grammar);\r\n}\r\n\r\nexport interface GrammarImport extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'GrammarImport';\r\n    path: string;\r\n}\r\n\r\nexport const GrammarImport = 'GrammarImport';\r\n\r\nexport function isGrammarImport(item: unknown): item is GrammarImport {\r\n    return reflection.isInstance(item, GrammarImport);\r\n}\r\n\r\nexport interface InferredType extends AstNode {\r\n    readonly $container: Action | ParserRule;\r\n    readonly $type: 'InferredType';\r\n    name: string;\r\n}\r\n\r\nexport const InferredType = 'InferredType';\r\n\r\nexport function isInferredType(item: unknown): item is InferredType {\r\n    return reflection.isInstance(item, InferredType);\r\n}\r\n\r\nexport interface Interface extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Interface';\r\n    attributes: Array<TypeAttribute>;\r\n    name: string;\r\n    superTypes: Array<Reference<AbstractType>>;\r\n}\r\n\r\nexport const Interface = 'Interface';\r\n\r\nexport function isInterface(item: unknown): item is Interface {\r\n    return reflection.isInstance(item, Interface);\r\n}\r\n\r\nexport interface NamedArgument extends AstNode {\r\n    readonly $container: RuleCall;\r\n    readonly $type: 'NamedArgument';\r\n    calledByName: boolean;\r\n    parameter?: Reference<Parameter>;\r\n    value: Condition;\r\n}\r\n\r\nexport const NamedArgument = 'NamedArgument';\r\n\r\nexport function isNamedArgument(item: unknown): item is NamedArgument {\r\n    return reflection.isInstance(item, NamedArgument);\r\n}\r\n\r\nexport interface Negation extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Negation';\r\n    value: Condition;\r\n}\r\n\r\nexport const Negation = 'Negation';\r\n\r\nexport function isNegation(item: unknown): item is Negation {\r\n    return reflection.isInstance(item, Negation);\r\n}\r\n\r\nexport interface NumberLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'NumberLiteral';\r\n    value: number;\r\n}\r\n\r\nexport const NumberLiteral = 'NumberLiteral';\r\n\r\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\r\n    return reflection.isInstance(item, NumberLiteral);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: ParserRule;\r\n    readonly $type: 'Parameter';\r\n    name: string;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface ParameterReference extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'ParameterReference';\r\n    parameter: Reference<Parameter>;\r\n}\r\n\r\nexport const ParameterReference = 'ParameterReference';\r\n\r\nexport function isParameterReference(item: unknown): item is ParameterReference {\r\n    return reflection.isInstance(item, ParameterReference);\r\n}\r\n\r\nexport interface ParserRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'ParserRule';\r\n    dataType?: PrimitiveType;\r\n    definesHiddenTokens: boolean;\r\n    definition: AbstractElement;\r\n    entry: boolean;\r\n    fragment: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    inferredType?: InferredType;\r\n    name: string;\r\n    parameters: Array<Parameter>;\r\n    returnType?: Reference<AbstractType>;\r\n    wildcard: boolean;\r\n}\r\n\r\nexport const ParserRule = 'ParserRule';\r\n\r\nexport function isParserRule(item: unknown): item is ParserRule {\r\n    return reflection.isInstance(item, ParserRule);\r\n}\r\n\r\nexport interface ReferenceType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ReferenceType';\r\n    referenceType: TypeDefinition;\r\n}\r\n\r\nexport const ReferenceType = 'ReferenceType';\r\n\r\nexport function isReferenceType(item: unknown): item is ReferenceType {\r\n    return reflection.isInstance(item, ReferenceType);\r\n}\r\n\r\nexport interface ReturnType extends AstNode {\r\n    readonly $container: TerminalRule;\r\n    readonly $type: 'ReturnType';\r\n    name: PrimitiveType | string;\r\n}\r\n\r\nexport const ReturnType = 'ReturnType';\r\n\r\nexport function isReturnType(item: unknown): item is ReturnType {\r\n    return reflection.isInstance(item, ReturnType);\r\n}\r\n\r\nexport interface SimpleType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'SimpleType';\r\n    primitiveType?: PrimitiveType;\r\n    stringType?: string;\r\n    typeRef?: Reference<AbstractType>;\r\n}\r\n\r\nexport const SimpleType = 'SimpleType';\r\n\r\nexport function isSimpleType(item: unknown): item is SimpleType {\r\n    return reflection.isInstance(item, SimpleType);\r\n}\r\n\r\nexport interface StringLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'StringLiteral';\r\n    value: string;\r\n}\r\n\r\nexport const StringLiteral = 'StringLiteral';\r\n\r\nexport function isStringLiteral(item: unknown): item is StringLiteral {\r\n    return reflection.isInstance(item, StringLiteral);\r\n}\r\n\r\nexport interface TerminalRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'TerminalRule';\r\n    definition: AbstractElement;\r\n    fragment: boolean;\r\n    hidden: boolean;\r\n    name: string;\r\n    type?: ReturnType;\r\n}\r\n\r\nexport const TerminalRule = 'TerminalRule';\r\n\r\nexport function isTerminalRule(item: unknown): item is TerminalRule {\r\n    return reflection.isInstance(item, TerminalRule);\r\n}\r\n\r\nexport interface Type extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Type';\r\n    name: string;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const Type = 'Type';\r\n\r\nexport function isType(item: unknown): item is Type {\r\n    return reflection.isInstance(item, Type);\r\n}\r\n\r\nexport interface TypeAttribute extends AstNode {\r\n    readonly $container: Interface;\r\n    readonly $type: 'TypeAttribute';\r\n    defaultValue?: ValueLiteral;\r\n    isOptional: boolean;\r\n    name: FeatureName;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const TypeAttribute = 'TypeAttribute';\r\n\r\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\r\n    return reflection.isInstance(item, TypeAttribute);\r\n}\r\n\r\nexport interface UnionType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'UnionType';\r\n    types: Array<TypeDefinition>;\r\n}\r\n\r\nexport const UnionType = 'UnionType';\r\n\r\nexport function isUnionType(item: unknown): item is UnionType {\r\n    return reflection.isInstance(item, UnionType);\r\n}\r\n\r\nexport interface Action extends AbstractElement {\r\n    readonly $type: 'Action';\r\n    feature?: FeatureName;\r\n    inferredType?: InferredType;\r\n    operator?: '+=' | '=';\r\n    type?: Reference<AbstractType>;\r\n}\r\n\r\nexport const Action = 'Action';\r\n\r\nexport function isAction(item: unknown): item is Action {\r\n    return reflection.isInstance(item, Action);\r\n}\r\n\r\nexport interface Alternatives extends AbstractElement {\r\n    readonly $type: 'Alternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const Alternatives = 'Alternatives';\r\n\r\nexport function isAlternatives(item: unknown): item is Alternatives {\r\n    return reflection.isInstance(item, Alternatives);\r\n}\r\n\r\nexport interface Assignment extends AbstractElement {\r\n    readonly $type: 'Assignment';\r\n    feature: FeatureName;\r\n    operator: '+=' | '=' | '?=';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const Assignment = 'Assignment';\r\n\r\nexport function isAssignment(item: unknown): item is Assignment {\r\n    return reflection.isInstance(item, Assignment);\r\n}\r\n\r\nexport interface CharacterRange extends AbstractElement {\r\n    readonly $type: 'CharacterRange';\r\n    left: Keyword;\r\n    right?: Keyword;\r\n}\r\n\r\nexport const CharacterRange = 'CharacterRange';\r\n\r\nexport function isCharacterRange(item: unknown): item is CharacterRange {\r\n    return reflection.isInstance(item, CharacterRange);\r\n}\r\n\r\nexport interface CrossReference extends AbstractElement {\r\n    readonly $type: 'CrossReference';\r\n    deprecatedSyntax: boolean;\r\n    terminal?: AbstractElement;\r\n    type: Reference<AbstractType>;\r\n}\r\n\r\nexport const CrossReference = 'CrossReference';\r\n\r\nexport function isCrossReference(item: unknown): item is CrossReference {\r\n    return reflection.isInstance(item, CrossReference);\r\n}\r\n\r\nexport interface EndOfFile extends AbstractElement {\r\n    readonly $type: 'EndOfFile';\r\n}\r\n\r\nexport const EndOfFile = 'EndOfFile';\r\n\r\nexport function isEndOfFile(item: unknown): item is EndOfFile {\r\n    return reflection.isInstance(item, EndOfFile);\r\n}\r\n\r\nexport interface Group extends AbstractElement {\r\n    readonly $type: 'Group';\r\n    elements: Array<AbstractElement>;\r\n    guardCondition?: Condition;\r\n}\r\n\r\nexport const Group = 'Group';\r\n\r\nexport function isGroup(item: unknown): item is Group {\r\n    return reflection.isInstance(item, Group);\r\n}\r\n\r\nexport interface Keyword extends AbstractElement {\r\n    readonly $container: CharacterRange;\r\n    readonly $type: 'Keyword';\r\n    value: string;\r\n}\r\n\r\nexport const Keyword = 'Keyword';\r\n\r\nexport function isKeyword(item: unknown): item is Keyword {\r\n    return reflection.isInstance(item, Keyword);\r\n}\r\n\r\nexport interface NegatedToken extends AbstractElement {\r\n    readonly $type: 'NegatedToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const NegatedToken = 'NegatedToken';\r\n\r\nexport function isNegatedToken(item: unknown): item is NegatedToken {\r\n    return reflection.isInstance(item, NegatedToken);\r\n}\r\n\r\nexport interface RegexToken extends AbstractElement {\r\n    readonly $type: 'RegexToken';\r\n    regex: string;\r\n}\r\n\r\nexport const RegexToken = 'RegexToken';\r\n\r\nexport function isRegexToken(item: unknown): item is RegexToken {\r\n    return reflection.isInstance(item, RegexToken);\r\n}\r\n\r\nexport interface RuleCall extends AbstractElement {\r\n    readonly $type: 'RuleCall';\r\n    arguments: Array<NamedArgument>;\r\n    rule: Reference<AbstractRule>;\r\n}\r\n\r\nexport const RuleCall = 'RuleCall';\r\n\r\nexport function isRuleCall(item: unknown): item is RuleCall {\r\n    return reflection.isInstance(item, RuleCall);\r\n}\r\n\r\nexport interface TerminalAlternatives extends AbstractElement {\r\n    readonly $type: 'TerminalAlternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalAlternatives = 'TerminalAlternatives';\r\n\r\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\r\n    return reflection.isInstance(item, TerminalAlternatives);\r\n}\r\n\r\nexport interface TerminalGroup extends AbstractElement {\r\n    readonly $type: 'TerminalGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalGroup = 'TerminalGroup';\r\n\r\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\r\n    return reflection.isInstance(item, TerminalGroup);\r\n}\r\n\r\nexport interface TerminalRuleCall extends AbstractElement {\r\n    readonly $type: 'TerminalRuleCall';\r\n    rule: Reference<TerminalRule>;\r\n}\r\n\r\nexport const TerminalRuleCall = 'TerminalRuleCall';\r\n\r\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\r\n    return reflection.isInstance(item, TerminalRuleCall);\r\n}\r\n\r\nexport interface UnorderedGroup extends AbstractElement {\r\n    readonly $type: 'UnorderedGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const UnorderedGroup = 'UnorderedGroup';\r\n\r\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\r\n    return reflection.isInstance(item, UnorderedGroup);\r\n}\r\n\r\nexport interface UntilToken extends AbstractElement {\r\n    readonly $type: 'UntilToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const UntilToken = 'UntilToken';\r\n\r\nexport function isUntilToken(item: unknown): item is UntilToken {\r\n    return reflection.isInstance(item, UntilToken);\r\n}\r\n\r\nexport interface Wildcard extends AbstractElement {\r\n    readonly $type: 'Wildcard';\r\n}\r\n\r\nexport const Wildcard = 'Wildcard';\r\n\r\nexport function isWildcard(item: unknown): item is Wildcard {\r\n    return reflection.isInstance(item, Wildcard);\r\n}\r\n\r\nexport type LangiumGrammarAstType = {\r\n    AbstractElement: AbstractElement\r\n    AbstractRule: AbstractRule\r\n    AbstractType: AbstractType\r\n    Action: Action\r\n    Alternatives: Alternatives\r\n    ArrayLiteral: ArrayLiteral\r\n    ArrayType: ArrayType\r\n    Assignment: Assignment\r\n    BooleanLiteral: BooleanLiteral\r\n    CharacterRange: CharacterRange\r\n    Condition: Condition\r\n    Conjunction: Conjunction\r\n    CrossReference: CrossReference\r\n    Disjunction: Disjunction\r\n    EndOfFile: EndOfFile\r\n    Grammar: Grammar\r\n    GrammarImport: GrammarImport\r\n    Group: Group\r\n    InferredType: InferredType\r\n    Interface: Interface\r\n    Keyword: Keyword\r\n    NamedArgument: NamedArgument\r\n    NegatedToken: NegatedToken\r\n    Negation: Negation\r\n    NumberLiteral: NumberLiteral\r\n    Parameter: Parameter\r\n    ParameterReference: ParameterReference\r\n    ParserRule: ParserRule\r\n    ReferenceType: ReferenceType\r\n    RegexToken: RegexToken\r\n    ReturnType: ReturnType\r\n    RuleCall: RuleCall\r\n    SimpleType: SimpleType\r\n    StringLiteral: StringLiteral\r\n    TerminalAlternatives: TerminalAlternatives\r\n    TerminalGroup: TerminalGroup\r\n    TerminalRule: TerminalRule\r\n    TerminalRuleCall: TerminalRuleCall\r\n    Type: Type\r\n    TypeAttribute: TypeAttribute\r\n    TypeDefinition: TypeDefinition\r\n    UnionType: UnionType\r\n    UnorderedGroup: UnorderedGroup\r\n    UntilToken: UntilToken\r\n    ValueLiteral: ValueLiteral\r\n    Wildcard: Wildcard\r\n}\r\n\r\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Action:\r\n            case Alternatives:\r\n            case Assignment:\r\n            case CharacterRange:\r\n            case CrossReference:\r\n            case EndOfFile:\r\n            case Group:\r\n            case Keyword:\r\n            case NegatedToken:\r\n            case RegexToken:\r\n            case RuleCall:\r\n            case TerminalAlternatives:\r\n            case TerminalGroup:\r\n            case TerminalRuleCall:\r\n            case UnorderedGroup:\r\n            case UntilToken:\r\n            case Wildcard: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ArrayLiteral:\r\n            case NumberLiteral:\r\n            case StringLiteral: {\r\n                return this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case ArrayType:\r\n            case ReferenceType:\r\n            case SimpleType:\r\n            case UnionType: {\r\n                return this.isSubtype(TypeDefinition, supertype);\r\n            }\r\n            case BooleanLiteral: {\r\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case Conjunction:\r\n            case Disjunction:\r\n            case Negation:\r\n            case ParameterReference: {\r\n                return this.isSubtype(Condition, supertype);\r\n            }\r\n            case InferredType:\r\n            case Interface:\r\n            case Type: {\r\n                return this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case ParserRule: {\r\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case TerminalRule: {\r\n                return this.isSubtype(AbstractRule, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Action:type':\r\n            case 'CrossReference:type':\r\n            case 'Interface:superTypes':\r\n            case 'ParserRule:returnType':\r\n            case 'SimpleType:typeRef': {\r\n                return AbstractType;\r\n            }\r\n            case 'Grammar:hiddenTokens':\r\n            case 'ParserRule:hiddenTokens':\r\n            case 'RuleCall:rule': {\r\n                return AbstractRule;\r\n            }\r\n            case 'Grammar:usedGrammars': {\r\n                return Grammar;\r\n            }\r\n            case 'NamedArgument:parameter':\r\n            case 'ParameterReference:parameter': {\r\n                return Parameter;\r\n            }\r\n            case 'TerminalRuleCall:rule': {\r\n                return TerminalRule;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case AbstractElement: {\r\n                return {\r\n                    name: AbstractElement,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayLiteral: {\r\n                return {\r\n                    name: ArrayLiteral,\r\n                    properties: [\r\n                        { name: 'elements', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayType: {\r\n                return {\r\n                    name: ArrayType,\r\n                    properties: [\r\n                        { name: 'elementType' }\r\n                    ]\r\n                };\r\n            }\r\n            case BooleanLiteral: {\r\n                return {\r\n                    name: BooleanLiteral,\r\n                    properties: [\r\n                        { name: 'true', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case Conjunction: {\r\n                return {\r\n                    name: Conjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Disjunction: {\r\n                return {\r\n                    name: Disjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Grammar: {\r\n                return {\r\n                    name: Grammar,\r\n                    properties: [\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'imports', defaultValue: [] },\r\n                        { name: 'interfaces', defaultValue: [] },\r\n                        { name: 'isDeclared', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'rules', defaultValue: [] },\r\n                        { name: 'types', defaultValue: [] },\r\n                        { name: 'usedGrammars', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case GrammarImport: {\r\n                return {\r\n                    name: GrammarImport,\r\n                    properties: [\r\n                        { name: 'path' }\r\n                    ]\r\n                };\r\n            }\r\n            case InferredType: {\r\n                return {\r\n                    name: InferredType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case Interface: {\r\n                return {\r\n                    name: Interface,\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'name' },\r\n                        { name: 'superTypes', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case NamedArgument: {\r\n                return {\r\n                    name: NamedArgument,\r\n                    properties: [\r\n                        { name: 'calledByName', defaultValue: false },\r\n                        { name: 'parameter' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Negation: {\r\n                return {\r\n                    name: Negation,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NumberLiteral: {\r\n                return {\r\n                    name: NumberLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Parameter: {\r\n                return {\r\n                    name: Parameter,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParameterReference: {\r\n                return {\r\n                    name: ParameterReference,\r\n                    properties: [\r\n                        { name: 'parameter' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParserRule: {\r\n                return {\r\n                    name: ParserRule,\r\n                    properties: [\r\n                        { name: 'dataType' },\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'definition' },\r\n                        { name: 'entry', defaultValue: false },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'inferredType' },\r\n                        { name: 'name' },\r\n                        { name: 'parameters', defaultValue: [] },\r\n                        { name: 'returnType' },\r\n                        { name: 'wildcard', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case ReferenceType: {\r\n                return {\r\n                    name: ReferenceType,\r\n                    properties: [\r\n                        { name: 'referenceType' }\r\n                    ]\r\n                };\r\n            }\r\n            case ReturnType: {\r\n                return {\r\n                    name: ReturnType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case SimpleType: {\r\n                return {\r\n                    name: SimpleType,\r\n                    properties: [\r\n                        { name: 'primitiveType' },\r\n                        { name: 'stringType' },\r\n                        { name: 'typeRef' }\r\n                    ]\r\n                };\r\n            }\r\n            case StringLiteral: {\r\n                return {\r\n                    name: StringLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRule: {\r\n                return {\r\n                    name: TerminalRule,\r\n                    properties: [\r\n                        { name: 'definition' },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hidden', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Type: {\r\n                return {\r\n                    name: Type,\r\n                    properties: [\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case TypeAttribute: {\r\n                return {\r\n                    name: TypeAttribute,\r\n                    properties: [\r\n                        { name: 'defaultValue' },\r\n                        { name: 'isOptional', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnionType: {\r\n                return {\r\n                    name: UnionType,\r\n                    properties: [\r\n                        { name: 'types', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case Action: {\r\n                return {\r\n                    name: Action,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'inferredType' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Alternatives: {\r\n                return {\r\n                    name: Alternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Assignment: {\r\n                return {\r\n                    name: Assignment,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case CharacterRange: {\r\n                return {\r\n                    name: CharacterRange,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'left' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case CrossReference: {\r\n                return {\r\n                    name: CrossReference,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'deprecatedSyntax', defaultValue: false },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case EndOfFile: {\r\n                return {\r\n                    name: EndOfFile,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Group: {\r\n                return {\r\n                    name: Group,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'guardCondition' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Keyword: {\r\n                return {\r\n                    name: Keyword,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NegatedToken: {\r\n                return {\r\n                    name: NegatedToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case RegexToken: {\r\n                return {\r\n                    name: RegexToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'regex' }\r\n                    ]\r\n                };\r\n            }\r\n            case RuleCall: {\r\n                return {\r\n                    name: RuleCall,\r\n                    properties: [\r\n                        { name: 'arguments', defaultValue: [] },\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalAlternatives: {\r\n                return {\r\n                    name: TerminalAlternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalGroup: {\r\n                return {\r\n                    name: TerminalGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRuleCall: {\r\n                return {\r\n                    name: TerminalRuleCall,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnorderedGroup: {\r\n                return {\r\n                    name: UnorderedGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case UntilToken: {\r\n                return {\r\n                    name: UntilToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case Wildcard: {\r\n                return {\r\n                    name: Wildcard,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new LangiumGrammarAstReflection();\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CustomPatternMatcherFunc, ILexingError, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { Lexer } from 'chevrotain';\r\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\r\nimport { streamAllContents } from '../utils/ast-utils.js';\r\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\n\r\nexport interface TokenBuilderOptions {\r\n    caseInsensitive?: boolean\r\n}\r\n\r\nexport interface TokenBuilder {\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\r\n    /**\r\n     * Produces a lexing report for the given text that was just tokenized using the tokens provided by this builder.\r\n     *\r\n     * @param text The text that was tokenized.\r\n     */\r\n    flushLexingReport?(text: string): LexingReport;\r\n}\r\n\r\n/**\r\n * A custom lexing report that can be produced by the token builder during the lexing process.\r\n * Adopters need to ensure that the any custom fields are serializable so they can be sent across worker threads.\r\n */\r\nexport interface LexingReport {\r\n    diagnostics: LexingDiagnostic[];\r\n}\r\n\r\nexport type LexingDiagnosticSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport interface LexingDiagnostic extends ILexingError {\r\n    severity?: LexingDiagnosticSeverity;\r\n}\r\n\r\nexport class DefaultTokenBuilder implements TokenBuilder {\r\n    /**\r\n     * The list of diagnostics stored during the lexing process of a single text.\r\n     */\r\n    protected diagnostics: LexingDiagnostic[] = [];\r\n\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\r\n        const reachableRules = stream(getAllReachableRules(grammar, false));\r\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\r\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\r\n\r\n        terminalTokens.forEach(terminalToken => {\r\n            const pattern = terminalToken.PATTERN;\r\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\r\n                tokens.unshift(terminalToken);\r\n            } else {\r\n                tokens.push(terminalToken);\r\n            }\r\n        });\r\n        // We don't need to add the EOF token explicitly.\r\n        // It is automatically available at the end of the token stream.\r\n        return tokens;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    flushLexingReport(text: string): LexingReport {\r\n        return { diagnostics: this.popDiagnostics() };\r\n    }\r\n\r\n    protected popDiagnostics(): LexingDiagnostic[] {\r\n        const diagnostics = [...this.diagnostics];\r\n        this.diagnostics = [];\r\n        return diagnostics;\r\n    }\r\n\r\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\r\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\r\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\r\n    }\r\n\r\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\r\n        const regex = terminalRegex(terminal);\r\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\r\n        const tokenType: TokenType = {\r\n            name: terminal.name,\r\n            PATTERN: pattern,\r\n        };\r\n        if (typeof pattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n        if (terminal.hidden) {\r\n            // Only skip tokens that are able to accept whitespace\r\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\r\n        }\r\n        return tokenType;\r\n    }\r\n\r\n    protected requiresCustomPattern(regex: RegExp): boolean {\r\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\r\n            // Unicode and dotall regexes are not supported by Chevrotain.\r\n            return true;\r\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\r\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\r\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\r\n        return (text, offset) => {\r\n            stickyRegex.lastIndex = offset;\r\n            const execResult = stickyRegex.exec(text);\r\n            return execResult;\r\n        };\r\n    }\r\n\r\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\r\n        return rules\r\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\r\n            .filter(isParserRule)\r\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\r\n            .distinct(e => e.value).toArray()\r\n            // Sort keywords by descending length\r\n            .sort((a, b) => b.value.length - a.value.length)\r\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\r\n    }\r\n\r\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\r\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\r\n        const tokenType: TokenType = {\r\n            name: keyword.value,\r\n            PATTERN: keywordPattern,\r\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\r\n        };\r\n\r\n        if (typeof keywordPattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n\r\n        return tokenType;\r\n    }\r\n\r\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\r\n        return caseInsensitive ?\r\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\r\n            keyword.value;\r\n    }\r\n\r\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\r\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\r\n            const pattern = token?.PATTERN as RegExp;\r\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\r\n                longerAlts.push(token);\r\n            }\r\n            return longerAlts;\r\n        }, []);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\r\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\r\n\r\n/**\r\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\r\n */\r\nexport interface ValueConverter {\r\n    /**\r\n     * Converts a string value from the source text format into a value to be held in the AST.\r\n     */\r\n    convert(input: string, cstNode: CstNode): ValueType;\r\n}\r\n\r\nexport type ValueType = string | number | boolean | bigint | Date;\r\n\r\nexport class DefaultValueConverter implements ValueConverter {\r\n\r\n    convert(input: string, cstNode: CstNode): ValueType {\r\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\r\n        if (isCrossReference(feature)) {\r\n            feature = getCrossReferenceTerminal(feature);\r\n        }\r\n        if (isRuleCall(feature)) {\r\n            const rule = feature.rule.ref;\r\n            if (!rule) {\r\n                throw new Error('This cst node was not parsed by a rule.');\r\n            }\r\n            return this.runConverter(rule, input, cstNode);\r\n        }\r\n        return input;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\r\n        switch (rule.name.toUpperCase()) {\r\n            case 'INT': return ValueConverter.convertInt(input);\r\n            case 'STRING': return ValueConverter.convertString(input);\r\n            case 'ID': return ValueConverter.convertID(input);\r\n        }\r\n        switch (getRuleType(rule)?.toLowerCase()) {\r\n            case 'number': return ValueConverter.convertNumber(input);\r\n            case 'boolean': return ValueConverter.convertBoolean(input);\r\n            case 'bigint': return ValueConverter.convertBigint(input);\r\n            case 'date': return ValueConverter.convertDate(input);\r\n            default: return input;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ValueConverter {\r\n\r\n    export function convertString(input: string): string {\r\n        let result = '';\r\n        for (let i = 1; i < input.length - 1; i++) {\r\n            const c = input.charAt(i);\r\n            if (c === '\\\\') {\r\n                const c1 = input.charAt(++i);\r\n                result += convertEscapeCharacter(c1);\r\n            } else {\r\n                result += c;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertEscapeCharacter(char: string): string {\r\n        switch (char) {\r\n            case 'b': return '\\b';\r\n            case 'f': return '\\f';\r\n            case 'n': return '\\n';\r\n            case 'r': return '\\r';\r\n            case 't': return '\\t';\r\n            case 'v': return '\\v';\r\n            case '0': return '\\0';\r\n            default: return char;\r\n        }\r\n    }\r\n\r\n    export function convertID(input: string): string {\r\n        if (input.charAt(0) === '^') {\r\n            return input.substring(1);\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n\r\n    export function convertInt(input: string): number {\r\n        return parseInt(input);\r\n    }\r\n\r\n    export function convertBigint(input: string): bigint {\r\n        return BigInt(input);\r\n    }\r\n\r\n    export function convertDate(input: string): Date {\r\n        return new Date(input);\r\n    }\r\n\r\n    export function convertNumber(input: string): number {\r\n        return Number(input);\r\n    }\r\n\r\n    export function convertBoolean(input: string): boolean {\r\n        return input.toLowerCase() === 'true';\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport type { URI } from './utils/uri-utils.js';\r\nimport type { AbstractElement } from './languages/generated/ast.js';\r\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\r\n\r\n/**\r\n * A node in the Abstract Syntax Tree (AST).\r\n */\r\nexport interface AstNode {\r\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\r\n    readonly $type: string;\r\n    /** The container node in the AST; every node except the root node has a container. */\r\n    readonly $container?: AstNode;\r\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\r\n    readonly $containerProperty?: string;\r\n    /** In case `$containerProperty` is an array, the array index is stored here. */\r\n    readonly $containerIndex?: number;\r\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\r\n    readonly $cstNode?: CstNode;\r\n    /** The document containing the AST; only the root node has a direct reference to the document. */\r\n    readonly $document?: LangiumDocument;\r\n}\r\n\r\nexport function isAstNode(obj: unknown): obj is AstNode {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\r\n}\r\n\r\nexport interface GenericAstNode extends AstNode {\r\n    [key: string]: unknown\r\n}\r\n\r\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\r\n\r\n/**\r\n * The property names of a given AST node type.\r\n */\r\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\r\n\r\n/**\r\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\r\n */\r\nexport interface Reference<T extends AstNode = AstNode> {\r\n    /**\r\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\r\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\r\n     * the value is `undefined`.\r\n     */\r\n    readonly ref?: T;\r\n\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    readonly error?: LinkingError;\r\n    /** The CST node from which the reference was parsed */\r\n    readonly $refNode?: CstNode;\r\n    /** The actual text used to look up in the surrounding scope */\r\n    readonly $refText: string;\r\n    /** The node description for the AstNode returned by `ref`  */\r\n    readonly $nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isReference(obj: unknown): obj is Reference {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n}\r\n\r\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\r\n    readonly ref: T;\r\n}\r\n\r\n/**\r\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\r\n */\r\nexport interface AstNodeDescription {\r\n    /** The target node; should be present only for local references (linking to the same document). */\r\n    node?: AstNode;\r\n    /**\r\n     * The document segment that represents the range of the name of the AST node.\r\n     */\r\n    nameSegment?: DocumentSegment;\r\n    /**\r\n     * The document segment that represents the full range of the AST node.\r\n     */\r\n    selectionSegment?: DocumentSegment;\r\n    /** `$type` property value of the AST node */\r\n    type: string;\r\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\r\n    name: string;\r\n    /** URI to the document containing the AST node */\r\n    documentUri: URI;\r\n    /** Navigation path inside the document */\r\n    path: string;\r\n}\r\n\r\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\r\n    return typeof obj === 'object' && obj !== null\r\n        && typeof (obj as AstNodeDescription).name === 'string'\r\n        && typeof (obj as AstNodeDescription).type === 'string'\r\n        && typeof (obj as AstNodeDescription).path === 'string';\r\n}\r\n\r\n/**\r\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\r\n * unresolved references.\r\n */\r\nexport interface ReferenceInfo {\r\n    reference: Reference\r\n    container: AstNode\r\n    property: string\r\n    index?: number\r\n}\r\n\r\n/**\r\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\r\n */\r\nexport interface LinkingError extends ReferenceInfo {\r\n    message: string;\r\n    targetDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isLinkingError(obj: unknown): obj is LinkingError {\r\n    return typeof obj === 'object' && obj !== null\r\n        && isAstNode((obj as LinkingError).container)\r\n        && isReference((obj as LinkingError).reference)\r\n        && typeof (obj as LinkingError).message === 'string';\r\n}\r\n\r\n/**\r\n * Service used for generic access to the structure of the AST. This service is shared between\r\n * all involved languages, so it operates on the superset of types of these languages.\r\n */\r\nexport interface AstReflection {\r\n    getAllTypes(): string[]\r\n    getAllSubTypes(type: string): string[]\r\n    getReferenceType(refInfo: ReferenceInfo): string\r\n    getTypeMetaData(type: string): TypeMetaData\r\n    isInstance(node: unknown, type: string): boolean\r\n    isSubtype(subtype: string, supertype: string): boolean\r\n}\r\n\r\n/**\r\n * An abstract implementation of the {@link AstReflection} interface.\r\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\r\n */\r\nexport abstract class AbstractAstReflection implements AstReflection {\r\n\r\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\r\n    protected allSubtypes: Record<string, string[] | undefined> = {};\r\n\r\n    abstract getAllTypes(): string[];\r\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\r\n    abstract getTypeMetaData(type: string): TypeMetaData;\r\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\r\n\r\n    isInstance(node: unknown, type: string): boolean {\r\n        return isAstNode(node) && this.isSubtype(node.$type, type);\r\n    }\r\n\r\n    isSubtype(subtype: string, supertype: string): boolean {\r\n        if (subtype === supertype) {\r\n            return true;\r\n        }\r\n        let nested = this.subtypes[subtype];\r\n        if (!nested) {\r\n            nested = this.subtypes[subtype] = {};\r\n        }\r\n        const existing = nested[supertype];\r\n        if (existing !== undefined) {\r\n            return existing;\r\n        } else {\r\n            const result = this.computeIsSubtype(subtype, supertype);\r\n            nested[supertype] = result;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    getAllSubTypes(type: string): string[] {\r\n        const existing = this.allSubtypes[type];\r\n        if (existing) {\r\n            return existing;\r\n        } else {\r\n            const allTypes = this.getAllTypes();\r\n            const types: string[] = [];\r\n            for (const possibleSubType of allTypes) {\r\n                if (this.isSubtype(possibleSubType, type)) {\r\n                    types.push(possibleSubType);\r\n                }\r\n            }\r\n            this.allSubtypes[type] = types;\r\n            return types;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents runtime meta data about a meta model type.\r\n */\r\nexport interface TypeMetaData {\r\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\r\n    name: string\r\n    /** A list of properties. They can contain default values for their respective property in the AST. */\r\n    properties: TypeProperty[]\r\n}\r\n\r\n/**\r\n * Describes the meta data of a property of an AST node.\r\n *\r\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\r\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\r\n */\r\nexport interface TypeProperty {\r\n    name: string\r\n    defaultValue?: PropertyType\r\n}\r\n\r\n/**\r\n * Represents a default value for an AST property.\r\n */\r\nexport type PropertyType = number | string | boolean | PropertyType[];\r\n\r\n/**\r\n * A node in the Concrete Syntax Tree (CST).\r\n */\r\nexport interface CstNode extends DocumentSegment {\r\n    /** The container node in the CST */\r\n    readonly container?: CompositeCstNode;\r\n    /** @deprecated use `container` instead. */\r\n    readonly parent?: CompositeCstNode;\r\n    /** The actual text */\r\n    readonly text: string;\r\n    /** The root CST node */\r\n    readonly root: RootCstNode;\r\n    /** The grammar element from which this node was parsed */\r\n    readonly grammarSource?: AbstractElement;\r\n    /** @deprecated use `grammarSource` instead. */\r\n    readonly feature?: AbstractElement;\r\n    /** The AST node created from this CST node */\r\n    readonly astNode: AstNode;\r\n    /** @deprecated use `astNode` instead. */\r\n    readonly element: AstNode;\r\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\r\n    readonly hidden: boolean;\r\n}\r\n\r\n/**\r\n * A composite CST node contains other nodes, but no directly associated token.\r\n */\r\nexport interface CompositeCstNode extends CstNode {\r\n    readonly content: CstNode[];\r\n    /** @deprecated use `content` instead. */\r\n    readonly children: CstNode[];\r\n}\r\n\r\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\r\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\r\n}\r\n\r\n/**\r\n * A leaf CST node corresponds to a token in the input token stream.\r\n */\r\nexport interface LeafCstNode extends CstNode {\r\n    readonly tokenType: TokenType;\r\n}\r\n\r\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\r\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\r\n}\r\n\r\nexport interface RootCstNode extends CompositeCstNode {\r\n    readonly fullText: string\r\n}\r\n\r\nexport function isRootCstNode(node: unknown): node is RootCstNode {\r\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\r\n}\r\n\r\n/**\r\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\r\n */\r\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\r\n\r\n/**\r\n * Returns the property names (!) of an AstNode that are cross-references.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\r\n */\r\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\r\n    ExtractKeysOfValueType<N, Reference|undefined>\r\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) & {};\r\n\r\n/**\r\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\r\n */\r\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\r\n\r\n/**\r\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\r\n */\r\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\r\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\r\n}[keyof A];\r\n\r\nexport type Mutable<T> = {\r\n    -readonly [P in keyof T]: T[P]\r\n};\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\r\nimport { inRange } from './cst-utils.js';\r\n\r\n/**\r\n * Link the `$container` and other related properties of every AST node that is directly contained\r\n * in the given `node`.\r\n */\r\nexport function linkContentToContainer(node: AstNode): void {\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach((item, index) => {\r\n                    if (isAstNode(item)) {\r\n                        (item as Mutable<AstNode>).$container = node;\r\n                        (item as Mutable<AstNode>).$containerProperty = name;\r\n                        (item as Mutable<AstNode>).$containerIndex = index;\r\n                    }\r\n                });\r\n            } else if (isAstNode(value)) {\r\n                (value as Mutable<AstNode>).$container = node;\r\n                (value as Mutable<AstNode>).$containerProperty = name;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\r\n * node that matches the type predicate. If the start node itself matches, it is returned.\r\n * If no container matches, `undefined` is returned.\r\n */\r\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\r\n    let item = node;\r\n    while (item) {\r\n        if (typePredicate(item)) {\r\n            return item;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\r\n * of a container that matches the given predicate. The start node is included in the checks.\r\n */\r\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\r\n    let item = node;\r\n    while (item) {\r\n        if (predicate(item)) {\r\n            return true;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Retrieve the document in which the given AST node is contained. A reference to the document is\r\n * usually held by the root node of the AST.\r\n *\r\n * @throws an error if the node is not contained in a document.\r\n */\r\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\r\n    const rootNode = findRootNode(node);\r\n    const result = rootNode.$document;\r\n    if (!result) {\r\n        throw new Error('AST node has no document.');\r\n    }\r\n    return result as LangiumDocument<T>;\r\n}\r\n\r\n/**\r\n * Returns the root node of the given AST node by following the `$container` references.\r\n */\r\nexport function findRootNode(node: AstNode): AstNode {\r\n    while (node.$container) {\r\n        node = node.$container;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport interface AstStreamOptions {\r\n    /**\r\n     * Optional target range that the nodes in the stream need to intersect\r\n     */\r\n    range?: Range\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\r\n    if (!node) {\r\n        throw new Error('Node must be an AstNode.');\r\n    }\r\n    const range = options?.range;\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, AstNode>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isAstNode(value)) {\r\n                    state.keyIndex++;\r\n                    if (isAstNodeInRange(value, range)) {\r\n                        return { done: false, value };\r\n                    }\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\r\n                            return { done: false, value: element };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\r\n * This does not include the root node itself.\r\n */\r\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options));\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\r\n        // Return an empty stream if the root node isn't in range\r\n        return new TreeStreamImpl(root, () => []);\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\r\n}\r\n\r\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\r\n    if (!range) {\r\n        return true;\r\n    }\r\n    const nodeRange = astNode.$cstNode?.range;\r\n    if (!nodeRange) {\r\n        return false;\r\n    }\r\n    return inRange(nodeRange, range);\r\n}\r\n\r\n/**\r\n * Create a stream of all cross-references that are held by the given AST node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, ReferenceInfo>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isReference(value)) {\r\n                    state.keyIndex++;\r\n                    return { done: false, value: { reference: value, container: node, property } };\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isReference(element)) {\r\n                            return { done: false, value: { reference: element, container: node, property, index } };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a Stream of references to the target node from the AstNode tree\r\n *\r\n * @param targetNode AstNode we are looking for\r\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\r\n */\r\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\r\n    const refs: Reference[] = [];\r\n    streamAst(lookup).forEach(node => {\r\n        streamReferences(node).forEach(refInfo => {\r\n            if (refInfo.reference.ref === targetNode) {\r\n                refs.push(refInfo.reference);\r\n            }\r\n        });\r\n    });\r\n    return stream(refs);\r\n}\r\n\r\n/**\r\n * Assigns all mandatory AST properties to the specified node.\r\n *\r\n * @param reflection Reflection object used to gather mandatory properties for the node.\r\n * @param node Specified node is modified in place and properties are directly assigned.\r\n */\r\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\r\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\r\n    const genericNode = node as GenericAstNode;\r\n    for (const property of typeMetaData.properties) {\r\n        // Only set the value if the property is not already set and if it has a default value\r\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\r\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\r\n    if (Array.isArray(propertyType)) {\r\n        return [...propertyType.map(copyDefaultValue)];\r\n    } else {\r\n        return propertyType;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the specified AST node.\r\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\r\n *\r\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\r\n */\r\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\r\n    const copy: GenericAstNode = { $type: node.$type };\r\n\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (isAstNode(value)) {\r\n                copy[name] = copyAstNode(value, buildReference);\r\n            } else if (isReference(value)) {\r\n                copy[name] = buildReference(\r\n                    copy,\r\n                    name,\r\n                    value.$refNode,\r\n                    value.$refText\r\n                );\r\n            } else if (Array.isArray(value)) {\r\n                const copiedArray: unknown[] = [];\r\n                for (const element of value) {\r\n                    if (isAstNode(element)) {\r\n                        copiedArray.push(copyAstNode(element, buildReference));\r\n                    } else if (isReference(element)) {\r\n                        copiedArray.push(\r\n                            buildReference(\r\n                                copy,\r\n                                name,\r\n                                element.$refNode,\r\n                                element.$refText\r\n                            )\r\n                        );\r\n                    } else {\r\n                        copiedArray.push(element);\r\n                    }\r\n                }\r\n                copy[name] = copiedArray;\r\n            } else {\r\n                copy[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    linkContentToContainer(copy);\r\n    return copy as unknown as T;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken } from '@chevrotain/types';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\r\nimport { TreeStreamImpl } from './stream.js';\r\n\r\n/**\r\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\r\n    return new TreeStreamImpl(node, element => {\r\n        if (isCompositeCstNode(element)) {\r\n            return element.content;\r\n        } else {\r\n            return [];\r\n        }\r\n    }, { includeRoot: true });\r\n}\r\n\r\n/**\r\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\r\n */\r\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\r\n    return streamCst(node).filter(isLeafCstNode);\r\n}\r\n\r\n/**\r\n * Determines whether the specified cst node is a child of the specified parent node.\r\n */\r\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\r\n    while (child.container) {\r\n        child = child.container;\r\n        if (child === parent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function tokenToRange(token: IToken): Range {\r\n    // Chevrotain uses 1-based indices everywhere\r\n    // So we subtract 1 from every value to align with the LSP\r\n    return {\r\n        start: {\r\n            character: token.startColumn! - 1,\r\n            line: token.startLine! - 1\r\n        },\r\n        end: {\r\n            character: token.endColumn!, // endColumn uses the correct index\r\n            line: token.endLine! - 1\r\n        }\r\n    };\r\n}\r\n\r\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const { offset, end, range } = node;\r\n    return {\r\n        range,\r\n        offset,\r\n        end,\r\n        length: end - offset\r\n    };\r\n}\r\n\r\nexport enum RangeComparison {\r\n    Before = 0,\r\n    After = 1,\r\n    OverlapFront = 2,\r\n    OverlapBack = 3,\r\n    Inside = 4,\r\n    Outside = 5,\r\n}\r\n\r\nexport function compareRange(range: Range, to: Range): RangeComparison {\r\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\r\n        return RangeComparison.Before;\r\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\r\n        return RangeComparison.After;\r\n    }\r\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\r\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\r\n    if (startInside && endInside) {\r\n        return RangeComparison.Inside;\r\n    } else if (startInside) {\r\n        return RangeComparison.OverlapBack;\r\n    } else if (endInside) {\r\n        return RangeComparison.OverlapFront;\r\n    } else {\r\n        return RangeComparison.Outside;\r\n    }\r\n}\r\n\r\nexport function inRange(range: Range, to: Range): boolean {\r\n    const comparison = compareRange(range, to);\r\n    return comparison > RangeComparison.After;\r\n}\r\n\r\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\r\n// Together with \\w it matches any kind of character which can commonly appear in IDs\r\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\r\n\r\n/**\r\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\r\n * it will instead return the leaf node at the `offset - 1` position.\r\n *\r\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\r\n */\r\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\r\n    if (cstNode) {\r\n        if (offset > 0) {\r\n            const localOffset = offset - cstNode.offset;\r\n            const textAtOffset = cstNode.text.charAt(localOffset);\r\n            if (!nameRegexp.test(textAtOffset)) {\r\n                offset--;\r\n            }\r\n        }\r\n        return findLeafNodeAtOffset(cstNode, offset);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\r\n    if (cstNode) {\r\n        const previous = getPreviousNode(cstNode, true);\r\n        if (previous && isCommentNode(previous, commentNames)) {\r\n            return previous;\r\n        }\r\n        if (isRootCstNode(cstNode)) {\r\n            // Go from the first non-hidden node through all nodes in reverse order\r\n            // We do this to find the comment node which directly precedes the root node\r\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\r\n            for (let i = endIndex - 1; i >= 0; i--) {\r\n                const child = cstNode.content[i];\r\n                if (isCommentNode(child, commentNames)) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\r\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * Note that the given offset will be within the range of the returned leaf node.\r\n *\r\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node at the specified offset.\r\n */\r\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, false);\r\n        if (searchResult) {\r\n            return findLeafNodeAtOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * If no CST node exists at the specified position, it will return the leaf node before it.\r\n *\r\n * If there is no leaf node before the specified offset, this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node closest to the specified offset.\r\n */\r\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, true);\r\n        if (searchResult) {\r\n            return findLeafNodeBeforeOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\r\n    let left = 0;\r\n    let right = node.content.length - 1;\r\n    let closestNode: CstNode | undefined = undefined;\r\n\r\n    while (left <= right) {\r\n        const middle = Math.floor((left + right) / 2);\r\n        const middleNode = node.content[middle];\r\n\r\n        if (middleNode.offset <= offset && middleNode.end > offset) {\r\n            // Found an exact match\r\n            return middleNode;\r\n        }\r\n\r\n        if (middleNode.end <= offset) {\r\n            // Update the closest node (less than offset) and move to the right half\r\n            closestNode = closest ? middleNode : undefined;\r\n            left = middle + 1;\r\n        } else {\r\n            // Move to the left half\r\n            right = middle - 1;\r\n        }\r\n    }\r\n\r\n    return closestNode;\r\n}\r\n\r\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        while (index > 0) {\r\n            index--;\r\n            const previous = parent.content[index];\r\n            if (hidden || !previous.hidden) {\r\n                return previous;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        const last = parent.content.length - 1;\r\n        while (index < last) {\r\n            index++;\r\n            const next = parent.content[index];\r\n            if (hidden || !next.hidden) {\r\n                return next;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getStartlineNode(node: CstNode): CstNode {\r\n    if (node.range.start.character === 0) {\r\n        return node;\r\n    }\r\n    const line = node.range.start.line;\r\n    let last = node;\r\n    let index: number | undefined;\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const selfIndex = index ?? parent.content.indexOf(node);\r\n        if (selfIndex === 0) {\r\n            node = parent;\r\n            index = undefined;\r\n        } else {\r\n            index = selfIndex - 1;\r\n            node = parent.content[index];\r\n        }\r\n        if (node.range.start.line !== line) {\r\n            break;\r\n        }\r\n        last = node;\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\r\n    const commonParent = getCommonParent(start, end);\r\n    if (!commonParent) {\r\n        return [];\r\n    }\r\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\r\n}\r\n\r\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\r\n    const aParents = getParentChain(a);\r\n    const bParents = getParentChain(b);\r\n    let current: CommonParent | undefined;\r\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\r\n        const aParent = aParents[i];\r\n        const bParent = bParents[i];\r\n        if (aParent.parent === bParent.parent) {\r\n            current = {\r\n                parent: aParent.parent,\r\n                a: aParent.index,\r\n                b: bParent.index\r\n            };\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\ninterface CommonParent {\r\n    parent: CompositeCstNode\r\n    a: number\r\n    b: number\r\n}\r\n\r\nfunction getParentChain(node: CstNode): ParentLink[] {\r\n    const chain: ParentLink[] = [];\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const index = parent.content.indexOf(node);\r\n        chain.push({\r\n            parent,\r\n            index\r\n        });\r\n        node = parent;\r\n    }\r\n    return chain.reverse();\r\n}\r\n\r\ninterface ParentLink {\r\n    parent: CompositeCstNode\r\n    index: number\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CstNode } from '../syntax-tree.js';\r\n\r\nexport class ErrorWithLocation extends Error {\r\n    constructor(node: CstNode | undefined, message: string) {\r\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\r\n    }\r\n}\r\n\r\nexport function assertUnreachable(_: never): never {\r\n    throw new Error('Error! The input value was not handled.');\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { assertUnreachable } from '../utils/errors.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { isCompositeCstNode } from '../syntax-tree.js';\r\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\r\nimport { streamCst } from './cst-utils.js';\r\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\r\n\r\n/**\r\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\r\n * the result is `undefined`.\r\n */\r\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\r\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\r\n}\r\n\r\n/**\r\n * Returns all hidden terminal rules of the given grammar, if any.\r\n */\r\nexport function getHiddenRules(grammar: ast.Grammar) {\r\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\r\n}\r\n\r\n/**\r\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\r\n *\r\n * @param grammar The grammar that contains all rules\r\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\r\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\r\n *      this function returns all rules of the specified grammar.\r\n */\r\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\r\n    const ruleNames = new Set<string>();\r\n    const entryRule = getEntryRule(grammar);\r\n    if (!entryRule) {\r\n        return new Set(grammar.rules);\r\n    }\r\n\r\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\r\n    for (const rule of topMostRules) {\r\n        ruleDfs(rule, ruleNames, allTerminals);\r\n    }\r\n\r\n    const rules = new Set<ast.AbstractRule>();\r\n    for (const rule of grammar.rules) {\r\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\r\n            rules.add(rule);\r\n        }\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\r\n    visitedSet.add(rule.name);\r\n    streamAllContents(rule).forEach(node => {\r\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\r\n            const refRule = node.rule.ref;\r\n            if (refRule && !visitedSet.has(refRule.name)) {\r\n                ruleDfs(refRule, visitedSet, allTerminals);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\r\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\r\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\r\n *\r\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\r\n * and cannot be inferred.\r\n */\r\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\r\n    if (crossRef.terminal) {\r\n        return crossRef.terminal;\r\n    } else if (crossRef.type.ref) {\r\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\r\n        return nameAssigment?.terminal;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\r\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\r\n * that contains visible characters is considered a comment.\r\n */\r\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\r\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that contribute to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\r\n */\r\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\r\n    if (!node || !property) {\r\n        return [];\r\n    }\r\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that contributes to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\r\n    if (!node || !property) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\r\n    if (!first) {\r\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\r\n        if (nodeFeature && nodeFeature.feature === property) {\r\n            return [node];\r\n        }\r\n    }\r\n    if (isCompositeCstNode(node) && node.astNode === element) {\r\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that correspond to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\r\n * @param keyword A keyword as specified in the grammar.\r\n */\r\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\r\n    if (!node) {\r\n        return [];\r\n    }\r\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that corresponds to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\r\n * @param keyword A keyword as specified in the grammar.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\r\n    if (node.astNode !== element) {\r\n        return [];\r\n    }\r\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\r\n        return [node];\r\n    }\r\n    const treeIterator = streamCst(node).iterator();\r\n    let result: IteratorResult<CstNode>;\r\n    const keywordNodes: CstNode[] = [];\r\n    do {\r\n        result = treeIterator.next();\r\n        if (!result.done) {\r\n            const childNode = result.value;\r\n            if (childNode.astNode === element) {\r\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\r\n                    keywordNodes.push(childNode);\r\n                }\r\n            } else {\r\n                treeIterator.prune();\r\n            }\r\n        }\r\n    } while (!result.done);\r\n    return keywordNodes;\r\n}\r\n\r\n/**\r\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\r\n * node is returned. If no assignment is found, the result is `undefined`.\r\n *\r\n * @param cstNode A CST node for which to find a property assignment.\r\n */\r\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\r\n    const astNode = cstNode.astNode;\r\n    // Only search until the ast node of the parent cst node is no longer the original ast node\r\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\r\n    while (astNode === cstNode.container?.astNode) {\r\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\r\n        if (assignment) {\r\n            return assignment;\r\n        }\r\n        cstNode = cstNode.container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\r\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\r\n * this function returns `undefined`.\r\n */\r\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\r\n    let startNode: AstNode = type;\r\n    if (ast.isInferredType(startNode)) {\r\n        // for inferred types, the location to start searching for the name-assignment is different\r\n        if (ast.isAction(startNode.$container)) {\r\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\r\n            startNode = startNode.$container.$container!;\r\n        } else if (ast.isParserRule(startNode.$container)) {\r\n            // investigate the parser rule with the explicitly inferred type\r\n            startNode = startNode.$container;\r\n        } else {\r\n            assertUnreachable(startNode.$container);\r\n        }\r\n    }\r\n    return findNameAssignmentInternal(type, startNode, new Map());\r\n}\r\n\r\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\r\n    // the cache is only required to prevent infinite loops\r\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\r\n        let childAssignment: ast.Assignment | undefined = undefined;\r\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\r\n        // No parent assignment implies unassigned rule call\r\n        if (!parentAssignment) {\r\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\r\n        }\r\n        cache.set(type, childAssignment);\r\n        return childAssignment;\r\n    }\r\n\r\n    if (cache.has(type)) {\r\n        return cache.get(type);\r\n    }\r\n    cache.set(type, undefined);\r\n    for (const node of streamAllContents(startNode)) {\r\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\r\n            cache.set(type, node);\r\n            return node;\r\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\r\n            return go(node, node.rule.ref);\r\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\r\n            return go(node, node.typeRef.ref);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\r\n    const parent = element.$container;\r\n    if (ast.isGroup(parent)) {\r\n        const elements = parent.elements;\r\n        const index = elements.indexOf(element);\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            const item = elements[i];\r\n            if (ast.isAction(item)) {\r\n                return item;\r\n            } else {\r\n                const action = streamAllContents(elements[i]).find(ast.isAction);\r\n                if (action) {\r\n                    return action;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ast.isAbstractElement(parent)) {\r\n        return getActionAtElement(parent);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type Cardinality = '?' | '*' | '+' | undefined;\r\nexport type Operator = '=' | '+=' | '?=' | undefined;\r\n\r\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\r\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\r\n}\r\n\r\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\r\n    return cardinality === '*' || cardinality === '+';\r\n}\r\n\r\nexport function isArrayOperator(operator?: Operator): boolean {\r\n    return operator === '+=';\r\n}\r\n\r\n/**\r\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\r\n * primitive return type like `number`, `boolean`, etc.\r\n */\r\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\r\n    return isDataTypeRuleInternal(rule, new Set());\r\n}\r\n\r\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\r\n    if (visited.has(rule)) {\r\n        return true;\r\n    } else {\r\n        visited.add(rule);\r\n    }\r\n    for (const node of streamAllContents(rule)) {\r\n        if (ast.isRuleCall(node)) {\r\n            if (!node.rule.ref) {\r\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\r\n                return false;\r\n            }\r\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\r\n                return false;\r\n            }\r\n        } else if (ast.isAssignment(node)) {\r\n            return false;\r\n        } else if (ast.isAction(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return Boolean(rule.definition);\r\n}\r\n\r\nexport function isDataType(type: ast.Type): boolean {\r\n    return isDataTypeInternal(type.type, new Set());\r\n}\r\n\r\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\r\n    if (visited.has(type)) {\r\n        return true;\r\n    } else {\r\n        visited.add(type);\r\n    }\r\n    if (ast.isArrayType(type)) {\r\n        return false;\r\n    } else if (ast.isReferenceType(type)) {\r\n        return false;\r\n    } else if (ast.isUnionType(type)) {\r\n        return type.types.every(e => isDataTypeInternal(e, visited));\r\n    } else if (ast.isSimpleType(type)) {\r\n        if (type.primitiveType !== undefined) {\r\n            return true;\r\n        } else if (type.stringType !== undefined) {\r\n            return true;\r\n        } else if (type.typeRef !== undefined) {\r\n            const ref = type.typeRef.ref;\r\n            if (ast.isType(ref)) {\r\n                return isDataTypeInternal(ref.type, visited);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\r\n    if (rule.inferredType) {\r\n        return rule.inferredType.name;\r\n    } else if (rule.dataType) {\r\n        return rule.dataType;\r\n    } else if (rule.returnType) {\r\n        const refType = rule.returnType.ref;\r\n        if (refType) {\r\n            // check if we need to check Action as return type\r\n            if (ast.isParserRule(refType)) {\r\n                return refType.name;\r\n            } else if (ast.isInterface(refType) || ast.isType(refType)) {\r\n                return refType.name;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\r\n    if (ast.isParserRule(type)) {\r\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\r\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\r\n        return type.name;\r\n    } else if (ast.isAction(type)) {\r\n        const actionType = getActionType(type);\r\n        if (actionType) {\r\n            return actionType;\r\n        }\r\n    } else if (ast.isInferredType(type)) {\r\n        return type.name;\r\n    }\r\n    throw new Error('Cannot get name of Unknown Type');\r\n}\r\n\r\nexport function getActionType(action: ast.Action): string | undefined {\r\n    if (action.inferredType) {\r\n        return action.inferredType.name;\r\n    } else if (action.type?.ref) {\r\n        return getTypeName(action.type.ref);\r\n    }\r\n    return undefined; // not inferring and not referencing a valid type\r\n}\r\n\r\n/**\r\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\r\n * For data type rules, the name of the rule is returned,\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\r\n * @param rule the given rule\r\n * @returns the name of the AST node type of the rule\r\n */\r\nexport function getRuleTypeName(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\n/**\r\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\r\n * For data type rules, the name of the declared return type of the rule is returned (if any),\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\r\n * @param rule the given rule\r\n * @returns the name of the type of the produced values of the rule at runtime\r\n */\r\nexport function getRuleType(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\r\n    const flags: Flags = {\r\n        s: false,\r\n        i: false,\r\n        u: false\r\n    };\r\n    const source = abstractElementToRegex(terminalRule.definition, flags);\r\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\r\n    return new RegExp(source, flagText);\r\n}\r\n\r\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\r\nconst WILDCARD = /[\\s\\S]/.source;\r\n\r\ntype Flags = {\r\n    s: boolean;\r\n    i: boolean;\r\n    u: boolean;\r\n}\r\n\r\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\r\n    if (ast.isTerminalAlternatives(element)) {\r\n        return terminalAlternativesToRegex(element);\r\n    } else if (ast.isTerminalGroup(element)) {\r\n        return terminalGroupToRegex(element);\r\n    } else if (ast.isCharacterRange(element)) {\r\n        return characterRangeToRegex(element);\r\n    } else if (ast.isTerminalRuleCall(element)) {\r\n        const rule = element.rule.ref;\r\n        if (!rule) {\r\n            throw new Error('Missing rule reference.');\r\n        }\r\n        return withCardinality(abstractElementToRegex(rule.definition), {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else if (ast.isNegatedToken(element)) {\r\n        return negateTokenToRegex(element);\r\n    } else if (ast.isUntilToken(element)) {\r\n        return untilTokenToRegex(element);\r\n    } else if (ast.isRegexToken(element)) {\r\n        const lastSlash = element.regex.lastIndexOf('/');\r\n        const source = element.regex.substring(1, lastSlash);\r\n        const regexFlags = element.regex.substring(lastSlash + 1);\r\n        if (flags) {\r\n            flags.i = regexFlags.includes('i');\r\n            flags.s = regexFlags.includes('s');\r\n            flags.u = regexFlags.includes('u');\r\n        }\r\n        return withCardinality(source, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead,\r\n            wrap: false\r\n        });\r\n    } else if (ast.isWildcard(element)) {\r\n        return withCardinality(WILDCARD, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else {\r\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\r\n    }\r\n}\r\n\r\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\r\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\r\n        cardinality: alternatives.cardinality,\r\n        lookahead: alternatives.lookahead\r\n    });\r\n}\r\n\r\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\r\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\r\n        cardinality: group.cardinality,\r\n        lookahead: group.lookahead\r\n    });\r\n}\r\n\r\nfunction untilTokenToRegex(until: ast.UntilToken): string {\r\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\r\n        cardinality: until.cardinality,\r\n        lookahead: until.lookahead\r\n    });\r\n}\r\n\r\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\r\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\r\n        cardinality: negate.cardinality,\r\n        lookahead: negate.lookahead\r\n    });\r\n}\r\n\r\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\r\n    if (range.right) {\r\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\r\n            cardinality: range.cardinality,\r\n            lookahead: range.lookahead,\r\n            wrap: false\r\n        });\r\n    }\r\n    return withCardinality(keywordToRegex(range.left), {\r\n        cardinality: range.cardinality,\r\n        lookahead: range.lookahead,\r\n        wrap: false\r\n    });\r\n}\r\n\r\nfunction keywordToRegex(keyword: ast.Keyword): string {\r\n    return escapeRegExp(keyword.value);\r\n}\r\n\r\nfunction withCardinality(regex: string, options: {\r\n    cardinality?: string\r\n    wrap?: boolean\r\n    lookahead?: string\r\n}): string {\r\n    if (options.wrap !== false || options.lookahead) {\r\n        regex = `(${options.lookahead ?? ''}${regex})`;\r\n    }\r\n    if (options.cardinality) {\r\n        return `${regex}${options.cardinality}`;\r\n    }\r\n    return regex;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\r\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\r\n\r\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\r\n\r\nconst regexpParser = new RegExpParser();\r\n\r\n/**\r\n * This class is in charge of heuristically identifying start/end tokens of terminals.\r\n *\r\n * The way this works is by doing the following:\r\n * 1. Traverse the regular expression in the \"start state\"\r\n * 2. Add any encountered sets/single characters to the \"start regexp\"\r\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\r\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\r\n * 5. If we re-encounter any variable-length content we reset the end stack\r\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\r\n *\r\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\r\n */\r\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\r\n\r\n    private isStarting = true;\r\n    startRegexp: string;\r\n    private endRegexpStack: string[] = [];\r\n    multiline = false;\r\n    regex: string;\r\n\r\n    get endRegex(): string {\r\n        return this.endRegexpStack.join('');\r\n    }\r\n\r\n    reset(regex: string): void {\r\n        this.multiline = false;\r\n        this.regex = regex;\r\n        this.startRegexp = '';\r\n        this.isStarting = true;\r\n        this.endRegexpStack = [];\r\n    }\r\n\r\n    override visitGroup(node: Group) {\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        }\r\n    }\r\n\r\n    override visitCharacter(node: Character): void {\r\n        const char = String.fromCharCode(node.value);\r\n        if (!this.multiline && char === '\\n') {\r\n            this.multiline = true;\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const escapedChar = escapeRegExp(char);\r\n            this.endRegexpStack.push(escapedChar);\r\n            if (this.isStarting) {\r\n                this.startRegexp += escapedChar;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitSet(node: Set): void {\r\n        if (!this.multiline) {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            const regex = new RegExp(set);\r\n            this.multiline = Boolean('\\n'.match(regex));\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            this.endRegexpStack.push(set);\r\n            if (this.isStarting) {\r\n                this.startRegexp += set;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitChildren(node: IRegExpAST): void {\r\n        if (node.type === 'Group') {\r\n            // Ignore children of groups with quantifier (+/*/?)\r\n            // These groups are unrelated to start/end tokens of terminals\r\n            const group = node as Group;\r\n            if (group.quantifier) {\r\n                return;\r\n            }\r\n        }\r\n        super.visitChildren(node);\r\n    }\r\n}\r\n\r\nconst visitor = new TerminalRegExpVisitor();\r\n\r\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\r\n    try {\r\n        if (typeof regexp !== 'string') {\r\n            regexp = regexp.source;\r\n        }\r\n        regexp = `/${regexp}/`;\r\n        const pattern = regexpParser.pattern(regexp);\r\n        const parts: Array<{ start: string, end: string }> = [];\r\n        for (const alternative of pattern.value.value) {\r\n            visitor.reset(regexp);\r\n            visitor.visit(alternative);\r\n            parts.push({\r\n                start: visitor.startRegexp,\r\n                end: visitor.endRegex\r\n            });\r\n        }\r\n        return parts;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function isMultilineComment(regexp: RegExp | string): boolean {\r\n    try {\r\n        if (typeof regexp === 'string') {\r\n            regexp = new RegExp(regexp);\r\n        }\r\n        regexp = regexp.toString();\r\n        visitor.reset(regexp);\r\n        // Parsing the pattern might fail (since it's user code)\r\n        visitor.visit(regexpParser.pattern(regexp));\r\n        return visitor.multiline;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\r\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\r\n */\r\nexport const whitespaceCharacters = (\r\n    '\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\r\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\r\n\r\nexport function isWhitespace(value: RegExp | string): boolean {\r\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\r\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\r\n}\r\n\r\nexport function escapeRegExp(value: string): string {\r\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport function getCaseInsensitivePattern(keyword: string): string {\r\n    return Array.prototype.map.call(keyword, letter =>\r\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\r\n    ).join('');\r\n}\r\n\r\n/**\r\n * Determines whether the given input has a partial match with the specified regex.\r\n * @param regex The regex to partially match against\r\n * @param input The input string\r\n * @returns Whether any match exists.\r\n */\r\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\r\n    const partial = partialRegExp(regex);\r\n    const match = input.match(partial);\r\n    return !!match && match[0].length > 0;\r\n}\r\n\r\n/**\r\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\r\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\r\n * @param regex The input regex to be converted.\r\n * @returns A partial regex constructed from the input regex.\r\n */\r\nexport function partialRegExp(regex: RegExp | string): RegExp {\r\n    if (typeof regex === 'string') {\r\n        regex = new RegExp(regex);\r\n    }\r\n    const re = regex, source = regex.source;\r\n    let i = 0;\r\n\r\n    function process() {\r\n        let result = '',\r\n            tmp;\r\n\r\n        function appendRaw(nbChars: number) {\r\n            result += source.substr(i, nbChars);\r\n            i += nbChars;\r\n        }\r\n\r\n        function appendOptional(nbChars: number) {\r\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\r\n            i += nbChars;\r\n        }\r\n\r\n        while (i < source.length) {\r\n            switch (source[i]) {\r\n                case '\\\\':\r\n                    switch (source[i + 1]) {\r\n                        case 'c':\r\n                            appendOptional(3);\r\n                            break;\r\n                        case 'x':\r\n                            appendOptional(4);\r\n                            break;\r\n                        case 'u':\r\n                            if (re.unicode) {\r\n                                if (source[i + 2] === '{') {\r\n                                    appendOptional(source.indexOf('}', i) - i + 1);\r\n                                } else {\r\n                                    appendOptional(6);\r\n                                }\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'p':\r\n                        case 'P':\r\n                            if (re.unicode) {\r\n                                appendOptional(source.indexOf('}', i) - i + 1);\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'k':\r\n                            appendOptional(source.indexOf('>', i) - i + 1);\r\n                            break;\r\n                        default:\r\n                            appendOptional(2);\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                case '[':\r\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source) || [];\r\n                    appendOptional(tmp[0].length);\r\n                    break;\r\n\r\n                case '|':\r\n                case '^':\r\n                case '$':\r\n                case '*':\r\n                case '+':\r\n                case '?':\r\n                    appendRaw(1);\r\n                    break;\r\n                case '{':\r\n                    tmp = /\\{\\d+,?\\d*\\}/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source);\r\n                    if (tmp) {\r\n                        appendRaw(tmp[0].length);\r\n                    } else {\r\n                        appendOptional(1);\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    if (source[i + 1] === '?') {\r\n                        switch (source[i + 2]) {\r\n                            case ':':\r\n                                result += '(?:';\r\n                                i += 3;\r\n                                result += process() + '|$)';\r\n                                break;\r\n                            case '=':\r\n                                result += '(?=';\r\n                                i += 3;\r\n                                result += process() + ')';\r\n                                break;\r\n                            case '!':\r\n                                tmp = i;\r\n                                i += 3;\r\n                                process();\r\n                                result += source.substr(tmp, i - tmp);\r\n                                break;\r\n                            case '<':\r\n                                switch (source[i + 3]) {\r\n                                    case '=':\r\n                                    case '!':\r\n                                        tmp = i;\r\n                                        i += 4;\r\n                                        process();\r\n                                        result += source.substr(tmp, i - tmp);\r\n                                        break;\r\n                                    default:\r\n                                        appendRaw(source.indexOf('>', i) - i + 1);\r\n                                        result += process() + '|$)';\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        appendRaw(1);\r\n                        result += process() + '|$)';\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    ++i;\r\n                    return result;\r\n                default:\r\n                    appendOptional(1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return new RegExp(process(), regex.flags);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\r\n * both sequentially and randomly (via index), a stream allows only sequential access.\r\n *\r\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\r\n * to store intermediate values. This can boost performance when a large sequence is\r\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\r\n * evaluation means that all processing is repeated when you access the sequence multiple\r\n * times; in such a case, it may be better to store the resulting sequence into an array.\r\n */\r\nexport interface Stream<T> extends Iterable<T> {\r\n\r\n    /**\r\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\r\n     */\r\n    iterator(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Determines whether this stream contains no elements.\r\n     */\r\n    isEmpty(): boolean;\r\n\r\n    /**\r\n     * Determines the number of elements in this stream.\r\n     */\r\n    count(): number;\r\n\r\n    /**\r\n     * Collects all elements of this stream into an array.\r\n     */\r\n    toArray(): T[];\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Set.\r\n     */\r\n    toSet(): Set<T>;\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\r\n     *\r\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\r\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\r\n     */\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\r\n\r\n    /**\r\n     * Returns a string representation of a stream.\r\n     */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\r\n     *\r\n     * @param other Stream to be concatenated with this one.\r\n     */\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\r\n\r\n    /**\r\n     * Adds all elements of the stream into a string, separated by the specified separator string.\r\n     *\r\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\r\n     *        If omitted, the steam elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\r\n     *\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\r\n     *        starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Determines whether all members of the stream satisfy the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\r\n     *        of the stream.\r\n     */\r\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Determines whether any member of the stream satisfies the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\r\n     *        of the stream.\r\n     */\r\n    some(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Performs the specified action for each element in the stream.\r\n     *\r\n     * @param callbackfn Function called once for each element in the stream.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number) => void): void;\r\n\r\n    /**\r\n     * Returns a stream that yields the results of calling the specified callback function on each element\r\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\r\n     * accessing the resulting stream multiple times means the function is also called multiple times for\r\n     * each element of the stream.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that meet the condition specified in a callback function.\r\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\r\n     * resulting stream multiple times means the function is also called multiple times for each element\r\n     * of the stream.\r\n     *\r\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\r\n     */\r\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\r\n    filter(predicate: (value: T) => unknown): Stream<T>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\r\n     * nor `null`.\r\n     */\r\n    nonNullable(): Stream<NonNullable<T>>;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream. The return value of the\r\n     * callback function is the accumulated result, and is provided as an argument in the next call to\r\n     * the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of a stream value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    findIndex(predicate: (value: T) => unknown): number;\r\n\r\n    /**\r\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\r\n     *\r\n     * @param searchElement The element to search for.\r\n     */\r\n    includes(searchElement: T): boolean;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of the stream and then flattens the result into\r\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\r\n\r\n    /**\r\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\r\n     * to the specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth. Defaults to 1.\r\n     */\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\r\n\r\n    /**\r\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\r\n     */\r\n    head(): T | undefined;\r\n\r\n    /**\r\n     * Returns a stream that skips the first `skipCount` elements from this stream.\r\n     *\r\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\r\n     *        the stream, an empty stream is returned. Defaults to 1.\r\n     */\r\n    tail(skipCount?: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\r\n     * in length.\r\n     *\r\n     * @param maxSize The number of elements the stream should be limited to\r\n     */\r\n    limit(maxSize: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream containing only the distinct elements from this stream.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     *\r\n     * @param by A function returning the key used to check equality with a previous stream element.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     * @param other The elements that should be exluded from this stream.\r\n     * @param key A function returning the key used to check quality.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\r\n\r\n}\r\n\r\nexport type FlatStream<T, Depth extends number> = {\r\n    'done': Stream<T>,\r\n    'recur': T extends Iterable<infer Content>\r\n        ? FlatStream<Content, MinusOne<Depth>>\r\n        : Stream<T>\r\n}[Depth extends 0 ? 'done' : 'recur'];\r\n\r\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\r\n\r\n/**\r\n * The default implementation of `Stream` works with two input functions:\r\n *  - The first function creates the initial state of an iteration.\r\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\r\n */\r\nexport class StreamImpl<S, T> implements Stream<T> {\r\n    protected readonly startFn: () => S;\r\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\r\n\r\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\r\n        this.startFn = startFn;\r\n        this.nextFn = nextFn;\r\n    }\r\n\r\n    iterator(): IterableIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        return this.iterator();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        const iterator = this.iterator();\r\n        return Boolean(iterator.next().done);\r\n    }\r\n\r\n    count(): number {\r\n        const iterator = this.iterator();\r\n        let count = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            count++;\r\n            next = iterator.next();\r\n        }\r\n        return count;\r\n    }\r\n\r\n    toArray(): T[] {\r\n        const result: T[] = [];\r\n        const iterator = this.iterator();\r\n        let next: IteratorResult<T>;\r\n        do {\r\n            next = iterator.next();\r\n            if (next.value !== undefined) {\r\n                result.push(next.value);\r\n            }\r\n        } while (!next.done);\r\n        return result;\r\n    }\r\n\r\n    toSet(): Set<T> {\r\n        return new Set(this);\r\n    }\r\n\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\r\n        const entryStream = this.map(element => <[K, V]>[\r\n            keyFn ? keyFn(element) : element,\r\n            valueFn ? valueFn(element) : element\r\n        ]);\r\n        return new Map(entryStream);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join();\r\n    }\r\n\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\r\n        return new StreamImpl<{ first: S, firstDone: boolean, iterator: Iterator<T2, unknown, undefined> }, T | T2>(\r\n            () => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }),\r\n            state => {\r\n                let result: IteratorResult<T | T2>;\r\n                if (!state.firstDone) {\r\n                    do {\r\n                        result = this.nextFn(state.first);\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    } while (!result.done);\r\n                    state.firstDone = true;\r\n                }\r\n                do {\r\n                    result = state.iterator.next();\r\n                    if (!result.done) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    join(separator = ','): string {\r\n        const iterator = this.iterator();\r\n        let value = '';\r\n        let result: IteratorResult<T>;\r\n        let addSeparator = false;\r\n        do {\r\n            result = iterator.next();\r\n            if (!result.done) {\r\n                if (addSeparator) {\r\n                    value += separator;\r\n                }\r\n                value += toString(result.value);\r\n            }\r\n            addSeparator = true;\r\n        } while (!result.done);\r\n        return value;\r\n    }\r\n\r\n    indexOf(searchElement: T, fromIndex = 0): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (index >= fromIndex && next.value === searchElement) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // In the following definition the '& this' part in the return type is important\r\n    // _and_ the order within 'Stream<U> & this' is crucial!\r\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\r\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\r\n    // ```\r\n    //  const stream = new StreamImpl(...);\r\n    //  ... stream.every(<typeGuard>) & stream....\r\n    // ```\r\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\r\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\r\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\r\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n    every(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (!predicate(next.value)) {\r\n                return false;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    some(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, index: number) => void): void {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            callbackfn(next.value, index);\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n    }\r\n\r\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\r\n        return new StreamImpl<S, U>(\r\n            this.startFn,\r\n            (state) => {\r\n                const { done, value } = this.nextFn(state);\r\n                if (done) {\r\n                    return DONE_RESULT;\r\n                } else {\r\n                    return { done: false, value: callbackfn(value) };\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\r\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            this.startFn,\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state);\r\n                    if (!result.done && predicate(result.value)) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    nonNullable(): Stream<NonNullable<T>> {\r\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\r\n    }\r\n\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const iterator = this.iterator();\r\n        let previousValue: U | T | undefined = initialValue;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (previousValue === undefined) {\r\n                previousValue = next.value;\r\n            } else {\r\n                previousValue = callbackfn(previousValue, next.value);\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return previousValue;\r\n    }\r\n\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\r\n    }\r\n\r\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const next = iterator.next();\r\n        if (next.done) {\r\n            return initialValue;\r\n        }\r\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\r\n        if (previousValue === undefined) {\r\n            return next.value;\r\n        }\r\n        return callbackfn(previousValue, next.value);\r\n    }\r\n\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return next.value;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findIndex(predicate: (value: T) => unknown): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    includes(searchElement: T): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (next.value === searchElement) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\r\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\r\n        return new StreamImpl<FlatMapState, U>(\r\n            () => ({ this: this.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = this.nextFn(state.this);\r\n                    if (!done) {\r\n                        const mapped = callbackfn(value);\r\n                        if (isIterable(mapped)) {\r\n                            state.iterator = mapped[Symbol.iterator]();\r\n                        } else {\r\n                            return { done: false, value: mapped };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\r\n        if (depth === undefined) {\r\n            depth = 1 as D;\r\n        }\r\n        if (depth <= 0) {\r\n            return this as unknown as FlatStream<T, D>;\r\n        }\r\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\r\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\r\n        return new StreamImpl<FlatMapState, T>(\r\n            () => ({ this: stream.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = stream.nextFn(state.this);\r\n                    if (!done) {\r\n                        if (isIterable(value)) {\r\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\r\n                        } else {\r\n                            return { done: false, value: value };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        ) as unknown as FlatStream<T, D>;\r\n    }\r\n\r\n    head(): T | undefined {\r\n        const iterator = this.iterator();\r\n        const result = iterator.next();\r\n        if (result.done) {\r\n            return undefined;\r\n        }\r\n        return result.value;\r\n    }\r\n\r\n    tail(skipCount = 1): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            () => {\r\n                const state = this.startFn();\r\n                for (let i = 0; i < skipCount; i++) {\r\n                    const next = this.nextFn(state);\r\n                    if (next.done) {\r\n                        return state;\r\n                    }\r\n                }\r\n                return state;\r\n            },\r\n            this.nextFn\r\n        );\r\n    }\r\n\r\n    limit(maxSize: number): Stream<T> {\r\n        return new StreamImpl<{ size: number, state: S }, T>(\r\n            () => ({ size: 0, state: this.startFn() }),\r\n            state => {\r\n                state.size++;\r\n                if (state.size > maxSize) {\r\n                    return DONE_RESULT;\r\n                }\r\n                return this.nextFn(state.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\r\n        return new StreamImpl<{ set: Set<Key | T>, internalState: S }, T>(\r\n            () => ({ set: new Set<Key | T>(), internalState: this.startFn() }),\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state.internalState);\r\n                    if (!result.done) {\r\n                        const value = by ? by(result.value) : result.value;\r\n                        if (!state.set.has(value)) {\r\n                            state.set.add(value);\r\n                            return result;\r\n                        }\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\r\n        const otherKeySet = new Set<Key | T>();\r\n        for (const item of other) {\r\n            const value = key ? key(item) : item;\r\n            otherKeySet.add(value);\r\n        }\r\n        return this.filter(e => {\r\n            const ownKey = key ? key(e) : e;\r\n            return !otherKeySet.has(ownKey);\r\n        });\r\n    }\r\n}\r\n\r\nfunction toString(item: unknown): string {\r\n    if (typeof item === 'string') {\r\n        return item as string;\r\n    }\r\n    if (typeof item === 'undefined') {\r\n        return 'undefined';\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof (item as any).toString === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return (item as any).toString();\r\n    }\r\n    return Object.prototype.toString.call(item);\r\n}\r\n\r\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\r\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * An empty stream of any type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\r\n\r\n/**\r\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\r\n */\r\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\r\n\r\n/**\r\n * Create a stream from one or more iterables or array-likes.\r\n */\r\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\r\n    if (collections.length === 1) {\r\n        const collection = collections[0];\r\n        if (collection instanceof StreamImpl) {\r\n            return collection as Stream<T>;\r\n        }\r\n        if (isIterable(collection)) {\r\n            return new StreamImpl<Iterator<T, undefined>, T>(\r\n                () => collection[Symbol.iterator](),\r\n                (iterator) => iterator.next()\r\n            );\r\n        }\r\n        if (typeof collection.length === 'number') {\r\n            return new StreamImpl<{ index: number }, T>(\r\n                () => ({ index: 0 }),\r\n                (state) => {\r\n                    if (state.index < collection.length) {\r\n                        return { done: false, value: collection[state.index++] };\r\n                    } else {\r\n                        return DONE_RESULT;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    if (collections.length > 1) {\r\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\r\n        return new StreamImpl<State, T>(\r\n            () => ({ collIndex: 0, arrIndex: 0 }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (!next.done) {\r\n                            return next;\r\n                        }\r\n                        state.iterator = undefined;\r\n                    }\r\n                    if (state.array) {\r\n                        if (state.arrIndex < state.array.length) {\r\n                            return { done: false, value: state.array[state.arrIndex++] };\r\n                        }\r\n                        state.array = undefined;\r\n                        state.arrIndex = 0;\r\n                    }\r\n                    if (state.collIndex < collections.length) {\r\n                        const collection = collections[state.collIndex++];\r\n                        if (isIterable(collection)) {\r\n                            state.iterator = collection[Symbol.iterator]();\r\n                        } else if (collection && typeof collection.length === 'number') {\r\n                            state.array = collection;\r\n                        }\r\n                    }\r\n                } while (state.iterator || state.array || state.collIndex < collections.length);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n    return EMPTY_STREAM;\r\n}\r\n\r\n/**\r\n * A tree iterator adds the ability to prune the current iteration.\r\n */\r\nexport interface TreeIterator<T> extends IterableIterator<T> {\r\n    /**\r\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\r\n     * element had no children.\r\n     */\r\n    prune(): void\r\n}\r\n\r\n/**\r\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\r\n */\r\nexport interface TreeStream<T> extends Stream<T> {\r\n    iterator(): TreeIterator<T>\r\n}\r\n\r\n/**\r\n * The default implementation of `TreeStream` takes a root element and a function that computes the\r\n * children of its argument. Whether the root node included in the stream is controlled with the\r\n * `includeRoot` option, which defaults to `false`.\r\n */\r\nexport class TreeStreamImpl<T>\r\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\r\n    implements TreeStream<T> {\r\n\r\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\r\n        super(\r\n            () => ({\r\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\r\n                pruned: false\r\n            }),\r\n            state => {\r\n                if (state.pruned) {\r\n                    state.iterators.pop();\r\n                    state.pruned = false;\r\n                }\r\n                while (state.iterators.length > 0) {\r\n                    const iterator = state.iterators[state.iterators.length - 1];\r\n                    const next = iterator.next();\r\n                    if (next.done) {\r\n                        state.iterators.pop();\r\n                    } else {\r\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\r\n                        return next;\r\n                    }\r\n                }\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    override iterator(): TreeIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            prune: () => {\r\n                iterator.state.pruned = true;\r\n            },\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of utility functions that reduce a stream to a single value.\r\n */\r\nexport namespace Reduction {\r\n\r\n    /**\r\n     * Compute the sum of a number stream.\r\n     */\r\n    export function sum(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a + b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the product of a number stream.\r\n     */\r\n    export function product(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a * b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function min(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.min(a, b));\r\n    }\r\n\r\n    /**\r\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function max(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.max(a, b));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface FileSystemNode {\r\n    readonly isFile: boolean;\r\n    readonly isDirectory: boolean;\r\n    readonly uri: URI;\r\n}\r\n\r\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\r\n\r\n/**\r\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\r\n */\r\nexport interface FileSystemProvider {\r\n    /**\r\n     * Reads a document asynchronously from a given URI.\r\n     * @returns The string content of the file with the specified URI.\r\n     */\r\n    readFile(uri: URI): Promise<string>;\r\n    /**\r\n     * Reads the directory information for the given URI.\r\n     * @returns The list of file system entries that are contained within the specified directory.\r\n     */\r\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\r\n}\r\n\r\nexport class EmptyFileSystemProvider implements FileSystemProvider {\r\n\r\n    readFile(): Promise<string> {\r\n        throw new Error('No file system is available.');\r\n    }\r\n\r\n    async readDirectory(): Promise<FileSystemNode[]> {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const EmptyFileSystem = {\r\n    fileSystemProvider: () => new EmptyFileSystemProvider()\r\n};\r\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}"],"names":["exports","ral_1","require","Is","events_1","CancellationToken","None","Object","freeze","isCancellationRequested","onCancellationRequested","Event","Cancelled","is","value","candidate","boolean","shortcutEvent","callback","context","handle","default","timer","setTimeout","bind","dispose","MutableToken","constructor","this","_isCancelled","cancel","_emitter","fire","undefined","Emitter","event","token","_token","defineProperty","_disposable","CallbackList","add","arguments","length","bucket","_callbacks","_contexts","push","Array","isArray","remove","foundCallbackWithDifferentContext","i","len","splice","Error","invoke","ret","callbacks","slice","contexts","_len","args","_key","apply","e","console","error","isEmpty","_options","_event","listener","thisArgs","disposables","onFirstListenerAdd","result","_noop","onLastListenerRemove","call","string","String","array","stringArray","func","number","Number","every","elem","_ral","RAL","install","ral","cc","char","charCodeAt","insertToSet","item","set","forEach","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","obj","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","concat","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","input","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","type","loc","begin","end","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","range","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","to","classEscape","capturing","groupAst","parseInt","nextChar","howMuch","isAtom","prevState","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","node","key","child","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","PieTokenBuilder","AbstractMermaidTokenBuilder","__name","super","PieValueConverter","AbstractMermaidValueConverter","runCustomConverter","rule","_cstNode","name","replace","trim","PieModule","parser","TokenBuilder","ValueConverter","createPieServices","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Pie","createDefaultCoreModule","PieGeneratedModule","ServiceRegistry","register","RadarTokenBuilder","RadarModule","CommonValueConverter","createRadarServices","Radar","RadarGeneratedModule","PacketTokenBuilder","PacketModule","createPacketServices","Packet","PacketGeneratedModule","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","GitGraph","GitGraphGeneratedModule","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","createArchitectureServices","Architecture","ArchitectureGeneratedModule","InfoTokenBuilder","InfoModule","createInfoServices","Info","InfoGeneratedModule","minimalGrammarModule","Grammar","LanguageMetaData","caseInsensitive","fileExtensions","languageId","minimalSharedGrammarModule","AstReflection","ast","loadGrammarFromJson","json","services","grammar","createMinimalGrammarServices","astNode","serializer","JsonSerializer","deserialize","workspace","LangiumDocumentFactory","fromModel","URI","parse","_a","__defProp","target","configurable","Statement","reflection","isInstance","Axis","Branch","Checkout","CherryPicking","Commit","Curve","Edge","Entry","Group","Junction","Merge","Option","PacketBlock","PieSection","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","Service","Direction","MermaidAstReflection","AbstractAstReflection","getAllTypes","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","container","$type","property","getTypeMetaData","properties","defaultValue","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","RadarGrammar","InfoLanguageMetaData","mode","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","DefaultValueConverter","runConverter","cstNode","runCommonConverter","regex","match","exec","_rule","_input","DefaultTokenBuilder","keywords","Set","buildKeywordTokens","rules","terminalTokens","options","tokenTypes","tokenType","has","PATTERN","RegExp","toString","parsers","initializers","info","async","createInfoServices2","LangiumParser","packet","createPacketServices2","pie","createPieServices2","architecture","createArchitectureServices2","gitGraph","createGitGraphServices2","radar","createRadarServices2","diagramType","text","initializer","lexerErrors","parserErrors","MermaidParseError","map","err","message","join","toFastProperties","toBecomeFast","FakeConstructor","prototype","fakeInstance","fakeAccess","bar","start","index","n","guard","toInteger","baseSlice","createAssigner","object","source","isPrototype","isArrayLike","copyObject","keys","assignValue","predicate","props","arrayMap","getAllKeysIn","prop","baseIteratee","basePickBy","path","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","tokenLabel","tokType","isString","LABEL","AbstractProduction","definition","_definition","accept","visitor","prod","NonTerminal","assign","pickBy","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","label","separator","terminalType","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","collection","baseEach","arraySome","baseSome","isIterateeCall","nativeMax","Math","max","fromIndex","values","indexOf","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","some","subProd","includes","getProductionDslName","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","terminal","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","baseUniq","first","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","flatten","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","negate","iteratee","comparator","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","computed","valuesIndex","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","PRINT_WARNING","warn","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","fromCharCode","upperChar","lowerChar","toLowerCase","handleIgnoreCase","findCode","setNode","targetCharCodes","find","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","action","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","reject","currType","Lexer","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","reduce","acc","x","longerAlt","canLineTerminator","isCustom","short","pop","canBeOptimized","charCodeToPatternIdxToConfig","currTokType","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","errors","missingResult","tokenTypesWithMissingPattern","filter","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","multiline","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","_ref","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","modes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","lastIndex","c","charsOrCodes","numOrString","charCode","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","categories","searching","CATEGORIES","newCategories","expandCategories","hasShortKeyProperty","hasCategoriesProperty","categoryMatches","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","fullText","startOffset","line","column","charAt","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","config","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","offset","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","startLine","startColumn","newMode","last","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","endOffset","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","previous","ruleName","buildNotAllInputParsedMessage","_ref2","firstRedundant","buildNoViableAltMessage","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","buildEarlyExitMessage","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ref","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","alternatives","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","size","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","flatMap","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","parameter","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","allRules","className","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","rest","validateAmbiguousAlternationAlternatives","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","other","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","RULE_STACK","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","LLkLookaheadStrategy","DEFAULT_PARSER_CONFIG","validate","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","buildLookaheadForAlternation","laFuncBuilder","buildLookaheadFuncForOr","buildLookaheadForOptional","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","reset","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","defineNameProp","nameValue","enumerable","writable","defaultVisit","ctx","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","children","createBaseSemanticVisitorConstructor","ruleNames","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","description","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","DEF","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","ALT","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","nodeLocationTracking","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","EMPTY_ALT","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","definitionErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","lookaheadStrategy","errorMessage","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","_b","initialize","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","tokenVocabulary","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","Map","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","get","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","isObject","noTokenCategoriesUsed","tokenConstructor","defineRule","impl","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","_len2","_key2","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","ARGS","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","consume","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","RECORDING_PHASE","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","JSON","stringify","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","EmbeddedActionsParser","configClone","buildATNKey","AbstractTransition","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","tokenRef","currentRule","nonTerminal","left","right","addTransition","ruleRef","defineDecisionState","makeAlts","optional","epsilon","starState","star","sep","repetitionSep","plusState","plus","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","next","removeState","makeBlock","blkStart","blkEnd","loop","loopback","entry","loopEnd","state","decision","a","b","partial","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","DFA_ERROR","ATNConfigSet","configs","finalize","getATNConfigKey","elements","stack","createDFACache","startState","predicateSet","existing","atnStartState","PredicateSet","EMPTY_PREDICATES","LLStarLookaheadStrategy","logging","dfas","decisionLength","decisionToDFA","initATNSimulator","decisionIndex","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","altSet","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","s0","previousD","d","edges","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","lookahead","reach","intermediate","skippedStopStates","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","min","reportLookaheadAmbiguity","atnState","buildAmbiguityError","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","mapKey","numberOfTransitions","p","atnStack","getEpsilonTarget","DocumentUri","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","character","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startCharacter","endCharacter","kind","collapsedText","defined","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","Boolean","Key","Null","containerName","selectionRange","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","Type","Parameter","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","leftIdx","rightIdx","content","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","ch","low","high","mid","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","rootNode","buildRootNode","RootCstNodeImpl","root","buildCompositeNode","feature","compositeNode","CompositeCstNodeImpl","grammarSource","buildLeafNode","leafNode","LeafCstNodeImpl","tokenToRange","removeNode","addHiddenNodes","nodes","added","unshift","construct","$cstNode","AbstractCstNode","hidden","_astNode","element","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","addParents","count","_len3","_key3","_text","DatatypeSymbol","Symbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","_unorderedGroups","lexer","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","wrapOption","wrapMany","wrapAtLeastOne","getRule","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","wrapSelfAnalysis","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","mainRule","fragment","isDataTypeRule","explicit","getExplicitRuleType","lexerResult","clear","lexerReport","report","createNode","extractHiddenTokens","hiddenTokens","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","isKeyword","convert","operator","subruleResult","wrapSubrule","performSubruleAssignment","newItem","assignWithoutOverride","linkContentToContainer","assignMandatoryProperties","getContainerOfType","isAssignment","isCrossReference","buildReference","existingValue","entries","newValue","targetCstNode","AbstractParserErrorMessageProvider","LangiumParserErrorMessageProvider","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","lastIndexOf","defaultConfig","useDefaultLookahead","createParser","parserContext","reachable","getAllReachableRules","parserRules","stream","isParserRule","buildElement","buildRules","method","ignoreGuard","keyword","buildKeyword","isAction","actionType","getTypeName","buildAction","buildCrossReference","isRuleCall","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","isTerminalRule","getToken","ErrorWithLocation","$refText","assertUnreachable","buildRuleCall","isAlternatives","methods","predicatedMethod","getGuardCondition","buildAlternatives","isUnorderedGroup","orIdx","idFunc","lParser","groupState","trackedAlternatives","wrapped","wrap","delete","buildUnorderedGroup","isGroup","buildGroup","isEndOfFile","cardinality","condition","isDisjunction","isConjunction","isNegation","isParameterReference","isBooleanLiteral","true","guardCondition","crossRef","terminalRule","findNameAssignment","assignTerminal","$container","getRuleName","createLangiumParser","prepareLangiumParser","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","interruptAndCheck","performance","now","Promise","resolve","setImmediate","Deferred","promise","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","substr","DocumentState","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","$document","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","all","addDocument","uriString","getDocument","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","unlink","Changed","precomputedScopes","deleteDocument","ref_resolving","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","streamAst","streamReferences","doLink","reference","getCandidate","isLinkingError","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","getScope","getElement","refNode","refText","$refNode","isAstNode","isAstNodeDescription","findRootNode","refData","getLinkedNode","ComputedScopes","descr","getAstNodePath","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","findNodeForProperty","UriUtils","basename","Utils","dirname","extname","joinPath","resolvePath","equals","relative","fromPath","toPath","fromParts","split","toParts","repeat","normalize","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","isReference","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","segment","toDocumentSegment","local","MultiMap","Reduction","sum","addAll","callbackfn","iterator","flat","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","streamContents","exportNode","createDescription","computeLocalScopes","scopes","streamAllContents","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","throwIfDisposed","SimpleCache","cache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","s","nonNullable","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","_c","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","startsWith","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","$containerProperty","$containerIndex","getRefNode","fragmentIndex","DefaultServiceRegistry","fileExtensionMap","languageIdMap","ext","singleton","hasServices","diagnosticData","ValidationCategory","DocumentValidator","ValidationRegistry","entriesBefore","entriesAfter","checksRecord","thisObj","category","wrapValidationException","addEntry","handleException","functionality","messageContext","getAllSubTypes","getChecks","checks","registerBeforeDocument","checkBefore","wrapPreparationException","registerAfterDocument","checkAfter","checksBefore","checksAfter","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","toDiagnosticData","getSource","parserError","linkingError","containerType","toDiagnostic","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","getDiagnosticRange","findNodeForKeyword","LexingWarning","LexingInfo","LexingHint","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","previousValue","currentValue","propertyIndex","arrayIndex","Disposable","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","onConfigurationSectionUpdate","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deletedUri","changedUri","newDocument","allChangedUris","toSet","shouldRelink","rebuildDocuments","sortDocuments","Linked","toArray","hasTextDocument","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","targetState","filtered","notifyDocumentPhase","targetStateDocs","notifyBuildPhase","onDocumentPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","listenersCopy","getBuildOptions","validator","validationSetting","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","workspaceFolders","folders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexerErrorMessageProvider","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","buildTokens","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","chevrotainResult","flushLexingReport","isIMultiModeLexerDefinition","res","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","NEWLINE_REGEXP","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","escapeRegExp","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","with","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","done","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","streamCst","dehydrateCstNode","arr","dehydrateReference","isRootCstNode","getGrammarElementId","isCompositeCstNode","isLeafCstNode","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","isAbstractElement","DocumentationProvider","isCommentTerminal","isMultilineComment","terminalRegex","nameRegexp","DefaultNameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","References","Hydrator","WorkspaceManager","ConfigurationProvider","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","_","ownKeys","__requested__","cause","value2","value1","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","GrammarImport","InferredType","isInferredType","isInterface","NamedArgument","Negation","NumberLiteral","ParameterReference","ParserRule","ReferenceType","ReturnType","isReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isType","TypeAttribute","UnionType","Action","Alternatives","Assignment","CharacterRange","isCharacterRange","CrossReference","EndOfFile","NegatedToken","isNegatedToken","RegexToken","isRegexToken","RuleCall","TerminalAlternatives","isTerminalAlternatives","TerminalGroup","isTerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","UntilToken","isUntilToken","Wildcard","isWildcard","LangiumGrammarAstReflection","reachableRules","buildTerminalTokens","terminalToken","isWhitespace","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","distinct","sort","buildKeywordToken","keywordPattern","buildKeywordPattern","findLongerAlt","getCaseInsensitivePattern","longerAlts","partialMatches","getCrossReferenceTerminal","convertInt","convertString","convertID","getRuleType","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","subtypes","allSubtypes","nested","allTypes","types","possibleSubType","typePredicate","StreamImpl","keyIndex","isAstNodeInRange","DONE_RESULT","TreeStreamImpl","includeRoot","nodeRange","inRange","typeMetaData","genericNode","copyDefaultValue","propertyType","RangeComparison","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","Outside","compareRange","commentNames","getPreviousNode","isCommentNode","findIndex","allTerminals","entryRule","getEntryRule","topMostRules","getHiddenRules","ruleDfs","visitedSet","refRule","nameAssigment","findNodesForPropertyInternal","nodeFeature","findNodesForKeywordInternal","treeIterator","keywordNodes","childNode","prune","startNode","findNameAssignmentInternal","go","refType","childAssignment","typeRef","isDataTypeRuleInternal","visited","inferredType","dataType","returnType","getActionType","u","abstractElementToRegex","flagText","WILDCARD","withCardinality","keywordToRegex","characterRangeToRegex","until","lastSlash","regexFlags","regexpParser","TerminalRegExpVisitor","isStarting","endRegexpStack","endRegex","startRegexp","escapedChar","regexp","whitespaceCharacters","ws","re","process","tmp","appendRaw","nbChars","appendOptional","partialRegExp","startFn","nextFn","toMap","keyFn","valueFn","entryStream","firstDone","addSeparator","searchElement","initialValue","reduceRight","recursiveReduce","mapped","isIterable","depth","head","tail","skipCount","limit","maxSize","by","internalState","exclude","otherKeySet","ownKey","EMPTY_STREAM","collections","collIndex","arrIndex","iterators","pruned","product","EmptyFileSystemProvider","isSymbol","customizer","castPath","toKey","objValue","isIndex","paths","baseGet","baseSet","baseClone","objectProto","sources","keysIn","propsIndex","propsLength","eq","findIndexFunc","iterable","createFind","baseFindIndex","hasPath","baseHas","baseMap","baseExtremum","baseLt","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber","toFinite","remainder","r","o","h","cwd","isAbsolute","f","l","_makeLong","format","dir","base","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P"],"sourceRoot":""}